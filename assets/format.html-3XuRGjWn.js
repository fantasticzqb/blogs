import{_ as n,c as s,o as a,a as t}from"./app-CcpQiU3r.js";const p={},e=t(`<h1 id="java-正则表达式" tabindex="-1"><a class="header-anchor" href="#java-正则表达式"><span>Java 正则表达式</span></a></h1><p>我们可能有如下的需求：</p><ul><li>从一个文章里找到所有的邮箱；</li><li>看看输入的手机号是不是符合手机号的规则；</li><li>检查输入的是不是身份证号。</li></ul><p>对于这种需要，都要求对字符串进行特定【模式或规则】的匹配。本章学习的正则表达式可以帮助我们实现这样的功能。</p><h2 id="第一章-概述" tabindex="-1"><a class="header-anchor" href="#第一章-概述"><span>第一章 概述</span></a></h2><p><strong>正则表达式</strong>，又称规则表达式**,**（Regular Expression，在代码中常简写为regex、regexp或RE），是一种【文本模式(Pattern)】。</p><p>正则表达式使用单个字符串来描述、匹配具有相同规则的字符串，通常被用来检索、替换那些符合某个模式（规则）的文本。正则表达式的核心功能就是处理文本。</p><p>正则表达式并不仅限于某一种语言，但是在每种语言中有细微的差别。</p><h2 id="第二章-正则表达式基础语法" tabindex="-1"><a class="header-anchor" href="#第二章-正则表达式基础语法"><span>第二章 正则表达式基础语法</span></a></h2><p>每一个字符串都可以被视为一个简单的正则表达式，例如 <strong>Hello World</strong> 正则表达式匹配 &quot;Hello World&quot; 字符串。</p><p>有的人可能觉得这不是废话么。但是有些【特殊的字符】或者【特殊的表达式】，比如<code>.</code>它可以匹配任何一个字符，如：&quot;a&quot; 或 &quot;b&quot;；比如<code>+</code>可以代表一个或多个；比如<code>\\d</code>可以代表任意数字等等。</p><h3 id="一、元字符" tabindex="-1"><a class="header-anchor" href="#一、元字符"><span>一、元字符</span></a></h3><p>元字符是构造正则表达式的一种基本元素。</p><ul><li>. ：匹配除换行符以外的任意字符</li><li>\\w：匹配字母或数字或下划线或汉字</li><li>\\s：匹配任意的空白符</li><li>\\d：匹配数字</li><li>\\b：匹配单词的开始或结束</li><li>^：匹配字符串的开始</li><li>$：匹配字符串的结束</li></ul><p><strong>案例：</strong></p><ul><li>匹配8位数字的QQ号码：<code>^\\d\\d\\d\\d\\d\\d\\d\\d$</code></li><li>匹配1开头11位数字的手机号码：<code>^1\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d$</code></li></ul><h3 id="二、重复限定符" tabindex="-1"><a class="header-anchor" href="#二、重复限定符"><span>二、重复限定符</span></a></h3><p>正则表达式提供了对重复字符进行简写的方式：</p><ul><li>*：重复零次或更多次</li><li>+：重复一次或更多次</li><li>?：重复零次或一次</li><li>{n}：重复n次</li><li>{n,}：重复n次或更多次</li><li>{n,m}：重复n到m次</li></ul><p>有了这些限定符之后，我们就可以对之前的正则表达式进行改造了，比如：</p><ul><li>匹配8位数字的QQ号码：<code>^\\d{8}$</code></li><li>匹配1开头11位数字的手机号码：<code>^1\\d{10}$</code></li><li>匹配银行卡号是14~18位的数字：<code>^\\d{14,18}$</code></li><li>匹配以a开头的，0个或多个b结尾的字符串:<code>^ab*$</code></li></ul><h3 id="三、分组" tabindex="-1"><a class="header-anchor" href="#三、分组"><span>三、分组</span></a></h3><p>限定符是作用在与他相邻的最左边的一个字符，那么问题来了，如果我想要ab同时被限定那怎么办呢？</p><p>正则表达式中用小括号()来做分组，也就是括号中的内容会作为一个整体。</p><p>如匹配字符串中包含0到多个ab开头：<code>^(ab)*</code></p><h3 id="四、转义" tabindex="-1"><a class="header-anchor" href="#四、转义"><span>四、转义</span></a></h3><p>正则提供了转义的方式，也就是要把这些元字符、限定符或者关键字转义成普通的字符，做法很简答，就是在要转义的字符前面加个斜杠，也就是\\即可。</p><p>匹配字符串中包含0到多个(ab)开头：<code>^(\\(ab\\))*</code></p><p>匹配一个字符*：<code>\\*</code></p><h3 id="五、条件" tabindex="-1"><a class="header-anchor" href="#五、条件"><span>五、条件</span></a></h3><p>回到我们刚才的手机号匹配，我们都知道：国内号码都来自三大运营商，它们都有属于自己的号段。</p><p>比如联通有130/131/132/155/156/185/186/145/176等号段，假如让我们匹配一个联通的号码，那按照我们目前所学到的正则，应该无从下手的，因为这里包含了一些并列的条件，也就是“或”，那么在正则中是如何表示“或”的呢？</p><p>正则用符号 | 来表示或，也叫做分支条件，当满足正则里的分支条件的任何一种条件时，都会当成是匹配成功。</p><p>那么我们就可以用或条件来处理这个问题：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">^(130|131|132|155|156|185|186|145|176)\\d{8}$</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="六、区间" tabindex="-1"><a class="header-anchor" href="#六、区间"><span>六、区间</span></a></h3><p>正则提供一个元字符中括号 [] 来表示区间条件。</p><ul><li>限定0到9 可以写成[0-9]</li><li>限定A-Z 写成[A-Z]</li><li>限定某些数字 [165]</li></ul><p>那上面的正则我们还改成这样：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">^((13[0-2])|(15[56])|(18[5-6])|145|176)\\d{8}$</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="七、反义" tabindex="-1"><a class="header-anchor" href="#七、反义"><span>七、反义</span></a></h3><p>前面说到元字符的都是要匹配什么什么，当然如果你想反着来，不想匹配某些字符，正则也提供了一些常用的反义元字符：</p><table><thead><tr><th>元字符</th><th>解释</th></tr></thead><tbody><tr><td>\\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><h3 id="八、常见的正则表达式" tabindex="-1"><a class="header-anchor" href="#八、常见的正则表达式"><span>八、常见的正则表达式</span></a></h3><ul><li><p>匹配中文字符的正则表达式：<code>[\\u4e00-\\u9fa5]</code></p><p>匹配形式：My name is it楠老师！</p></li><li><p>匹配Email地址的正则表达式：<code>^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$</code> 匹配形式： 51012324@qq.com 、ydlclass@163.com，ydl-class@126.com</p></li><li><p>匹配国内电话号码：<code>\\d{3}-\\d{8}|\\d{4}-\\d{7} </code>匹配形式：匹配形式如 0511-4405222 或 021-87888822</p></li><li><p>匹配腾讯QQ号：<code>[1-9][0-9]{4,} </code>匹配形式：510180222</p></li><li><p>匹配身份证：<code>(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$</code> 匹配形式：142228199108252125</p></li><li><p>匹配ip地址：<code>\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3} </code>匹配形式：127.0.0.1</p></li><li><p>匹配国内的手机号：<code>^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$</code></p><p>匹配形式：1388888888</p></li></ul><h2 id="第三章-java正则表达式" tabindex="-1"><a class="header-anchor" href="#第三章-java正则表达式"><span>第三章 java正则表达式</span></a></h2><p><strong>小知识：</strong></p><p>有些语言中，**** 表示：我就是一个普通的【反斜杠】，请不要给我任何特殊的意义。</p><p>在 Java 中，**** 表示：我不是一个普通的【反斜杠】，我必须对紧随其后的字符进行转义，如果想将我视为普通反斜杠，请转义我。</p><p>我们可以看以下的输出内容：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出为 \\</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\\\\\\\&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出为 \\\\</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>java中正则表达式的执行流程：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220805095117483.3b42ebe9.png" alt="image-20220805095117483"></p><h3 id="一、正则表达式实例" tabindex="-1"><a class="header-anchor" href="#一、正则表达式实例"><span>一、正则表达式实例</span></a></h3><p><code>java.util.regex</code> 包主要包括以下三个类：</p><ul><li><p><strong>Pattern 类：</strong></p><p>正则表达式的编译表示形式。若要使用正则表达式必须将其【编译到此类】的实例中。然后，可以使用生成的模式对象创建 Matcher 对象。</p></li><li><p><strong>Matcher 类：</strong></p><p>Matcher 对象是对输入字符串进行【解释和匹配】操作的引擎。与Pattern 类一样，Matcher 也没有公共构造方法。你需要调用 Pattern 对象的 matcher 方法来获得一个 Matcher 对象。</p></li><li><p><strong>PatternSyntaxException：</strong></p><p>PatternSyntaxException 是一个非强制异常类，它表示一个正则表达式模式中的语法错误。</p></li></ul><p>以下实例中使用了正则表达式 <strong>.*itnanls.*</strong> 用于查找字符串中是否包了 itnanls子串：</p><p><strong>实例</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">TestRegex</span><span class="token punctuation">{</span>   </span>
<span class="line">    </span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> testRegex<span class="token punctuation">{</span>      </span>
<span class="line">        <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;I am itnanls，I&#39;m from ydlclass.&quot;</span><span class="token punctuation">;</span>       </span>
<span class="line">        <span class="token class-name">String</span> pattern <span class="token operator">=</span> <span class="token string">&quot;.*itnanls.*&quot;</span><span class="token punctuation">;</span>       </span>
<span class="line"></span>
<span class="line">        <span class="token keyword">boolean</span> isMatch <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;字符串中是否包含了 &#39;itnanls&#39; 子字符串? &quot;</span> <span class="token operator">+</span> isMatch<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">    <span class="token punctuation">}</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRegex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;i am itnanls,i com from ydl.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;.*itlils.*&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实例输出结果为：<strong>字符串中是否包含了 &#39;itnanls&#39; 子字符串? true</strong></p><h3 id="二、matcher-类的方法" tabindex="-1"><a class="header-anchor" href="#二、matcher-类的方法"><span>二、Matcher 类的方法</span></a></h3><h4 id="_1、匹配方法" tabindex="-1"><a class="header-anchor" href="#_1、匹配方法"><span>1、匹配方法</span></a></h4><p>（1）该方法可以精确表明输入字符串中在哪能找到与之匹配的内容：</p><table><thead><tr><th style="text-align:left;"><strong>序号</strong></th><th style="text-align:left;">方法及</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">start()</td><td>返回匹配的起始索引</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">start(int group)</td><td>返回在匹配操作期间，由给定组所捕获的子序列的起始索引</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">end()</td><td>返回匹配字符末尾索引</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">end(int group)</td><td>返回在匹配操作期间，由给定组所捕获的子序列的末尾索引</td></tr></tbody></table><p>下面是一个对单词 &quot;cat&quot; 出现在输入字符串中出现次数进行计数的例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;cat&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> content <span class="token operator">=</span> <span class="token string">&quot;cat cat dog dog cat&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取 matcher 对象</span></span>
<span class="line">    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        count<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Match number &quot;</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;start(): &quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;end(): &quot;</span> <span class="token operator">+</span> m<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例编译运行结果如下（start返回cat的c的索引，end方法返回t的索引）：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Match</span> number <span class="token number">1</span></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line"><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">3</span></span>
<span class="line"><span class="token class-name">Match</span> number <span class="token number">2</span></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">4</span></span>
<span class="line"><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">7</span></span>
<span class="line"><span class="token class-name">Match</span> number <span class="token number">3</span></span>
<span class="line"><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">16</span></span>
<span class="line"><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token number">19</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、查找方法" tabindex="-1"><a class="header-anchor" href="#_2、查找方法"><span>2、查找方法</span></a></h4><p>查找方法用来检查输入字符串并返回一个布尔值，表示是否找到该模式：</p><table><thead><tr><th style="text-align:left;"><strong>序号</strong></th><th style="text-align:left;">方法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">lookingAt()</td><td>返回目标字符串前面部分与 Pattern 是否匹配</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">find()</td><td>返回目标字符串中是否包含与 Pattern 匹配的子串</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">find(int start）</td><td>从指定索引开始匹配查找。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">matches()</td><td>尝试将整个区域与模式匹配</td></tr></tbody></table><p>matches 和 lookingAt 方法都用来尝试匹配一个输入序列模式。它们的不同是 matches 要求整个序列都匹配，而lookingAt 不要求。</p><p>lookingAt 方法虽然不需要整句都匹配，但是需要从第一个字符开始匹配。</p><p>实例：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testMatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;itnanls&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> content1 <span class="token operator">=</span> <span class="token string">&quot;itnanls&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> content2 <span class="token operator">=</span> <span class="token string">&quot;itnanls is very handsome  !&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> content3 <span class="token operator">=</span> <span class="token string">&quot;My name is itnanls.&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher1 <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher2 <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher3 <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>content3<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;matches1(): &quot;</span> <span class="token operator">+</span> matcher1<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lookingAt1(): &quot;</span> <span class="token operator">+</span> matcher1<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;matches2(): &quot;</span> <span class="token operator">+</span> matcher2<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lookingAt2(): &quot;</span> <span class="token operator">+</span> matcher2<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;matches3(): &quot;</span> <span class="token operator">+</span> matcher3<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;lookingAt3(): &quot;</span> <span class="token operator">+</span> matcher3<span class="token punctuation">.</span><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例编译运行结果如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token function">lookingAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、替换方法" tabindex="-1"><a class="header-anchor" href="#_3、替换方法"><span>3、替换方法</span></a></h4><p>替换方法是替换输入字符串里文本的方法：</p><table><thead><tr><th style="text-align:left;"><strong>序号</strong></th><th style="text-align:left;">方法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">public String replaceAll(String replacement)</td><td>替换模式与给定替换字符串相匹配的输入序列的每个子序列。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">public String replaceFirst(String replacement)</td><td>替换模式与给定替换字符串匹配的输入序列的第一个子序列。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">public Matcher appendReplacement(StringBuffer sb, String replacement)</td><td>实现非末尾的添加和替换步骤。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">public StringBuffer appendTail(StringBuffer sb)</td><td>实现末尾的添加和替换步骤。</td></tr></tbody></table><p>下面的例子来解释replaceAll和replaceFirst：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReplace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;itnanls&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;My name is itnanls, itnanls is very handsome. &quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> replacement <span class="token operator">=</span> <span class="token string">&quot;itlils&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> result1 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> result2 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">replaceFirst</span><span class="token punctuation">(</span>replacement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例编译运行结果如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">My</span> name is itlils<span class="token punctuation">,</span> itlils is very <span class="token class-name"><span class="token namespace">handsome<span class="token punctuation">.</span></span> </span>
<span class="line">My</span> name is itlils<span class="token punctuation">,</span> itnanls is very handsome<span class="token punctuation">.</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>下面的例子来解释appendReplacement和appendTail：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">REGEX</span> <span class="token operator">=</span> <span class="token string">&quot;a*b&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">INPUT</span> <span class="token operator">=</span> <span class="token string">&quot;aabfooaabfooabfooabkkk&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> <span class="token constant">REPLACE</span> <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token constant">REGEX</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取 matcher 对象</span></span>
<span class="line">    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span><span class="token constant">INPUT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    m<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token constant">REPLACE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    m<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    m<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> <span class="token constant">REPLACE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    m<span class="token punctuation">.</span><span class="token function">appendTail</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上实例编译运行结果如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">-</span>
<span class="line">-foo-</span>
<span class="line">-foo-fooabfooabkkk</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAppend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;a*b&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;aabfooaabfooabfoobkkk&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> replacement <span class="token operator">=</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取 matcher 对象</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">StringBuffer</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        matcher<span class="token punctuation">.</span><span class="token function">appendReplacement</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> replacement<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    matcher<span class="token punctuation">.</span><span class="token function">appendTail</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、patternsyntaxexception-类的方法" tabindex="-1"><a class="header-anchor" href="#_4、patternsyntaxexception-类的方法"><span>4、PatternSyntaxException 类的方法</span></a></h4><p>PatternSyntaxException 是一个异常类，它指示一个正则表达式模式中的语法错误。</p><p>PatternSyntaxException 类提供了下面的方法来帮助我们查看发生了什么错误。</p><table><thead><tr><th style="text-align:left;"><strong>序号</strong></th><th style="text-align:left;">方法</th><th>说明</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">getDescription()</td><td>获取错误的描述。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">getIndex()</td><td>获取错误的索引。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">getPattern()</td><td>获取错误的正则表达式模式。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">getMessage()</td><td>返回多行字符串，包含语法错误及其索引的描述、错误的正则表达式模式和模式中错误索引的可视化指示。</td></tr></tbody></table><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">String REGEX = &quot;a*b[er&quot;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220805132012104.a40c18fd.png" alt="image-20220805132012104"></p><h2 id="第四章-正则表达式进阶语法" tabindex="-1"><a class="header-anchor" href="#第四章-正则表达式进阶语法"><span>第四章 正则表达式进阶语法</span></a></h2><h3 id="一、零宽断言" tabindex="-1"><a class="header-anchor" href="#一、零宽断言"><span>一、零宽断言</span></a></h3><p>【断言】就是说正则可以【断定】在指定内容的前面或后面会出现满足指定规则的内容。</p><p>【零宽】 断言部分只确定位置不匹配任何内容，只是一种模式。内容宽度为零。</p><p>我们来举个栗子：假设我们要用爬虫抓取csdn里的文章阅读量。通过查看源代码可以看到文章阅读量这个内容是这样的结构：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&quot;&lt;span class=&quot;read-count&quot;&gt;阅读数：641&lt;/span&gt;&quot;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中也就【641】这个是变量，也就是说不同文章不同的值，当我们拿到这个字符串时，需要获得这里边的【641】有很多种办法，但如果正则应该怎么匹配呢？下面先来讲几种类型的断言：</p><p>几个概念：</p><table><thead><tr><th>概念</th><th style="text-align:right;">功能</th></tr></thead><tbody><tr><td>预测/先行</td><td style="text-align:right;">（模式在前），要求后面的符合匹配</td></tr><tr><td>回顾/后发</td><td style="text-align:right;">（模式在后），要求前面的符合匹配</td></tr><tr><td>正</td><td style="text-align:right;">符合匹配</td></tr><tr><td>负</td><td style="text-align:right;">不符合匹配</td></tr></tbody></table><h4 id="_1、正向先行断言" tabindex="-1"><a class="header-anchor" href="#_1、正向先行断言"><span>1、正向先行断言</span></a></h4><p>零宽度正预测先行断言</p><ul><li>语法：（?=pattern）</li><li>作用：匹配pattern表达式的前面内容，不返回本身。</li></ul><p>【正向先行断言】可以匹配表达式前面的内容，那意思就是(?=) 就可以匹配到前面的内容了。</p><p>如果我们要匹配所有内容那就是：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssert1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;.+(?=&lt;/span&gt;)&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;&lt;span class=\\&quot;read-count\\&quot;&gt;阅读数：641&lt;/span&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//匹配结果：&lt;span class=&quot;read-count&quot;&gt;阅读数：641</span></span>
<span class="line"><span class="token comment">//可是我们要的只是前面的数字呀，那也简单咯，匹配数字 \\d,那可以改成：</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAssert2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d+(?=&lt;/span&gt;)&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;&lt;span class=\\&quot;read-count\\&quot;&gt;阅读数：641&lt;/span&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//匹配结果：</span></span>
<span class="line"><span class="token comment">//641</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、正向后行断言" tabindex="-1"><a class="header-anchor" href="#_2、正向后行断言"><span>2、正向后行断言</span></a></h4><p>零宽度正回顾后发断言，断言在前，模式在后</p><ul><li>语法：（?&lt;=pattern）</li><li>作用：匹配pattern表达式的后面的内容，不返回本身。</li></ul><p>有先行就有后行，先行是匹配前面的内容，那后行就是匹配后面的内容啦。</p><p>上面的例子，我们也可以用后行断言来处理：</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java" data-title="Java"><pre><code><span class="line">@Test</span>
<span class="line">public void testAssert3(){</span>
<span class="line">    String regex = &quot;(?&lt;=&lt;span class=\\&quot;read-count\\&quot;&gt;阅读数：)\\\\d+&quot;;</span>
<span class="line">    String context = &quot;&lt;span class=\\&quot;read-count\\&quot;&gt;阅读数：641&lt;/span&gt;&quot;;</span>
<span class="line">    Pattern pattern = Pattern.compile(regex);</span>
<span class="line">    Matcher matcher = pattern.matcher(context);</span>
<span class="line">    while (matcher.find()){</span>
<span class="line">        System.out.println(matcher.group());</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、负向先行断言" tabindex="-1"><a class="header-anchor" href="#_3、负向先行断言"><span>3、负向先行断言</span></a></h4><p>零宽度负预测先行断言</p><ul><li>语法：(?!pattern)</li><li>作用：匹配非pattern表达式的前面内容，不返回本身。</li></ul><p>有正向也有负向，负向在这里其实就是非的意思。</p><p>举个栗子：比如有一句 “我爱祖国，我是祖国的花朵”。现在要找到不是&#39;的花朵&#39;前面的祖国。</p><p>用正则就可以这样写：祖国(?!的花朵)</p><h4 id="_4、负向后行断言" tabindex="-1"><a class="header-anchor" href="#_4、负向后行断言"><span>4、负向后行断言</span></a></h4><p>零宽度负回顾后发断言</p><ul><li>语法：(?&lt;!pattern)</li><li>作用：匹配非pattern表达式的后面内容，不返回本身。</li></ul><p>举个例子：比如有一句 “我爱祖国，我是祖国的花朵”。现在要找到不是&#39;我爱&#39;后面的祖国。</p><p>用正则就可以这样写：(?&lt;!我爱)祖国</p><h3 id="二、捕获和非捕获" tabindex="-1"><a class="header-anchor" href="#二、捕获和非捕获"><span>二、捕获和非捕获</span></a></h3><p>**捕获组：**我们匹配子表达式的内容，并把匹配结果【以数字编号或组名的方式】保存到内存中，之后可以通过序号或名称来使用这些匹配结果。</p><p>而根据命名方式的不同，又可以分为两种组：</p><h4 id="_1、数字编号捕获组" tabindex="-1"><a class="header-anchor" href="#_1、数字编号捕获组"><span>1、数字编号捕获组：</span></a></h4><p>语法：(exp)</p><p>解释：从表达式左侧开始，每出现一个左括号和它对应的右括号之间的内容为一个分组，在分组中，第0组为整个表达式，第一组开始为分组。</p><ul><li>比如固定电话的：020-85653333</li><li>正则表达式为：(0\\d{2})-(\\d{8})</li></ul><p>按照左括号的顺序，这个表达式有如下分组：</p><table><thead><tr><th>序号</th><th>编号</th><th>分组</th><th>内容</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>(0\\d{2})-(\\d{8})</td><td>020-85653333</td></tr><tr><td>1</td><td>1</td><td>(0\\d{2})</td><td>020</td></tr><tr><td>2</td><td>0</td><td>(\\d{8})</td><td>85653333</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> test <span class="token operator">=</span> <span class="token string">&quot;020-85653333&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> reg<span class="token operator">=</span><span class="token string">&quot;(0\\\\d{2})-(\\\\d{8})&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Matcher</span> mc<span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分组的个数有：&quot;</span><span class="token operator">+</span>mc<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mc<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;个分组为：&quot;</span><span class="token operator">+</span>mc<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">分组的个数有：<span class="token number">2</span></span>
<span class="line">第<span class="token number">0</span>个分组为：<span class="token number">020</span><span class="token operator">-</span><span class="token number">85653333</span></span>
<span class="line">第<span class="token number">1</span>个分组为：<span class="token number">020</span></span>
<span class="line">第<span class="token number">2</span>个分组为：<span class="token number">85653333</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可见，分组个数是2，但是因为第0个为整个表达式本身，因此也一起输出了。</p><h4 id="_2、命名编号捕获组" tabindex="-1"><a class="header-anchor" href="#_2、命名编号捕获组"><span>2、命名编号捕获组：</span></a></h4><p>语法：(?exp)</p><p>解释：分组的命名由表达式中的name指定，比如区号也可以这样写:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">(?&lt;quhao&gt;0\\\\d{2})-(?&lt;haoma&gt;\\\\d{8})</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>按照左括号的顺序，这个表达式有如下分组：</p><table><thead><tr><th>序号</th><th>名称</th><th>分组</th><th>内容</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>(0\\d{2})-(\\d{8})</td><td>020-85653333</td></tr><tr><td>1</td><td>quhao</td><td>(0\\d{2})</td><td>020</td></tr><tr><td>2</td><td>haoma</td><td>(\\d{8})</td><td>85653333</td></tr></tbody></table><p>用代码来验证一下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> test <span class="token operator">=</span> <span class="token string">&quot;020-85653333&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> reg<span class="token operator">=</span><span class="token string">&quot;(?&lt;quhao&gt;0\\\\d{2})-(?&lt;haoma&gt;\\\\d{8})&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Matcher</span> mc<span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分组的个数有：&quot;</span><span class="token operator">+</span>mc<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;quhao&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token string">&quot;haoma&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">分组的个数有：<span class="token number">2</span></span>
<span class="line">分组名称为<span class="token operator">:</span>quhao<span class="token punctuation">,</span>匹配内容为：<span class="token number">020</span></span>
<span class="line">分组名称为<span class="token operator">:</span>haoma<span class="token punctuation">,</span>匹配内容为：<span class="token number">85653333</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、非捕获组" tabindex="-1"><a class="header-anchor" href="#_3、非捕获组"><span>3、非捕获组：</span></a></h4><ul><li>语法：(?:exp)</li><li>解释：和捕获组刚好相反，它用来标识那些不需要捕获的分组。</li></ul><p>比如上面的正则表达式，程序不需要用到第一个分组，那就可以这样写：<code>(?:0\\\\d{2})-(\\\\d{8})</code></p><table><thead><tr><th>序号</th><th>名称</th><th>分组</th><th>内容</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>(0\\d{2})-(\\d{8})</td><td>020-85653333</td></tr><tr><td>1</td><td>1</td><td>(\\d{8})</td><td>85653333</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> test <span class="token operator">=</span> <span class="token string">&quot;020-85653333&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">String</span> reg<span class="token operator">=</span><span class="token string">&quot;(?:0\\\\d{2})-(\\\\d{8})&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Matcher</span> mc<span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>mc<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;分组的个数有：&quot;</span><span class="token operator">+</span>mc<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>mc<span class="token punctuation">.</span><span class="token function">groupCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;第&quot;</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">&quot;个分组为：&quot;</span><span class="token operator">+</span>mc<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">分组的个数有：<span class="token number">1</span></span>
<span class="line">第<span class="token number">0</span>个分组为：<span class="token number">020</span><span class="token operator">-</span><span class="token number">85653333</span></span>
<span class="line">第<span class="token number">1</span>个分组为：<span class="token number">85653333</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、反向引用" tabindex="-1"><a class="header-anchor" href="#三、反向引用"><span>三、反向引用</span></a></h3><p>我们知道：捕获会返回一个捕获组，这个分组是保存在内存中，不仅可以在正则表达式外部通过程序进行引用，也可以【在正则表达式内部进行引用】，这种引用方式就是【反向引用】。</p><p>根据捕获组的命名规则，反向引用可分为：</p><ul><li>普通捕获组反向引用：<code>\\k&lt;number&gt;</code>，通常简写为\\number</li><li>命名捕获组反向引用：<code>\\k&lt;name&gt;</code>，或者\\k&#39;name&#39;</li></ul><p>我们可以举一个例子：</p><p>比如要查找一串字母&quot;aabbbbgbddesddfiid&quot;里成对的字母，如果按照我们之前学到的正则，什么区间啊限定啊断言啊可能是办不到的。</p><p>现在我们先用程序思维理一下思路：</p><p>1）匹配到一个字母</p><p>2）匹配第下一个字母，检查是否和上一个字母是否一样</p><p>3）如果一样，则匹配成功，否则失败</p><p>这里的思路中，在匹配下一个字母时，需要用到上一个字母进行比较，但是目前的知识实在办不到。</p><p>这下子捕获就有用处啦，我们可以利用捕获把上一个匹配成功的内容用来作为本次匹配的条件即可。</p><ol><li>首先匹配一个字母：\\w。我们需要做成分组才能捕获，因此写成这样：(\\w)</li><li>那这个表达式就有一个捕获组：（\\w）</li><li>然后我们要用这个捕获组作为条件，那就可以：<code>(\\w)\\1</code></li></ol><p>这里的<code>\\1</code>是什么意思呢？根据反向引用的数字命名规则,就需要<code> \\k&lt;1&gt;</code>或者<code>\\1</code>，当然，通常都是是后者。</p><p>我们来测试一下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;aabbxxccdddsksdhfhshh&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;(\\\\w)\\\\1&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">aa</span>
<span class="line">bb</span>
<span class="line">xx</span>
<span class="line">cc</span>
<span class="line">dd</span>
<span class="line">hh</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>嗯，这就是我们想要的了。 再举个替换的例子，假如想要把字符串中abc换成a</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReplaceAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span> <span class="token string">&quot;abc aabc bc xxx mm&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;(a*)(b)(c)&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> res <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>regex<span class="token punctuation">,</span> <span class="token string">&quot;$1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">a aa  xxx mm</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、贪婪和非贪婪" tabindex="-1"><a class="header-anchor" href="#四、贪婪和非贪婪"><span>四、贪婪和非贪婪</span></a></h3><h4 id="_1、贪婪匹配" tabindex="-1"><a class="header-anchor" href="#_1、贪婪匹配"><span>1、贪婪匹配</span></a></h4><p>**贪婪匹配：**当正则表达式中包含能接受重复的限定符时，该方式会匹配尽可能多的字符，这匹配方式叫做贪婪匹配。</p><p>前面我们讲过重复限定符，其实这些限定符就是贪婪量词，比如表达式：<code>\\d{3,6}</code>。</p><p>用来匹配3到6位数字，在这种情况下，它是一种贪婪模式的匹配，也就是假如字符串里有6个数字可以匹配，那它就是全部匹配到。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGreed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d{3,6}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span><span class="token string">&quot;61762828 176 2991 871&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文本：&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;贪婪模式：&quot;</span><span class="token operator">+</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配结果：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">文本：<span class="token number">61762828</span> <span class="token number">176</span> <span class="token number">2991</span> <span class="token number">44</span> <span class="token number">871</span></span>
<span class="line">贪婪模式：\\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span></span>
<span class="line">匹配结果：<span class="token number">617628</span></span>
<span class="line">匹配结果：<span class="token number">176</span></span>
<span class="line">匹配结果：<span class="token number">2991</span></span>
<span class="line">匹配结果：<span class="token number">871</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由结果可见：本来字符串中的“61762828”这一段，其实只需要出现3个（617）就已经匹配成功了的，但是他并不满足，而是匹配到了最大能匹配的字符，也就是6个。</p><p>多个贪婪量词在一起时，如果字符串能满足他们各自最大程度的匹配时，就互不干扰，但如果不能满足时，会优先满足最大数量的匹配，剩余再分配下一个量词匹配。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGreed2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;\\\\d{1,2}\\\\d{3,5}&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> context <span class="token operator">=</span><span class="token string">&quot;61762828 176 2991 871&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文本：&quot;</span> <span class="token operator">+</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;贪婪模式：&quot;</span><span class="token operator">+</span> regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配结果：&quot;</span> <span class="token operator">+</span> matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">文本：<span class="token number">61762828</span> <span class="token number">176</span> <span class="token number">2991</span> <span class="token number">871</span></span>
<span class="line">贪婪模式：\\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span>\\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span></span>
<span class="line">匹配结果：<span class="token number">6176282</span></span>
<span class="line">匹配结果：<span class="token number">2991</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、懒惰匹配" tabindex="-1"><a class="header-anchor" href="#_2、懒惰匹配"><span>2、懒惰匹配</span></a></h4><p>懒惰匹配：当正则表达式中包含能接受重复的限定符时，会匹配尽可能少的字符，这匹配方式叫做懒惰匹配。</p><p>懒惰量词是在贪婪量词后面加个“？”</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testNotGreed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> reg<span class="token operator">=</span><span class="token string">&quot;(\\\\d{1,2}?)(\\\\d{3,4})&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> test<span class="token operator">=</span><span class="token string">&quot;61762828 176 2991 87321&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;文本：&quot;</span><span class="token operator">+</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;贪婪模式：&quot;</span><span class="token operator">+</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> p1 <span class="token operator">=</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> m1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>m1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匹配结果：&quot;</span><span class="token operator">+</span>m1<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">输出结果：</span>
<span class="line"></span>
<span class="line">文本：<span class="token number">61762828</span> <span class="token number">176</span> <span class="token number">2991</span> <span class="token number">87321</span></span>
<span class="line">懒惰匹配：<span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token punctuation">(</span>\\d<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">匹配结果：<span class="token number">61762</span></span>
<span class="line">匹配结果：<span class="token number">2991</span></span>
<span class="line">匹配结果：<span class="token number">87321</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>“61762” 是左边的懒惰匹配出6，右边的贪婪匹配出1762。</li><li>&quot;2991&quot; 是左边的懒惰匹配出2，右边的贪婪匹配出991。</li><li>&quot;87321&quot; 左边的懒惰匹配出8，右边的贪婪匹配出7321。</li></ul><h2 id="第五章-作业" tabindex="-1"><a class="header-anchor" href="#第五章-作业"><span>第五章 作业</span></a></h2><p>1、通过scanner输入一个字符串，判断是否是一个邮箱？</p><p>2、将一个文件中的邮箱全部查找出来？</p><p>3、将一个文件中的电话的中间四个数字替换成xxxx? 例子 15236985456 --&gt; 152xxxx5456</p><p>文本如下</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">姓名      年龄      邮箱                   电话</span>
<span class="line">张小强    23    526845845@163.com     13759685424</span>
<span class="line">丁新新    20    238011792@qq.com      18011023709</span>
<span class="line">李银龙    20    liyinl1199w@163.com   17308811441</span>
<span class="line">赵资本    19    anhuo69579@126.com    18234417225</span>
<span class="line">李成刚    21    19713318@qq.com       13279906620</span>
<span class="line">王铁柱    20    ykl3987671@163.com    18802836971</span>
<span class="line">张龙虎    22    zh199715@gmail.com    13888906654</span>
<span class="line">李洁一    18    nl897665@yahoo.com    19762297581</span>
<span class="line">刘大志    20    197685551@qq.com      15299744196</span>
<span class="line">杨天天    19    86765ytian@126.com    17663999002</span>
<span class="line">陈承成    21    rr796232@hotmail.com  18137541864</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一题：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestEmail</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> email <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;^[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+$&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">boolean</span> matches <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>matches<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的是一个邮箱！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;您输入的不是邮箱！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二题：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">findEmail</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 1、将文件的内容读取到内存</span></span>
<span class="line">    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\user.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2、进行正则匹配</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;[a-zA-Z0-9_-]+@[a-zA-Z0-9_-]+(\\\\.[a-zA-Z0-9_-]+)+&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三题：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hidePhoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 1、将文件的内容读取到内存</span></span>
<span class="line">    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\user.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 2、进行正则匹配</span></span>
<span class="line">    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">&quot;(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])(\\\\d{4})(\\\\d{4})&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Pattern</span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> pattern<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">String</span> result <span class="token operator">=</span> matcher<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;$1xxxx$3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"> <span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hidePhoneNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 1、将文件的内容读取到内存</span></span>
<span class="line">    <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:\\\\user.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">&quot;(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])(\\\\d{4})(\\\\d{4})&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;$1xxxx$3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,198),l=[e];function c(o,i){return a(),s("div",null,l)}const r=n(p,[["render",c],["__file","format.html.vue"]]),d=JSON.parse('{"path":"/JavaSE2/format.html","title":"Java 正则表达式","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"第一章 概述","slug":"第一章-概述","link":"#第一章-概述","children":[]},{"level":2,"title":"第二章 正则表达式基础语法","slug":"第二章-正则表达式基础语法","link":"#第二章-正则表达式基础语法","children":[{"level":3,"title":"一、元字符","slug":"一、元字符","link":"#一、元字符","children":[]},{"level":3,"title":"二、重复限定符","slug":"二、重复限定符","link":"#二、重复限定符","children":[]},{"level":3,"title":"三、分组","slug":"三、分组","link":"#三、分组","children":[]},{"level":3,"title":"四、转义","slug":"四、转义","link":"#四、转义","children":[]},{"level":3,"title":"五、条件","slug":"五、条件","link":"#五、条件","children":[]},{"level":3,"title":"六、区间","slug":"六、区间","link":"#六、区间","children":[]},{"level":3,"title":"七、反义","slug":"七、反义","link":"#七、反义","children":[]},{"level":3,"title":"八、常见的正则表达式","slug":"八、常见的正则表达式","link":"#八、常见的正则表达式","children":[]}]},{"level":2,"title":"第三章 java正则表达式","slug":"第三章-java正则表达式","link":"#第三章-java正则表达式","children":[{"level":3,"title":"一、正则表达式实例","slug":"一、正则表达式实例","link":"#一、正则表达式实例","children":[]},{"level":3,"title":"二、Matcher 类的方法","slug":"二、matcher-类的方法","link":"#二、matcher-类的方法","children":[]}]},{"level":2,"title":"第四章 正则表达式进阶语法","slug":"第四章-正则表达式进阶语法","link":"#第四章-正则表达式进阶语法","children":[{"level":3,"title":"一、零宽断言","slug":"一、零宽断言","link":"#一、零宽断言","children":[]},{"level":3,"title":"二、捕获和非捕获","slug":"二、捕获和非捕获","link":"#二、捕获和非捕获","children":[]},{"level":3,"title":"三、反向引用","slug":"三、反向引用","link":"#三、反向引用","children":[]},{"level":3,"title":"四、贪婪和非贪婪","slug":"四、贪婪和非贪婪","link":"#四、贪婪和非贪婪","children":[]}]},{"level":2,"title":"第五章 作业","slug":"第五章-作业","link":"#第五章-作业","children":[]}],"git":{"updatedTime":1723726527000,"contributors":[{"name":"zqb","email":"2506956864@qq.com","commits":1}]},"filePathRelative":"JavaSE2/format.md","excerpt":"\\n<p>我们可能有如下的需求：</p>\\n<ul>\\n<li>从一个文章里找到所有的邮箱；</li>\\n<li>看看输入的手机号是不是符合手机号的规则；</li>\\n<li>检查输入的是不是身份证号。</li>\\n</ul>\\n<p>对于这种需要，都要求对字符串进行特定【模式或规则】的匹配。本章学习的正则表达式可以帮助我们实现这样的功能。</p>\\n<h2>第一章 概述</h2>\\n<p><strong>正则表达式</strong>，又称规则表达式**,**（Regular Expression，在代码中常简写为regex、regexp或RE），是一种【文本模式(Pattern)】。</p>\\n<p>正则表达式使用单个字符串来描述、匹配具有相同规则的字符串，通常被用来检索、替换那些符合某个模式（规则）的文本。正则表达式的核心功能就是处理文本。</p>"}');export{r as comp,d as data};
