import{_ as s,c as n,o as a,a as p}from"./app-CiSBoDQ3.js";const e={},t=p(`<h1 id="mysql入门" tabindex="-1"><a class="header-anchor" href="#mysql入门"><span>MySql入门</span></a></h1><h2 id="第一章-mysql数据库" tabindex="-1"><a class="header-anchor" href="#第一章-mysql数据库"><span>第一章 Mysql数据库</span></a></h2><h3 id="_1、数据库的概念" tabindex="-1"><a class="header-anchor" href="#_1、数据库的概念"><span>1、数据库的概念</span></a></h3><ul><li>数据库是【按照数据结构来组织、存储和管理数据的仓库】。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</li><li>数据对于公司来说是最宝贵的财富之一，而程序员的工作就是对数据的管理，包括运算、流转、存储、展示等，数据库的最重要的功能就是【存储数据】，绝大部分的数据需要进行持久化，长期保存，而数据库就可以很好的帮助我们完成这个工作</li></ul><h3 id="_2、mysql的概念" tabindex="-1"><a class="header-anchor" href="#_2、mysql的概念"><span>2、mysql的概念</span></a></h3><ul><li>MySQL是一个【关系型数据库管理系统】，由瑞典【MySQL AB】公司开发，属于 【Oracle】旗下产品。MySQL 是最流行的【关系型数据库管理系统】之一，在 【WEB】应用方面，MySQL是最好的 【RDBMS】 (Relational Database Management System，关系数据库管理系统) 应用软件之一。</li><li>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li><li>MySQL所使用的 【SQL 语言是】用于访问【数据库】的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是【开放源码】这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</li></ul><h3 id="_3、安装mysql" tabindex="-1"><a class="header-anchor" href="#_3、安装mysql"><span>3、安装mysql</span></a></h3><p>下载后我们可以自定义安装也可以选择第一个developer：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220421193852670.647a430b.png" alt="image-20220419111843961"></p><p>选择安装server和两个客户端进行体验：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220421193949698.6e202212.png" alt="image-20220419111843961"></p><p>自己可以体验一下workbench和mysqlsh。工作中基本不用</p><p>安装完后，在cmd下输入：mysql -u root -p进入数据库</p><h3 id="_4、安装navicat" tabindex="-1"><a class="header-anchor" href="#_4、安装navicat"><span>4、安装navicat</span></a></h3><p>需要破解...</p><h2 id="第二章、sql" tabindex="-1"><a class="header-anchor" href="#第二章、sql"><span>第二章、SQL</span></a></h2><h3 id="_1、sql分类" tabindex="-1"><a class="header-anchor" href="#_1、sql分类"><span>1、sql分类</span></a></h3><ul><li>DCL(Data Control Language)：数据控制语言，用来定义访问权限和安全级别。</li><li>DDL(Data Definition Language)：数据定义语言，用来定义数据库对象：库、表、列等。功能：创建、删除、修改库和表结构。</li><li>DML(Data Manipulation Language)：数据操作语言，用来定义数据库记录：增、删、改表记录。</li><li>DQL(Data Query Language)：数据查询语言，用来查询记录。也是本章学习的重点。</li></ul><h3 id="_2、dcl图形化界面以及命令" tabindex="-1"><a class="header-anchor" href="#_2、dcl图形化界面以及命令"><span>2、DCL图形化界面以及命令</span></a></h3><p>该语言用来定义【访问权限和安全级别】，理解即可，直接使用命令控制权限的场景不多，更多情况是使用图形化界面进行操作。</p><p>mysql中的权限无非是针对不同的用户而言，不同的用户的权限体现在以下几点：可否链接mysql服务 、可否访问数据库 、可否访问某张数据库表 、可否对表进行一些操作等。</p><p>主机的位置可以写ip地址，如果想要特定的地址也可以接入mysql，那就把主机改成对应的ip地址。虚拟机中使用mysql就改成虚拟机的ip地址，云服务器想用mysql就改成云服务器的ip地址。有别的人想要接入mysql，可以把他的ip地址写到主机中。如果想要让所有ip都接入mysql，要在主机处写&quot;<strong>%</strong>&quot;</p><p>mysql的连接机制：mysql先确认有没有这个用户名，然后确认ip地址是否正确，最后确认密码是否正确。也就是说，如果在mysql中没有指定你的ip，你即使知道用户名和密码也无法连接mysql。</p><p>像这种Navicat这种属于客户端软件，通过客户端去给服务器端发送数据，来实现不需要直接操纵服务器，也可以去操纵我们的数据库。客户端图形化界面本质上是创建了一条sql语句，来把我们的操作请求发送给mysql</p><hr><p><strong>只有root用户才能修改别的用户的权限，root用户一般为项目经理</strong></p><p><strong>可以通过图形化界面操作，也可以输入命令</strong></p><h4 id="创建用户" tabindex="-1"><a class="header-anchor" href="#创建用户"><span>创建用户</span></a></h4><p>创建一个用户，该用户只能在指定ip地址上登录mysql：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">user</span> 用户名<span class="token variable">@IP</span>地址 identified <span class="token keyword">by</span> ‘密码’<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>创建一个用户，该用户可以在任意ip地址上登录mysql:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">user</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span> identified <span class="token keyword">by</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改密码：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 5.7版本需要使用password函数对密码进行加密</span></span>
<span class="line"><span class="token keyword">set</span> password <span class="token keyword">for</span> zn<span class="token variable">@&#39;%&#39;</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">&#39;newpwd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 8.0直接赋值新的密码即可</span></span>
<span class="line"><span class="token keyword">set</span> password <span class="token keyword">for</span> zn<span class="token variable">@&#39;%&#39;</span> <span class="token operator">=</span> <span class="token string">&#39;newpwd&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果直接修改表，也是可以创建用户修改密码的，【mysql数据库下的user表】但是通过修改数据库创建用户，修改密码，都需要刷新权限：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- mysql的权限都保存在内存中，但是表数据保存在磁盘上。因为权限数据也都记录在表中，所以需要进行刷新，把权限数据刷新到内存中</span></span>
<span class="line">flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="给用户授权" tabindex="-1"><a class="header-anchor" href="#给用户授权"><span>给用户授权</span></a></h4><p>给【指定用户】在【指定数据库】上赋予【指定权限】</p><p>权限有很多，列举几个常用的：</p><ul><li>create：可以常见数据库</li><li>select：可以查询数据</li><li>delete：可以删除数据</li><li>update：可以更新数据</li><li>insert：可以插入数据</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 语法：\`grant 权限1，…，权限n on 数据库.* to 用户名@IP地址;</span></span>
<span class="line"><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">to</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">grant</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span><span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">on</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">to</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><hr><h4 id="撤销用户权限" tabindex="-1"><a class="header-anchor" href="#撤销用户权限"><span>撤销用户权限</span></a></h4><p>撤销【指定用户】在【指定数据库】上的【指定权限】：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 语法：revoke 权限1，…，权限n on 数据库.表名 from 用户名@ ip地址;</span></span>
<span class="line"><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">revoke</span> <span class="token keyword">select</span><span class="token punctuation">,</span><span class="token keyword">insert</span><span class="token punctuation">,</span><span class="token keyword">update</span><span class="token punctuation">,</span><span class="token keyword">delete</span><span class="token punctuation">,</span><span class="token keyword">create</span> <span class="token keyword">on</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>user<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 给该数据库下所有的表撤销所有的权限</span></span>
<span class="line"><span class="token keyword">revoke</span> <span class="token keyword">all</span> <span class="token keyword">on</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="查看指定用户权限" tabindex="-1"><a class="header-anchor" href="#查看指定用户权限"><span>查看指定用户权限</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 语法：show grants for 用户名@ip地址;</span></span>
<span class="line"><span class="token keyword">show</span> grants <span class="token keyword">for</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="删除用户" tabindex="-1"><a class="header-anchor" href="#删除用户"><span>删除用户</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 语法：drop user 用户名@ip地址;</span></span>
<span class="line"><span class="token keyword">drop</span> <span class="token keyword">user</span> <span class="token string">&#39;ydl&#39;</span><span class="token variable">@&#39;%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、ddl-数据定义语言-语法" tabindex="-1"><a class="header-anchor" href="#_3、ddl-数据定义语言-语法"><span>3、DDL(数据定义语言)语法</span></a></h3><p>DDL主要是用在定义或改变表（TABLE）的结构，主要的命令有CREATE、ALTER、DROP等：</p><h4 id="_1、创建表的基本语法" tabindex="-1"><a class="header-anchor" href="#_1、创建表的基本语法"><span>1、创建表的基本语法</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> 表名 <span class="token punctuation">(</span></span>
<span class="line"></span>
<span class="line">字段名<span class="token number">1</span>（列名） 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">字段名<span class="token number">2</span> 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line">字段名<span class="token number">3</span> 类型<span class="token punctuation">(</span>宽度<span class="token punctuation">)</span> 约束条件<span class="token punctuation">,</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在关系型数据库中，我们需要设定表名和列名，同时需要指定</p><h4 id="_2、常用的数据类型" tabindex="-1"><a class="header-anchor" href="#_2、常用的数据类型"><span>2、常用的数据类型</span></a></h4><blockquote><p>整型</p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义（有符号）</th></tr></thead><tbody><tr><td>tinyint</td><td>1字节，范围（-128~127）</td></tr><tr><td>smallint</td><td>2字节，范围（-32768~32767）</td></tr><tr><td>mediumint</td><td>3字节，范围（-8388608~8388607）</td></tr><tr><td>int</td><td>4字节，范围（-2147483648~2147483647）</td></tr><tr><td>bigint</td><td>8字节，范围（+-9.22*10的18次方）</td></tr></tbody></table><p>在整形中我们默认使用的都是【有符号】的，当然了，我们也可以加上unsigned关键字，定义成无符号的类型，那么对应的取值范围就会发生改变：</p><p>比如：tinyint unsigned的取值范围为0~255，</p><p>宽度n的作用需要配合zerofill进行使用： 如：int(4) UNSIGNED zerofill 查询结果: 0001 0002 1000</p><blockquote><p>浮点型</p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>float(m, d)</td><td>4字节，单精度浮点型，m总长度，d小数位</td></tr><tr><td>double(m, d)</td><td>8字节，双精度浮点型，m总长度，d小数位</td></tr><tr><td>decimal(m, d)</td><td>decimal是存储为字符串的浮点数，对应我们java的Bigdecimal</td></tr></tbody></table><p>我们使用一个例子来判断小括号内参数的含义，针对数据类型为float(5, 3)的列，做了以下试验：</p><ul><li>插入123.45678，最后查询得到的结果为99.999；</li><li>插入12.34567，最后查询结果为12.346；</li></ul><p>所以，在使用浮点型的时候，还是要注意陷阱的，要以插入数据库中的实际结果为准。</p><blockquote><p>字符串数据类型</p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>char(n)</td><td>固定长度，最多255个字符</td></tr><tr><td>varchar(n)</td><td>可变长度，最大容量65535个字节</td></tr><tr><td>tinytext</td><td>可变长度，最大容量255个字节</td></tr><tr><td>text</td><td>可变长度，最大容量65535个字节</td></tr><tr><td>mediumtext</td><td>可变长度，最大容量2的24次方-1个字节 16MB</td></tr><tr><td>longtext</td><td>可变长度，最大容量2的32次方-1个字节 4GB</td></tr></tbody></table><p><strong>（1）char和varchar的区别：</strong></p><ul><li>char类型是【定长】的类型，即当定义的是char(10)，输入的是&quot;abc&quot;这三个字符时，它们占的空间一样是10个字符，包括7个空字节。当输入的字符长度超过指定的数时，char会截取超出的字符。而且，当存储char值时，MySQL是自动删除输入字符串末尾的空格。</li><li>char是适合存储很短的、一般固定长度的字符串。例如，char非常适合存储密码的MD5值，因为这是一个定长的值。对于非常短的列，char比varchar在存储空间上也更有效率。</li><li>varchar(n)类型用于存储【可变长】的，长度最大为n个字符的可变长度字符数据。比如varchar(10), 然后输入abc三个字符，那么实际存储大小为3个字节。除此之外，varchar还需要使用1或2个额外字节记录字符串的长度，如果列的最大长度小于等于255字节（是定义的最长长度，不是实际长度），则使用1个字节表示长度，否则使用2个字节来表示。n表示的是最大的</li><li>char类型每次修改的数据长度相同，效率更高，varchar类型每次修改的数据长度不同，效率更低。</li></ul><p><strong>（2）varchar和text</strong></p><ul><li>text不能设置默认值，varchar可以，这个我们在后边再看。</li><li>text类型，包括（MEDIUMTEXT，LONGTEXT）也受单表 65535 最大行宽度限制，所以他支持溢出存储，只会存放前 768 字节在数据页中，而剩余的数据则会存储在溢出段中。虽然 text 字段会把超过 768 字节的大部分数据溢出存放到硬盘其他空间，看上去是会更加增加磁盘压力。但从处理形态上来讲 varchar 大于 768 字节后，实质上存储和 text 差别不是太大了。因为超长的 varchar 也是会用到溢出存储，读取该行也是要去读硬盘然后加载到内存，基本认为是一样的。</li><li>根据存储的实现：可以考虑用 varchar 替代 text，因为 varchar 存储更弹性，存储数据少的话性能更高。</li><li>如果存储的数据大于64K，就必须使用到 mediumtext，longtext，因为 varchar 已经存不下了。</li><li>如果 varchar(255+) 之后，和 text 在存储机制是一样的，性能也相差无几。</li></ul><blockquote><p>日期和时间数据类型</p></blockquote><table><thead><tr><th>MySQL数据类型</th><th>含义</th></tr></thead><tbody><tr><td>date</td><td>3字节，日期，格式：2014-09-18</td></tr><tr><td>time</td><td>3字节，时间，格式：08:42:30</td></tr><tr><td>datetime</td><td>8字节，日期时间，格式：2014-09-18 08:42:30</td></tr><tr><td>timestamp</td><td>4字节，自动存储记录修改的时间</td></tr><tr><td>year</td><td>1字节，年份</td></tr></tbody></table><h4 id="_3、建表约束" tabindex="-1"><a class="header-anchor" href="#_3、建表约束"><span>3、建表约束</span></a></h4><p>（Create Table Constraints）</p><p>目前我们已经学会了如何创建表，但是，一张表不止有一列，数据库中的表不止有一个，建表约束说的就是，我们应该如何规范表中的数据以及表和表的关系。</p><h5 id="_1-mysql约束类型" tabindex="-1"><a class="header-anchor" href="#_1-mysql约束类型"><span>（1）MySQL约束类型</span></a></h5><table><thead><tr><th>约束名称</th><th>描述</th></tr></thead><tbody><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一约束，取值不允许重复,</td></tr><tr><td>PRIMARY KEY</td><td>主键约束（主关键字），自带非空、唯一、索引</td></tr><tr><td>DEFAULT</td><td>默认值（缺省值）</td></tr><tr><td>FOREIGN KEY</td><td>外键约束（外关键字）</td></tr></tbody></table><h5 id="_2-not-null约束" tabindex="-1"><a class="header-anchor" href="#_2-not-null约束"><span>（2）[NOT] NULL约束</span></a></h5><p>非空约束指的是，如果我们要在这张表中添加数据，设定了非空约束的列必须赋值，不能为空：</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre><code><span class="line">create table \`ydlclass\`.\`author\`(</span>
<span class="line">	\`aut_id\` int ,</span>
<span class="line">	\`aut_name\` varchar(50) not null,     # 这就是非空约束</span>
<span class="line">	\`gander\` char(1) default &#39;男&#39;,</span>
<span class="line">	\`country\` varchar(50),</span>
<span class="line">	\`brithday\` datetime</span>
<span class="line">	primary key(aut_id,aut_name)</span>
<span class="line">);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-unique约束" tabindex="-1"><a class="header-anchor" href="#_3-unique约束"><span>（3）UNIQUE约束</span></a></h5><p>唯一约束指的是，如果我们要在这张表中添加数据，设定了唯一约束的列中的值不能重复，不能为空：</p><p>实现方法1（表的定义最后施加）</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建图书表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>book<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>bar_code<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> </span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">unique</span><span class="token punctuation">(</span>bar_code<span class="token punctuation">)</span>   <span class="token comment">-- 这就是唯一约束的定义</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现方法2（字段定义的最后施加）</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token operator">--</span> 创建图书表</span>
<span class="line">create table \`ydlclass\`<span class="token punctuation">.</span>\`book\`<span class="token punctuation">(</span></span>
<span class="line">	\`id\` <span class="token keyword">int</span> primary key auto_increment<span class="token punctuation">,</span></span>
<span class="line">	\`name\` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> null<span class="token punctuation">,</span></span>
<span class="line">	\`bar_code\` <span class="token function">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> null unique<span class="token punctuation">,</span>  <span class="token operator">--</span> 这就是唯一约束的定义</span>
<span class="line">	\`aut_id\` <span class="token keyword">int</span> <span class="token operator">not</span> null<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-default约束" tabindex="-1"><a class="header-anchor" href="#_4-default约束"><span>（4）DEFAULT约束</span></a></h5><p>默认约束指的是，如果我们要在这张表中添加数据，如果为给设定了默认约束的列赋值，该列会自动填充默认值：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建作者表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>author<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>gander<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span>     <span class="token comment">-- 这就是默认约束</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>country<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>brithday<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span></span>
<span class="line">	<span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>aut_id<span class="token punctuation">,</span>aut_name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-primary-key约束" tabindex="-1"><a class="header-anchor" href="#_5-primary-key约束"><span>（5）PRIMARY KEY约束</span></a></h5><p>主键（PRIMARY KEY）的完整称呼是“主键约束”，是 MySQL中使用最为频繁的约束。一般情况下，为了便于 DBMS 更快的查找到表中的记录，都会在表中设置一个主键。</p><p>主键分为单字段主键和多字段联合主键，本节将分别讲解这两种主键约束的创建、修改和删除。</p><p>使用主键应注意以下几点：</p><ul><li>每个表只能定义一个主键。</li><li>主键值必须唯一标识表中的每一行，且不能为 NULL，即表中不可能存在有相同主键值的两行数据。这是唯一性原则。</li><li>一个字段名只能在联合主键字段表中出现一次。</li><li>【联合主键】不能包含不必要的多余字段。当把联合主键的某一字段删除后，如果剩下的字段构成的主键仍然满足唯一性原则，那么这个联合主键是不正确的。这是最小化原则。</li></ul><blockquote><p>单个字段作为主键（方法1）</p></blockquote><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建作者表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>author<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>      <span class="token comment">-- 这就是主键约束</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>gander<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>country<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>brithday<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>单个字段作为主键（方法2）</p></blockquote><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建作者表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>author<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>gander<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>country<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>brithday<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span>     <span class="token comment">-- 这就是主键约束</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>联合主键：多个字段同时作为主键</p></blockquote><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建作者表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>author<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>gander<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>country<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>brithday<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>aut_id<span class="token punctuation">,</span>aut_name<span class="token punctuation">)</span>   <span class="token comment">-- 这就是联合主键</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-auto-increment约束" tabindex="-1"><a class="header-anchor" href="#_6-auto-increment约束"><span>（6）AUTO_INCREMENT约束</span></a></h5><p>需要配合主键使用，有个这个约束，我们在向表中插入数据时，不需要额外关心主键的数据，他会自动帮我们维护一个递增的主键：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建图书表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>book<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>   <span class="token comment">-- 这就是自动递增</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>bar_code<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span> <span class="token keyword">references</span> author<span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7-foreign-key约束" tabindex="-1"><a class="header-anchor" href="#_7-foreign-key约束"><span>（7）FOREIGN KEY约束</span></a></h5><p>外键维护的表与表之间的关系，他规定了当前列的数据必须来源于一张其他表的某一列中的主键：</p><p>外键会产生的效果</p><p>1、删除表时，如果不删除引用外键的表，被引用的表不能直接删除</p><p>2、外键的值必须来源于引用的表的主键字段</p><h5 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h5><blockquote><p>FOREIGN KEY [column list] REFERENCES [primary key table] ([column list]);</p></blockquote><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 创建作者表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>author<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>gander<span class="token punctuation">\`</span></span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>country<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>brithday<span class="token punctuation">\`</span></span> <span class="token keyword">datetime</span></span>
<span class="line">	<span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>aut_id<span class="token punctuation">,</span>aut_name<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">-- 创建图书表</span></span>
<span class="line"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token identifier"><span class="token punctuation">\`</span>ydlclass<span class="token punctuation">\`</span></span><span class="token punctuation">.</span><span class="token identifier"><span class="token punctuation">\`</span>book<span class="token punctuation">\`</span></span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>bar_code<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">unique</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token identifier"><span class="token punctuation">\`</span>aut_id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span> <span class="token keyword">references</span> author<span class="token punctuation">(</span>aut_id<span class="token punctuation">)</span>  <span class="token comment">-- 这就是外键约束</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、对表的修改操作" tabindex="-1"><a class="header-anchor" href="#_4、对表的修改操作"><span>4、对表的修改操作</span></a></h4><p>查看当前数据库中所有表:<code>SHOW TABLES;</code></p><p>查看表结构:<code>DESC 表名;</code></p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">desc authors;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>修改表有5个操作，但前缀都是一样的:<code>ALTER TABLE 表名...</code>（不重要）</p><ul><li><p>修改表之添加列:<code>ALTER TABLE 表名 add (列名 列类型，...，列名 列类型);</code></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">add</span> <span class="token punctuation">(</span>hobby <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改表之修改列类型:<code>ALTER TABLE 表名 MODIFY 列名 列的新类型;</code></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">modify</span> address <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改表之列名称列类型一起修改:<code>ALTER TABLE 表名 CHANGE 原列名 新列名 列名类型;</code></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> author change address addr <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改表之删除列:<code>ALTER TABLE 表名 DROP 列名;</code></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">drop</span> addr<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>修改表之修改表名:<code>ALTER TABLE 表名 RENAME TO 新表名</code></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">alter</span> <span class="token keyword">table</span> author <span class="token keyword">rename</span> authors<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>删除表：</p></li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">drop table if exists 表名;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_4、dml-数据操作语言-语法-重要" tabindex="-1"><a class="header-anchor" href="#_4、dml-数据操作语言-语法-重要"><span>4、DML(数据操作语言)语法（重要）</span></a></h3><p>该语言用来对表记录进行操作（增、删、改），不包含查询。</p><h4 id="_1、插入数据" tabindex="-1"><a class="header-anchor" href="#_1、插入数据"><span>1、插入数据</span></a></h4><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>aut_name<span class="token punctuation">,</span>gander<span class="token punctuation">,</span>country<span class="token punctuation">,</span>brithday<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;罗曼罗兰&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;漂亮国&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1969-1-14&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;旅游&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;罗曼罗兰2&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;漂亮国&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1969-1-14&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;旅游&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明:</strong></p><ol><li>在数据库中所有的<strong>字符串类型，必须使用单引号</strong>。</li><li>(列名1，列名2，列名3)可省略，表示按照表中的顺序插入。但不建议采取这种写法，因为降低了程序的可读性。</li></ol><p>当然我们还可以批量插入：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>aut_name<span class="token punctuation">,</span>gander<span class="token punctuation">,</span>country<span class="token punctuation">,</span>brithday<span class="token punctuation">,</span>hobby<span class="token punctuation">)</span> <span class="token keyword">values</span> <span class="token punctuation">(</span><span class="token string">&#39;罗曼罗兰&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;漂亮国&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1969-1-14&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;旅游&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">&#39;海明威&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;老人与海&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;1969-1-3&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;看书&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2、修改记录" tabindex="-1"><a class="header-anchor" href="#_2、修改记录"><span>2、修改记录</span></a></h4><p>修改某列的全部值:<code>update 表名 set 列名1=列值1(，列名2=列值2);</code></p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line">UPDATupdate <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">&#39;吴军&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">&#39;吴军&#39;</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">&#39;中国&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>上边的语句会讲改表中所有的数据全修改，因此我们可以使用where语句进行限制，如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">UPDATE</span> author <span class="token keyword">set</span> aut_name<span class="token operator">=</span><span class="token string">&#39;lucy&#39;</span> <span class="token keyword">where</span> aut_id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>where是一个很关键的关键字，我们可以使用where关键字实现丰富的筛选，他很像我们的if语句，可以使用各种条件运算：</p><p>可使用的逻辑运算符如下：<code>=、!=、&lt;&gt;、&lt;、&gt;、&gt;=、&lt;=、between...and、in(…)、is null、not、or、and</code>，其中in(...)的用法表示集合。</p><ul><li>where aut_id &gt;1</li><li>where aut_id in (1,3,5)</li><li>where aut_id between 1 and 4</li><li>where aut_id &gt;1 and aut_name=&#39;xxx&#39;</li><li>where aut_name is null</li><li>where aut_name is not null</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 字符串也使用=比较，不是 ==也不是equals</span></span>
<span class="line"><span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token comment">-- 使用in关键字</span></span>
<span class="line"><span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">&#39;中国&#39;</span> <span class="token keyword">where</span> aut_id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 逻辑运算都可以</span></span>
<span class="line"><span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">&#39;中国&#39;</span> <span class="token keyword">where</span> gander <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token operator">and</span> country <span class="token operator">=</span> <span class="token string">&#39;中国&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">-- 使用between关键字</span></span>
<span class="line"><span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">&#39;玉帝&#39;</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">&#39;中国&#39;</span> <span class="token keyword">where</span> aut_id <span class="token operator">between</span> <span class="token number">7</span> <span class="token operator">and</span> <span class="token number">9</span></span>
<span class="line"><span class="token comment">-- 空值使用is null \\  is not null</span></span>
<span class="line"><span class="token keyword">update</span> <span class="token identifier"><span class="token punctuation">\`</span>authors<span class="token punctuation">\`</span></span> <span class="token keyword">set</span> aut_name <span class="token operator">=</span> <span class="token string">&#39;王五&#39;</span><span class="token punctuation">,</span>country<span class="token operator">=</span><span class="token string">&#39;中国&#39;</span> <span class="token keyword">where</span> birthday <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、删除数据" tabindex="-1"><a class="header-anchor" href="#_3、删除数据"><span>3、删除数据</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">delete from 表名 (where 条件);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>不加where条件时会删除表中所有的记录，所以为了防止这种失误操作，很多数据库往往都会有备份。</p><div class="language-mssql line-numbers-mode" data-highlighter="prismjs" data-ext="mssql" data-title="mssql"><pre><code><span class="line">delete from author where auth_id = 1;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>还有一个关键字：truncate，truncate是DDL语言，操作立即生效，原数据不会放到rollback segment中，不能回滚。</p><ul><li>当表被truncate后，表和索引的所占空间会恢复到初始大小，delete操作不会减少表和索引的所占空间。</li><li>truncate和delete只删除数据，drop则删除整个表（结构和数据）。</li><li>truncate速度快，效率高，可以理解为先把表删除了，再重新建立。</li><li>truncate和delete均不会使表结构及其列、约束、索引等发生改变。</li></ul><h2 id="第三章-dql数据查询语言" tabindex="-1"><a class="header-anchor" href="#第三章-dql数据查询语言"><span>第三章 DQL数据查询语言</span></a></h2><p>重点，DQL是我们每天接触编写最多也是最难的sql，该语言用来查询记录，不会修改数据库和表结构：</p><h3 id="一、构建数据库" tabindex="-1"><a class="header-anchor" href="#一、构建数据库"><span>一、构建数据库</span></a></h3><p>学习之前我们需要创建数据库并填充部分数据：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">drop</span> <span class="token keyword">TABLE</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> student<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> student <span class="token punctuation">(</span></span>
<span class="line">    id <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">,</span></span>
<span class="line">    name <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    age <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">    gander <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">drop</span> <span class="token keyword">TABLE</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> course<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> course <span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">,</span></span>
<span class="line">  name <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">,</span></span>
<span class="line">  t_id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">drop</span> <span class="token keyword">TABLE</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> teacher<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> teacher<span class="token punctuation">(</span></span>
<span class="line">  id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">,</span></span>
<span class="line">  name <span class="token keyword">VARCHAR</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> </span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">drop</span> <span class="token keyword">TABLE</span> <span class="token keyword">if</span> <span class="token keyword">EXISTS</span> scores<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> scores<span class="token punctuation">(</span></span>
<span class="line">  s_id <span class="token keyword">INT</span> <span class="token punctuation">,</span></span>
<span class="line">  score <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  c_id <span class="token keyword">INT</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">,</span></span>
<span class="line">	<span class="token keyword">PRIMARY</span> <span class="token keyword">key</span><span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表单填充数据：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  student <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gander<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;白杰&#39;</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;连宇栋&#39;</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;邸志伟&#39;</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;李兴&#39;</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;张琪&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">&#39;武三水&#39;</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">&#39;张志伟&#39;</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">&#39;康永亮&#39;</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">&#39;杨涛瑞&#39;</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">&#39;女&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">&#39;王杰&#39;</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">&#39;男&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  course <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>t_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;数学&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;c++&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;java&#39;</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;php&#39;</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  teacher <span class="token punctuation">(</span>id<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;张楠&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;李子豪&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">&#39;薇薇姐&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;猴哥&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">&#39;八戒&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">94</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">35</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">86</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">94</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">37</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">39</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">66</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span>  scores <span class="token punctuation">(</span>s_id<span class="token punctuation">,</span>score<span class="token punctuation">,</span>c_id<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、单表查询" tabindex="-1"><a class="header-anchor" href="#二、单表查询"><span>二、单表查询</span></a></h3><h4 id="_1、基本查询" tabindex="-1"><a class="header-anchor" href="#_1、基本查询"><span>1、基本查询</span></a></h4><h4 id="_1-基本语法" tabindex="-1"><a class="header-anchor" href="#_1-基本语法"><span><strong>（1）基本语法</strong></span></a></h4><p>查询所有列，其中＊表示查询所有列，而不是所有行的意思:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>查询指定列：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> 列<span class="token number">1</span><span class="token punctuation">,</span>列<span class="token number">2</span><span class="token punctuation">,</span>列n <span class="token keyword">from</span> 表名<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>gander<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>完全重复的记录只显示一次，在查询的列之前添加distinct</p><h4 id="_2-列运算" tabindex="-1"><a class="header-anchor" href="#_2-列运算"><span><strong>（2）列运算</strong></span></a></h4><p>数量类型的列可以做加、减、乘、除等运算:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 查询给所有员工工资加1000的结果</span></span>
<span class="line"><span class="token keyword">select</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>sal<span class="token operator">+</span><span class="token number">1000</span> <span class="token keyword">from</span> employee；</span>
<span class="line"><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token operator">*</span><span class="token number">10</span> <span class="token keyword">from</span> student<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>说明:</p><p>1、null加任何值都等于null，，需要用到ifnull()函数。<code>SELECT IFNULL(sal,0) from 表名;</code> 如果薪资列为空，则输出0；</p><p>2、将字符串做加减乘除运算，会把字符串当作0。</p><p><strong>（3）别名</strong></p><p>我们可以给列名起【别名】，因为在查询的结果中列名可能重复，可能名字不够简洁，或者列的名字不满足我们的要求:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> 列名<span class="token number">1</span> <span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">)</span> 别名<span class="token number">1</span><span class="token punctuation">,</span>列名<span class="token number">2</span> <span class="token punctuation">(</span><span class="token keyword">as</span><span class="token punctuation">)</span> 别名<span class="token number">2</span> <span class="token keyword">from</span> 表名；</span>
<span class="line"><span class="token keyword">select</span> <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token identifier"><span class="token punctuation">\`</span>编号<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token identifier"><span class="token punctuation">\`</span>name<span class="token punctuation">\`</span></span> <span class="token identifier"><span class="token punctuation">\`</span>名字<span class="token punctuation">\`</span></span><span class="token punctuation">,</span>ifnull<span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">\`</span>age<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> <span class="token identifier"><span class="token punctuation">\`</span>student<span class="token punctuation">\`</span></span> <span class="token keyword">as</span> s<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>只需要在列名后加 as 新列名 ，或是直接加上 新列名即可。</p><p><strong>（4）条件控制</strong></p><p>条件查询：在后面添加where指定条件，我们在学习update语句时，接触过这里大致是一样的:</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 条件控制  select * from 表名 where 列名＝指定值;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">&gt;</span><span class="token number">5</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">between</span> <span class="token number">3</span> <span class="token operator">and</span> <span class="token number">7</span> <span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">between</span> <span class="token number">6</span> <span class="token operator">and</span> <span class="token number">7</span> <span class="token operator">or</span> age <span class="token operator">&gt;</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模糊查询：当你想查询所有姓张的记录。用到关键字like。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;张_&#39;</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">&#39;张%&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>（_代表匹配任意一个字符，％代表匹配0～n个任意字符）</p><h4 id="_2、排序-所谓升序和降序都是从上往下排列" tabindex="-1"><a class="header-anchor" href="#_2、排序-所谓升序和降序都是从上往下排列"><span>2、排序(所谓升序和降序都是从上往下排列)</span></a></h4><ul><li><p>升序: ascend</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> form 表名 <span class="token keyword">order</span> <span class="token keyword">by</span> 列名 <span class="token keyword">asc</span><span class="token punctuation">;</span>     <span class="token keyword">asc</span>为默认值可以不写</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>降序:descend</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select * from 表名 order by 列名 desc;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用多列作为排序条件： 当第一列排序条件相同时，根据第二列排序条件排序(当第二列依旧相同时可视情况根据第三例条件排序)：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select * from 表名 order by 列名1 asc, 列名2 desc;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>意思是当列名1的值相同时按照列名2的值降序排。</p></li></ul><h4 id="_3、聚合函数" tabindex="-1"><a class="header-anchor" href="#_3、聚合函数"><span>3、聚合函数</span></a></h4><ul><li><p>1.count：查询满足条件的记录行数，后边可以跟where条件：</p><p>如果使用的列值为空，不会进行统计，</p><p>我们如果统计真实的表记录条数，最好不要用可以为空的列：</p><p>count(*) count(id) count(1)</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select count(列名) from 表名;</span>
<span class="line"></span>
<span class="line">select max(age) from student where id &gt; 5;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>2.max：查询满足条件的记录中的最大值，后边可以跟where条件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select max(列名) from 表名;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>3.min：查询满足条件的记录中的最大值，后边可以跟where条件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select min(列名) from 表名;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>4.sum：查询满足条件的记录中的值的和，后边可以跟where条件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select sum(列名) from 表名;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>5.avg：查询满足条件的记录中的值的平均数，后边可以跟where条件：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select avg(列名) from 表名;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h4 id="_4、分组查询" tabindex="-1"><a class="header-anchor" href="#_4、分组查询"><span>4、分组查询</span></a></h4><p>顾名思义：分组查询就是将原有数据进行分组统计：</p><p>我们举一个例子：将班级的同学按照性别分组，统计男生和女生的平均年龄和成绩。这就是一个典型的分组查询。</p><p>基本语法：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> 分组列名，聚合函数<span class="token number">1</span><span class="token punctuation">,</span>聚合函数<span class="token number">2</span> <span class="token keyword">from</span> 表名 <span class="token keyword">group</span> <span class="token keyword">by</span> 该分组列名<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>分组要使用关键词group by，后边可以是一列，也可以是多个列，分组后查询的列只能是分组的列，或是使用了聚合函数的其他列，其他列不能单独使用。</p><p>我们可以这样理解：一旦发生了分组，我们查询的结果只能是所有男生的成绩总和、平均值，而不能查询某一个男生的成绩。</p><p>有时我们需要对数据进行帅选，作为分组条件的列和聚合函数：</p><p><strong>分组查询前</strong>，还可以通过关键字【where】先把满足条件的人分出来，再分组，语法为:</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select 分组列，聚合函数 from 表名 where 条件 group by 分组列;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>分组查询后</strong>，也可以通过关键字【having】把组信息中满足条件的组再细分出来，语法为：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select 分组列，聚合函数 from 表名 where 条件 group by 分组列 having 聚合函数或列名(条件)；</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例子：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> gander<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> avg_age<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> sum_age <span class="token keyword">from</span> student <span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gander <span class="token keyword">HAVING</span>  gander <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_5、limit子句" tabindex="-1"><a class="header-anchor" href="#_5、limit子句"><span>5、LIMIT子句</span></a></h4><p>LIMIT用来限定查询结果的起始行，以及总行数，通常用来做分页查询，他是mysql中独有的语法。</p><p>例如：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> 表名 <span class="token keyword">limit</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果一个参数：说明从开始查找三条记录</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gander <span class="token keyword">FROM</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果两个参数：说明从第三行起（不算），向后查三条记录</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> id<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>gander <span class="token keyword">FROM</span> student <span class="token keyword">limit</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="第四章-多表查询" tabindex="-1"><a class="header-anchor" href="#第四章-多表查询"><span>第四章 多表查询</span></a></h2><h3 id="一、笛卡尔积" tabindex="-1"><a class="header-anchor" href="#一、笛卡尔积"><span>一、笛卡尔积</span></a></h3><p>如果我们的查询条件相对比较复杂，需要涉及多张表进行查询，如果是两张无关的表联合查询，列出所有的可能的结果，如下图：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420161548572.f1bcf783.png" alt="image-20220420161548572"></p><p>查询的过程大致如下：</p><p>1、选取一张表，我们称之为【驱动表】，从驱动表中开始查询，找到满足条件的数据（如果没有条件就依次全部取出）。</p><p>2、根据从驱动表查询的这条数据，以及其他条件，去第二张【被驱动表】中查询，并将结果进行拼接。</p><p>3、依次类推，从驱动表获取第二条数据，使用该数据和条件，再次查询【被驱动表】进行查询。</p><p>4、整个过程，会查询【驱动表】一次，查询【被驱动表】多次。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420181307754.1be234a8.png" alt="image-20220420181307754"></p><p>对于没有【条件约束】的两张表进行关联查询，如<code>select * from t1,t2</code>，就是从t1中一条条的选取数据，然后全量匹配t2的所有数据，形成一个大的集合，集合的数据量是两表数据量的乘积，我们称之为【笛卡尔积】，如下：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420172239900.21b51f63.png" alt="image-20220420172239900"></p><p>没有连接条件时，我们必须列举所有的可能性，就会产生上边的一张大表，如果两个表的数据量变大，比如每张表1000条数据，那笛卡尔积，就会扩张到1百万，如果是三张表关联，就必须再乘以1000。</p><p>但是很明显，如果两个表没有任何的关系，我们也不会连接两张表进行查询的，在上边的案例中，很明显有一个关联条件就是部门id，两张表的部门id一致，才是我们想要的结果，如下：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420172407275.0f57b13f.png" alt="image-20220420172407275"></p><p>于是，我们的sql就可以写成这个样子：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> e<span class="token punctuation">.</span>id<span class="token punctuation">,</span>e<span class="token punctuation">.</span>name<span class="token punctuation">,</span>e<span class="token punctuation">.</span>dept_id<span class="token punctuation">,</span>d<span class="token punctuation">.</span>dept_name <span class="token keyword">from</span> employee e<span class="token punctuation">,</span>dept e <span class="token keyword">where</span> e<span class="token punctuation">.</span>dept_id <span class="token operator">=</span> d<span class="token punctuation">,</span>id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>多表连接的方式有四种，内连接、外链接（左外连接，右外连接），全连接，我们将依次讲解。</p><h3 id="二、内连接" tabindex="-1"><a class="header-anchor" href="#二、内连接"><span>二、内连接</span></a></h3><p>在我们刚才的sql当中，使用逗号分割两张表进行查询（employee e,dept e），mysql经过优化默认就等效与内链接，内连接使用关键字 【inner join】 或 【join】 来连接两张表。内连接中，【驱动表】是系统优化后自动选取的，会将执行计划中【扫描次数少】的表选做【驱动表】。</p><p>**注意：**使用【join】关键字后要使用【on】来确定连接条件，而不是【where】。但是，在内连接中的where和on效果是等价的，但是一定要明确【on】用来声明连接条件，【where】是整理的帅选条件。</p><p>以下三条sql等效：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token punctuation">,</span>course c <span class="token keyword">where</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">inner</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原始数据：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420191111613.21d2f110.png" alt="image-20220420191111613"></p><p>通俗讲就是根据条件，找到表 A 和 表 B 的数据的交集。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420155202821.552050af.png" alt="image-20220420155202821"></p><h3 id="三、外连接-常用" tabindex="-1"><a class="header-anchor" href="#三、外连接-常用"><span>三、外连接（常用）</span></a></h3><p>内连接和外连接的区别：</p><ul><li>对于【内连接】中的两个表，若【驱动表】中的记录在【被驱动表】中找不到与之匹配的记录，则该记录不会被加入到最后的结果集中。</li><li>对于【外连接】中的两个表，即使【驱动表】中的记录在【被驱动表】中找不到与之匹配的记录，也要将该记录加入到最后的结果集中，针对不同的【驱动表的选择】，又可以将外连接分为【左外连接】和【右外连接】。</li></ul><p>所以我们可以得出以下结论：</p><ul><li>对于左外连接查询的结果会包含左表的所有数据</li><li>对于右外连接查询的结果会包含右表的所有数据</li></ul><p>外连接的关键字是【outter join】 也可以省略outter，连接条件一样需要使用【on】关键字：</p><h4 id="_1-左连接-左外连接" tabindex="-1"><a class="header-anchor" href="#_1-左连接-左外连接"><span>（1）左连接（左外连接）</span></a></h4><p>以下是左外连接的一条sql（等效）：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course c <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> <span class="token keyword">on</span> teacher t c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course c <span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token keyword">on</span> teacher t c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在左表course中第五条数据中的php课程并没有与之匹配的老师，但是结果php课程也显示出来了，同时将不能匹配其他表的字段都置空 【Null】：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420183450626.9f2988c7.png" alt="image-20220420183450626"></p><p>我们可以使用一个图形来形容左外连接的效果：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420155144268.fc560bc3.png" alt="image-20220420155144268"></p><h4 id="_2-右连接-右外连接" tabindex="-1"><a class="header-anchor" href="#_2-右连接-右外连接"><span><strong>（2）右连接（右外连接）</strong></span></a></h4><p>以下是左外连接的一条sql（等效）：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course c <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> teacher t <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> course c <span class="token keyword">left</span> <span class="token keyword">join</span> teacher t <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以看到，在右表teacher中第五条数据并没有与之匹配的左表数据，但是结果也显示出来了，同时将不能匹配其他表的字段都置空 【Null】：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420192119873.6bdfbca8.png" alt="image-20220420192119873"></p><p>我们可以使用一个图形来形容左外连接的效果：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220423093932211.c9ef8656.png" alt="image-20220423093932211"></p><h3 id="四、全连接" tabindex="-1"><a class="header-anchor" href="#四、全连接"><span>四、全连接</span></a></h3><p>mysql中并不支持全连接，但是有些数据库是支持的，比如oracle，使用【full outer join】关键字，sql如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">full</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">full</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然我的 MySQL 不支持此种方式，可以用其他方式替代解决，如下。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">right</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">union</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">left</span> <span class="token keyword">outer</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个结果中，不管是左表还是右表，所有的数据都被包含在了结果集当中：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420192457301.b780315f.png" alt="image-20220420192457301"></p><p>我们可以使用一个图形来形容左外连接的效果：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20220420155126504.237eaa4f.png" alt="image-20220420155126504"></p><p>小知识：阿里规约有这么一条【强制】超过三个表禁止join。需要join的字段，数据类型必须绝对一致； 多表关联查询时，保证被关联的字段需要有索引。说明：即使双表join也要注意表索引、SQL性能。</p><h3 id="五、子查询" tabindex="-1"><a class="header-anchor" href="#五、子查询"><span>五、子查询</span></a></h3><p>按照结果集的行列数不同，子查询可分为以下几类：</p><ul><li>标量子查询：结果集只有一行一列 （又称为单行子查询）</li><li>列子查询： 结果集只有一列多行</li><li>行子查询： 结果集只有一行多列</li><li>表子查询： 结果集一般为多行多列</li></ul><h4 id="_1、where-having-型子查询" tabindex="-1"><a class="header-anchor" href="#_1、where-having-型子查询"><span>1、where/having 型子查询</span></a></h4><p>在where性的子查询中，我们可以使用（标量子查询，列子查询，行子查询）</p><p>（1）查询比连宇栋年龄大的所有的学生 (标量子查询)</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> age <span class="token operator">&gt;</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> age <span class="token keyword">from</span> student <span class="token keyword">where</span> name <span class="token operator">=</span> <span class="token string">&#39;连宇栋&#39;</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）查询有一门学科分数大于九十分的学生信息 (列子查询)</p><div class="language-mysql line-numbers-mode" data-highlighter="prismjs" data-ext="mysql" data-title="mysql"><pre><code><span class="line">select * from student where id in(</span>
<span class="line">	select distinct s_id from scores where score &gt; 90</span>
<span class="line">)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）在多条件中，如果行子查询的结果正好满足条件，可以简化书写，如下：</p><p>以下的语句是为了写而写，不是最优的选择：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 查询男生且是年龄大学的学生信息</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student </span>
<span class="line"><span class="token keyword">where</span> gander <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span> <span class="token operator">and</span> age <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student  </span>
<span class="line">	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gander <span class="token keyword">having</span> gander <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student </span>
<span class="line"><span class="token keyword">where</span> <span class="token punctuation">(</span>gander<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> gander<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token keyword">from</span> student  </span>
<span class="line">	<span class="token keyword">GROUP</span> <span class="token keyword">BY</span> gander <span class="token keyword">having</span> gander <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><ul><li>where 型子查询，如果是 where 列 =（内层 sql） 则内层 sql 返回的必须是单行单列，单个值。</li><li>where 型子查询，如果是 where 列 in（内层 sql） 则内层 sql 返回的必须是单列，可以多行。</li></ul><h4 id="_2、from-型子查询" tabindex="-1"><a class="header-anchor" href="#_2、from-型子查询"><span>2、from 型子查询</span></a></h4><p>在学习 from 子查询之前，需要理解一个概念：<strong>查询结果集在结构上可以当成表看</strong>，那就可以当成临时表对他进行再次查询，所以他支持的就是表子查询：</p><p>取排名<strong>数学成绩</strong>前五名的学生，正序排列。</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token punctuation">(</span></span>
<span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name sname<span class="token punctuation">,</span>r<span class="token punctuation">.</span>score<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name cname <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id  </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> r<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id </span>
<span class="line"><span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;数学&#39;</span> </span>
<span class="line"><span class="token keyword">order</span> <span class="token keyword">by</span>  r<span class="token punctuation">.</span>score <span class="token keyword">desc</span></span>
<span class="line"><span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">)</span> t <span class="token keyword">order</span> <span class="token keyword">by</span>  t<span class="token punctuation">.</span>score </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、select型子查询" tabindex="-1"><a class="header-anchor" href="#_3、select型子查询"><span>3、SELECT型子查询</span></a></h4><p>在select关键字后的子查询仅仅支持标量子查询。</p><p>select *,1 as a,2,3,4,5,6 from student;</p><p>例子：查询每个部门的员工个数</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token identifier"><span class="token punctuation">\`</span>代课的数量<span class="token punctuation">\`</span></span> <span class="token keyword">from</span> teacher t <span class="token keyword">left</span> <span class="token keyword">join</span> course c </span>
<span class="line"><span class="token keyword">on</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>t_id <span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course c <span class="token keyword">where</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token identifier"><span class="token punctuation">\`</span>代课的数量<span class="token punctuation">\`</span></span> </span>
<span class="line"><span class="token keyword">from</span> teacher t<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、exists型子查询" tabindex="-1"><a class="header-anchor" href="#_4、exists型子查询"><span>4、exists型子查询</span></a></h4><p>表示判断子查询是否有返回值（true/false），有则返回true，没有返回false，这类子查询使用的不是很多。</p><p>例子：查询有员工的部门</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> teacher t <span class="token keyword">where</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course c <span class="token keyword">where</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、sql大练兵" tabindex="-1"><a class="header-anchor" href="#五、sql大练兵"><span>五、sql大练兵</span></a></h3><p><strong>注：答案在文档下方的：附录一，一定要先自己做。</strong></p><ol><li>查询‘01’号学生的姓名和各科成绩。 难度：两颗星</li><li>查询各个学科的平均成绩，最高成绩。 难度：两颗星</li><li>查询每个同学的最高成绩及科目名称。 难度：四颗星</li><li>查询所有姓张的同学的各科成绩。 难度：两颗星</li><li>查询每个课程最高分的同学信息。 难度：五颗星</li><li>查询名字中含有“张”和‘李’字的学生信息和各科成绩 。 难度：两颗星</li><li>查询平均成绩及格的同学的信息。 难度：三颗星</li><li>将学生按照总分数进行排名。 难度：三颗星</li><li>查询数学成绩的最高分、最低分、平均分。 难度：两颗星</li><li>将各科目按照平均分排序。 难度：两颗星</li><li>查询老师的信息和他所带科目的平均分。 难度：三颗星</li><li>查询被“张楠”和‘‘李子豪’教的课程的最高分和平均分。 难度：三颗星</li><li>查询每个同学的最好成绩的科目名称。 难度：五颗星</li><li>查询所有学生的课程及分数。 难度：一颗星</li><li>查询课程编号为1且课程成绩在60分以上的学生的学号和姓名。 难度：两颗星</li><li>查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩。 难度：三颗星</li><li>查询有不及格课程的同学信息。 难度：四颗星</li><li>求每门课程的学生人数。 难度：两颗星</li><li>查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列。 难度：两颗星</li><li>查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩。 难度：三颗星</li><li>查询有且仅有一门课程成绩在90分以上的学生信息； 难度：三颗星</li><li>查询出只有三门课程的全部学生的学号和姓名。难度：三颗星</li><li>查询有不及格课程的课程信息 。 难度：三颗星</li><li>检索至少选修5门课程的学生学号。难度：三颗星</li><li>查询没有学全所有课程的同学的信息 。难度：四颗星</li><li>查询学全所有课程的同学的信息。难度：四颗星</li><li>查询各学生都选了多少门课。难度：两颗星</li><li>查询课程名称为”java”，且分数低于60的学生姓名和分数。 难度：三颗星</li><li>查询学过”张楠”老师授课的同学的信息 。 难度：四颗星</li><li>查询没学过“张楠”老师授课的同学的信息 。 难度：五颗星</li></ol><h2 id="第五章-mysql常用函数介绍" tabindex="-1"><a class="header-anchor" href="#第五章-mysql常用函数介绍"><span>第五章 MySQL常用函数介绍</span></a></h2><p>MySQL数据库中提供了很丰富的函数，比如我们常用的聚合函数，日期及字符串处理函数等。SELECT语句及其条件表达式都可以使用这些函数，函数可以帮助用户更加方便的处理表中的数据，使MySQL数据库的功能更加强大。本篇文章主要为大家介绍几类常用函数的用法：</p><h3 id="一、聚合函数" tabindex="-1"><a class="header-anchor" href="#一、聚合函数"><span>一、聚合函数</span></a></h3><p>聚合函数是平时比较常用的一类函数，这里列举如下：</p><ul><li>COUNT(col) ： 统计查询结果的行数</li><li>MIN(col)： 查询指定列的最小值</li><li>MAX(col)： 查询指定列的最大值</li><li>SUM(col)： 求和，返回指定列的总和</li><li>AVG(col)： 求平均值，返回指定列数据的平均值</li></ul><p>本类函数之前已经基本全部接触过，这里不在多做赘述。</p><h3 id="二、数值型函数" tabindex="-1"><a class="header-anchor" href="#二、数值型函数"><span>二、数值型函数</span></a></h3><p>数值型函数主要是对数值型数据进行处理，得到我们想要的结果，常用的几个列举如下：</p><ul><li>CEILING(x)： 返回大于x的最小整数值，向上取整</li><li>FLOOR(x)： 返回小于x的最大整数值，向下取整</li><li>ROUND(x,y)： 返回参数x的四舍五入的有y位小数的值 四舍五入</li><li>TRUNCATE(x,y)： 返回数字x截短为y位小数的结果</li><li>PI()： 返回pi的值（圆周率）</li><li>RAND()： 返回０到１内的随机值,可以通过提供一个参数(种子)使RAND()随机数生成器生成一个指定的值</li></ul><p>一些示例：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment"># ABS()函数求绝对值</span></span>
<span class="line"><span class="token keyword">SELECT</span> ABS<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ABS<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ABS<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ABS<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 取整函数 CEIL(x) 和 CEILING(x) 的意义相同，返回不小于 x 的最小整数值</span></span>
<span class="line"><span class="token keyword">SELECT</span> CEIL<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CEILING<span class="token punctuation">(</span><span class="token number">2.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 求余函数 MOD(x,y) 返回 x 被 y 除后的余数</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token function">MOD</span><span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MOD</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MOD</span><span class="token punctuation">(</span><span class="token number">15.5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># RAND() 函数被调用时，可以产生一个在 0 和 1 之间的随机数</span></span>
<span class="line"><span class="token keyword">SELECT</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> RAND<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、字符串函数" tabindex="-1"><a class="header-anchor" href="#三、字符串函数"><span>三、字符串函数</span></a></h3><p>字符串函数可以对字符串类型数据进行处理，在程序应用中用处还是比较大的，同样这里列举几个常用的如下：</p><ul><li>LENGTH(s)： 计算字符串长度函数，返回字符串的字节长度</li><li>CONCAT(s1,s2...,sn)： 合并字符串函数，返回结果为连接参数产生的字符串，参数可以是一个或多个</li><li>LOWER(str)： 将字符串中的字母转换为小写</li><li>UPPER(str)： 将字符串中的字母转换为大写</li><li>LEFT(str,x)： 返回字符串str中最左边的x个字符</li><li>RIGHT(str,x)： 返回字符串str中最右边的x个字符</li><li>TRIM(str)： 删除字符串左右两侧的空格</li><li>REPLACE： 字符串替换函数，返回替换后的新字符串 REPLACE(name,&#39;白&#39;,&#39;黑&#39;)</li><li>SUBSTRING： 截取字符串，返回从指定位置开始的指定长度的字符换</li><li>REVERSE(str)： 返回颠倒字符串str的结果</li></ul><p>一些示例：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment"># LENGTH(str) 函数的返回值为字符串的字节长度</span></span>
<span class="line"><span class="token keyword">SELECT</span> LENGTH<span class="token punctuation">(</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LENGTH<span class="token punctuation">(</span><span class="token string">&#39;数据库&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># CONCAT(sl，s2，...) 函数返回结果为连接参数产生的字符串 若有任何一个参数为 NULL，则返回值为 NULL</span></span>
<span class="line"><span class="token keyword">SELECT</span> CONCAT<span class="token punctuation">(</span><span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;5.7&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>CONCAT<span class="token punctuation">(</span><span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">,</span><span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># INSERT(s1，x，len，s2) 返回字符串 s1，子字符串起始于 x 位置，并且用 len 个字符长的字符串代替 s2</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">INSERT</span><span class="token punctuation">(</span><span class="token string">&#39;Football&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;Play&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col1<span class="token punctuation">,</span><span class="token keyword">INSERT</span><span class="token punctuation">(</span><span class="token string">&#39;Football&#39;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">&#39;Play&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># UPPER,LOWER是大小写转换函数</span></span>
<span class="line"><span class="token keyword">SELECT</span> LOWER<span class="token punctuation">(</span><span class="token string">&#39;BLUE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>LOWER<span class="token punctuation">(</span><span class="token string">&#39;Blue&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UPPER<span class="token punctuation">(</span><span class="token string">&#39;green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>UPPER<span class="token punctuation">(</span><span class="token string">&#39;Green&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># LEFT,RIGHT是截取左边或右边字符串函数</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">LEFT</span><span class="token punctuation">(</span><span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">RIGHT</span><span class="token punctuation">(</span><span class="token string">&#39;MySQL&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># REPLACE(s，s1，s2) 使用字符串 s2 替换字符串 s 中所有的字符串 s1</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">REPLACE</span><span class="token punctuation">(</span><span class="token string">&#39;aaa.mysql.com&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;w&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># 函数 SUBSTRING(s，n，len) 带有 len 参数的格式，从字符串 s 返回一个长度同 len 字符相同的子字符串，起始于位置 n</span></span>
<span class="line"><span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;computer&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col1<span class="token punctuation">,</span>SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;computer&#39;</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col2<span class="token punctuation">,</span></span>
<span class="line">SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;computer&#39;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col3<span class="token punctuation">,</span>SUBSTRING<span class="token punctuation">(</span><span class="token string">&#39;computer&#39;</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col4<span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">+</span><span class="token comment">--------+------+------+------+</span></span>
<span class="line"><span class="token operator">|</span> col1   <span class="token operator">|</span> col2 <span class="token operator">|</span> col3 <span class="token operator">|</span> col4 <span class="token operator">|</span></span>
<span class="line"><span class="token operator">+</span><span class="token comment">--------+------+------+------+</span></span>
<span class="line"><span class="token operator">|</span> mputer <span class="token operator">|</span> mput <span class="token operator">|</span> ter  <span class="token operator">|</span> put  <span class="token operator">|</span></span>
<span class="line"><span class="token operator">+</span><span class="token comment">--------+------+------+------+</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、日期和时间函数" tabindex="-1"><a class="header-anchor" href="#四、日期和时间函数"><span>四、日期和时间函数</span></a></h3><blockquote><p>获取时间和日期</p></blockquote><ul><li>【CURDATE】 和 CURRENT_DATE】 两个函数作用相同，返回当前系统的【日期值】</li><li>【CURTIME 和 CURRENT_TIME】 两个函数作用相同，返回当前系统的【时间值】</li><li>【NOW】 和 【SYSDATE】 两个函数作用相同，返回当前系统的【日期和时间值】</li></ul><blockquote><p>时间戳或日期转换函数：</p></blockquote><ul><li>【UNIX_TIMESTAMP】 获取UNIX时间戳函数，返回一个以 UNIX 时间戳为基础的无符号整数</li><li>【FROM_UNIXTIME】 将 UNIX 时间戳转换为时间格式，与UNIX_TIMESTAMP互为反函数</li></ul><blockquote><p>根据日期获取年月日的数值</p></blockquote><ul><li>【MONTH】 获取指定日期中的月份</li><li>【MONTHNAME】 获取指定日期中的月份英文名称</li><li>【DAYNAME】 获取指定曰期对应的星期几的英文名称</li><li>【DAYOFWEEK】 获取指定日期对应的一周的索引位置值</li><li>【WEEK】 获取指定日期是一年中的第几周，返回值的范围是否为 0〜52 或 1〜53</li><li>【DAYOFYEAR】 获取指定曰期是一年中的第几天，返回值范围是1~366</li><li>【DAYOFMONTH】 获取指定日期是一个月中是第几天，返回值范围是1~31</li><li>【YEAR】 获取年份，返回值范围是 1970〜2069</li></ul><blockquote><p>时间日期的计算</p></blockquote><ul><li>【DATE_ADD】 和 【ADDDATE】 两个函数功能相同，都是向日期添加指定的时间间隔</li><li>【DATE_SUB】 和【 SUBDATE】 两个函数功能相同，都是向日期减去指定的时间间隔</li><li>【ADDTIME】 时间加法运算，在原始时间上添加指定的时间</li><li>【SUBTIME】 时间减法运算，在原始时间上减去指定的时间</li><li>【DATEDIFF】 获取两个日期之间间隔，返回参数 1 减去参数 2 的值</li><li><strong>【DATE_FORMAT】 格式化指定的日期，根据参数返回指定格式的值</strong></li></ul><p>当使用了表达式计算后，不能直接使用别名进行判断了。</p><p>一些示例：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment"># CURDATE() 和 CURRENT_DATE() 函数的作用相同，将当前日期按照“YYYY-MM-DD”或“YYYYMMDD”格式的值返回</span></span>
<span class="line">mysql<span class="token operator">&gt;</span> <span class="token keyword">SELECT</span> CURDATE<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">CURRENT_DATE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># MONTH(date) 函数返回指定 date 对应的月份</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">MONTH</span><span class="token punctuation">(</span><span class="token string">&#39;2017-12-15&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># DATE_ADD(date,INTERVAL expr type) 和 ADDDATE(date,INTERVAL expr type) 两个函数的作用相同，都是用于执行日期的加运算。</span></span>
<span class="line"><span class="token keyword">SELECT</span> DATE_ADD<span class="token punctuation">(</span><span class="token string">&#39;2018-10-31 23:59:59&#39;</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">1</span> <span class="token keyword">SECOND</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> C1<span class="token punctuation">,</span>DATE_ADD<span class="token punctuation">(</span><span class="token string">&#39;2018-10-31 23:59:59&#39;</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token string">&#39;1:1&#39;</span> <span class="token keyword">HOUR</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> C2<span class="token punctuation">,</span> ADDDATE<span class="token punctuation">(</span><span class="token string">&#39;2018-10-31 23:59:59&#39;</span><span class="token punctuation">,</span><span class="token keyword">INTERVAL</span> <span class="token number">1</span> <span class="token keyword">SECOND</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> C3<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># DATEDIFF(date1，date2) 返回起始时间 date1 和结束时间 date2 之间的天数</span></span>
<span class="line"><span class="token keyword">SELECT</span> DATEDIFF<span class="token punctuation">(</span><span class="token string">&#39;2017-11-30&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-11-29&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> COL1<span class="token punctuation">,</span>DATEDIFF<span class="token punctuation">(</span><span class="token string">&#39;2017-11-30&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;2017-12-15&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment"># DATE_FORMAT(date，format) 函数是根据 format 指定的格式显示 date 值</span></span>
<span class="line"><span class="token keyword">SELECT</span> DATE_FORMAT<span class="token punctuation">(</span><span class="token string">&#39;2017-11-15 21:45:00&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;%W %M %D %Y&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col1<span class="token punctuation">,</span>DATE_FORMAT<span class="token punctuation">(</span><span class="token string">&#39;2017-11-15 21:45:00&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;%h:i% %p %M %D %Y&#39;</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> col2<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、加密函数" tabindex="-1"><a class="header-anchor" href="#五、加密函数"><span>五、加密函数</span></a></h3><ul><li><strong>MD5()</strong> 计算字符串str的MD5校验和</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> MD5<span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">结果：<span class="token number">900150983</span>cd24fb0d6963f7d28e17f72</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、流程控制函数" tabindex="-1"><a class="header-anchor" href="#六、流程控制函数"><span>六、流程控制函数</span></a></h3><p>流程控制类函数可以进行条件操作，用来实现SQL的条件逻辑，允许开发者将一些应用程序业务逻辑转换到数据库后台，列举如下：</p><ul><li>IF(test,t,f)： 如果test是真，返回t；否则返回f</li><li>IFNULL(arg1,arg2)： 如果arg1不是空，返回arg1，否则返回arg2</li><li>NULLIF(arg1,arg2)： 如果【arg1=arg2】返回NULL，否则返回arg1</li></ul><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">NULLIF</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">#返回null</span></span>
<span class="line"><span class="token keyword">SELECT</span> <span class="token keyword">NULLIF</span><span class="token punctuation">(</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;abcd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">#返回abc</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过对某一列的值进行判断，</p><ul><li><p>CASE [test] WHEN[val1] THEN [result]...ELSE [default] END：</p><p>如果test和valN相等，则返回resultN，否则返回default</p></li></ul><p>创建表和数据如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>mystudent<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>ID<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>USER_NAME<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>COURSE<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token identifier"><span class="token punctuation">\`</span>SCORE<span class="token punctuation">\`</span></span> <span class="token keyword">float</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>ID<span class="token punctuation">\`</span></span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">insert</span> <span class="token keyword">into</span> mystudent<span class="token punctuation">(</span>USER_NAME<span class="token punctuation">,</span> COURSE<span class="token punctuation">,</span> SCORE<span class="token punctuation">)</span>  <span class="token keyword">values</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;数学&quot;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;语文&quot;</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;英语&quot;</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;数学&quot;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;语文&quot;</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;英语&quot;</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;数学&quot;</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;语文&quot;</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token string">&quot;王五&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;英语&quot;</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子一：输出学生各科的成绩，以及评级，60以下是D,60-70是C，71-80：是B ，80以上是A</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">SELECT</span></span>
<span class="line">	<span class="token operator">*</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token keyword">CASE</span></span>
<span class="line">		<span class="token keyword">WHEN</span> score <span class="token operator">&lt;</span> <span class="token number">60</span> <span class="token keyword">THEN</span> <span class="token string">&#39;D&#39;</span> </span>
<span class="line">		<span class="token keyword">WHEN</span> score <span class="token operator">&gt;=</span> <span class="token number">60</span> <span class="token operator">and</span> score <span class="token operator">&lt;</span> <span class="token number">70</span> <span class="token keyword">THEN</span> <span class="token string">&#39;C&#39;</span> </span>
<span class="line">		<span class="token keyword">WHEN</span> score <span class="token operator">&gt;=</span> <span class="token number">70</span> <span class="token operator">and</span> score <span class="token operator">&lt;</span> <span class="token number">80</span> <span class="token keyword">THEN</span> <span class="token string">&#39;B&#39;</span> </span>
<span class="line">		<span class="token keyword">WHEN</span> score <span class="token operator">&gt;=</span> <span class="token number">80</span> <span class="token operator">and</span> score <span class="token operator">&lt;=</span> <span class="token number">100</span> <span class="token keyword">THEN</span> <span class="token string">&#39;A&#39;</span> </span>
<span class="line">	<span class="token keyword">END</span> <span class="token keyword">AS</span> <span class="token string">&quot;评级&quot;</span></span>
<span class="line"><span class="token keyword">FROM</span></span>
<span class="line">	mystudent</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子二：行转列案例，要求根据上边的表结构，查询出如下结果：：</p><p>sql语句如下：</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> user_name<span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">case</span> course <span class="token keyword">when</span> <span class="token string">&#39;数学&#39;</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">case</span> course <span class="token keyword">when</span> <span class="token string">&#39;语文&#39;</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span>	<span class="token keyword">as</span> <span class="token string">&#39;语文&#39;</span><span class="token punctuation">,</span></span>
<span class="line">   <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">case</span> course <span class="token keyword">when</span> <span class="token string">&#39;英语&#39;</span> <span class="token keyword">then</span> score <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">end</span><span class="token punctuation">)</span>	<span class="token keyword">as</span> <span class="token string">&#39;英语&#39;</span></span>
<span class="line"><span class="token keyword">from</span> mystudent <span class="token keyword">group</span> <span class="token keyword">by</span> user_name</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第六章-数据库设计" tabindex="-1"><a class="header-anchor" href="#第六章-数据库设计"><span>第六章 数据库设计</span></a></h2><h3 id="一、三范式" tabindex="-1"><a class="header-anchor" href="#一、三范式"><span>一、三范式</span></a></h3><p>注：设计只是一种思想一种理念，我们按照规范的设计方式设计数据库对我们来说有好处，但绝对不是说一定要严格遵守，三范式能极大的减少数据冗余，但是相对编写sql而言是增加了难度的，所以所有好的设计都是要权衡利弊的，要对编码难度，存储大小，执行效率等多方面进行综合考量，但是在学习初期最好紧紧的遵循三范式，在后续的编码中体会和总结自己的经验。</p><p>设计数据库表的时候所依据的规范，共三个规范：</p><ul><li>第一范式：要求有主键，并且要求每一个字段原子性不可再分</li><li>第二范式：要求所有非主键字段完全依赖主键，不能产生部分依赖</li><li>第三范式：所有非主键字段和主键字段之间不能产生传递依赖</li></ul><h4 id="_1、第一范式" tabindex="-1"><a class="header-anchor" href="#_1、第一范式"><span>1、第一范式</span></a></h4><p>数据库表中不能出现重复记录，每个字段是原子性的不能再分</p><p>不符合第一范式的实例：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>联系方式</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>bj@qq.com,18565987896</td></tr><tr><td>1002</td><td>杨春旺</td><td>ycw@qq.com,13659874598</td></tr><tr><td>1003</td><td>张志伟</td><td>zzw@qq.com,12598745698</td></tr></tbody></table><p>解决方案</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>邮箱地址</th><th>联系电话</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>bj@qq.com</td><td>18565987896</td></tr><tr><td>1002</td><td>杨春旺</td><td>ycw@qq.com</td><td>13659874598</td></tr><tr><td>1003</td><td>张志伟</td><td>zzw@qq.com</td><td>12598745698</td></tr></tbody></table><p>不符合第一范式的实例，不是说他错哈：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>联系地址</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>太原市尖草坪区恒山路108号</td></tr><tr><td>1002</td><td>杨春旺</td><td>太原市迎泽区迎泽大家100号</td></tr><tr><td>1003</td><td>张志伟</td><td>太原市杏花岭区北大街152号</td></tr></tbody></table><p>解决方案：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>市</th><th>区</th><th>详细地址</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>太原市</td><td>尖草坪区</td><td>恒山路108号</td></tr><tr><td>1002</td><td>杨春旺</td><td>太原市</td><td>迎泽区</td><td>迎泽大街100号</td></tr><tr><td>1003</td><td>张志伟</td><td>太原市</td><td>杏花岭区</td><td>北大街152号</td></tr></tbody></table><p>必须有主键，这是数据库设计的最基本要求，主要采用数值型或定长字符串表示，<strong>关于列不可再分，应该根据具体的情况来决定</strong>。如联系方式，为了开发上的便利可能就采用一个字段。</p><p>关于第一范式，每一行必须唯一，也就是每个表必须有主键，这是数据库设计的最基本要求，主要采用数值型或定长字符串表示，<strong>关于列不可再分，应该根据具体的情况来决定</strong>。如联系方式，为了开发上的便利可能就采用一个字段。</p><h4 id="_2、第二范式" tabindex="-1"><a class="header-anchor" href="#_2、第二范式"><span>2、第二范式</span></a></h4><p>第二范式是建立在第一范式基础上的，另外要求所有非主键字段完全依赖主键，不能产生<strong>部分依赖</strong></p><p>不符合第二范式的案例：</p><p>其中学生编号和课程编号为联合主键</p><table><thead><tr><th>学生编号</th><th>性别</th><th>学生姓名</th><th>课程编号</th><th>课程名称</th><th>教室</th><th>成绩</th></tr></thead><tbody><tr><td>1001</td><td>男</td><td>白杰</td><td>2001</td><td>java</td><td>3004</td><td>89</td></tr><tr><td>1002</td><td>男</td><td>杨春旺</td><td>2002</td><td>mysql</td><td>3003</td><td>88</td></tr><tr><td>1003</td><td>女</td><td>刘慧慧</td><td>2003</td><td>html</td><td>3005</td><td>90</td></tr><tr><td>1001</td><td>男</td><td>白杰</td><td>2002</td><td>mysql</td><td>3003</td><td>77</td></tr><tr><td>1001</td><td>男</td><td>白杰</td><td>2003</td><td>html</td><td>3005</td><td>89</td></tr><tr><td>1003</td><td>女</td><td>刘慧慧</td><td>2001</td><td>java</td><td>3004</td><td>90</td></tr></tbody></table><p>以上虽然确定了主键，但此表会出现大量的数据冗余，出现冗余的原因在于，学生信息部分依赖了主键的一个字段学生编号，和课程id没有毛线关系。同时课程的信息只是依赖课程id，和学生id没有毛线关系。只有成绩一个字段完全依赖主键的两个部分，这就是第二范式<strong>部分依赖</strong>。</p><p><strong>解决方案：</strong></p><p>学生表：学生编号为主键</p><table><thead><tr><th>学生编号</th><th>性别</th><th>学生姓名</th></tr></thead><tbody><tr><td>1001</td><td>男</td><td>白杰</td></tr><tr><td>1002</td><td>男</td><td>杨春旺</td></tr><tr><td>1003</td><td>女</td><td>刘慧慧</td></tr></tbody></table><p>课程表：课程编号为主键</p><table><thead><tr><th>课程编号</th><th>课程名称</th><th>教室</th></tr></thead><tbody><tr><td>2001</td><td>java</td><td>3003</td></tr><tr><td>2002</td><td>mysql</td><td>3003</td></tr><tr><td>2003</td><td>html</td><td>3005</td></tr></tbody></table><p>成绩表：学生编号和课程编号为联合主键</p><table><thead><tr><th>学生编号</th><th>课程编号</th><th>成绩</th></tr></thead><tbody><tr><td>1001</td><td>2001</td><td>89</td></tr><tr><td>1002</td><td>2002</td><td>88</td></tr><tr><td>1003</td><td>2003</td><td>90</td></tr><tr><td>1001</td><td>2002</td><td>77</td></tr><tr><td>1001</td><td>2003</td><td>89</td></tr><tr><td>1003</td><td>2001</td><td>90</td></tr></tbody></table><p>如果一个表是单一主键，那么它就是复合第二范式，部分依赖和主键有关系</p><p>以上是典型的“多对多”设计</p><h4 id="_3、第三范式" tabindex="-1"><a class="header-anchor" href="#_3、第三范式"><span>3、第三范式</span></a></h4><p>建立在第二范式基础上的，非主键字段不能传递依赖于主键字段（不要产生传递依赖）</p><p>不满足第三范式的例子：</p><p>其中学生编号是主键</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>专业编号</th><th>专业名称</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>2001</td><td>计算机</td></tr><tr><td>1002</td><td>杨春旺</td><td>2002</td><td>自动化</td></tr><tr><td>1003</td><td>张志伟</td><td>2001</td><td>计算机</td></tr></tbody></table><p>何为传递依赖？</p><p>专业编号依赖学生编号，因为该学生学的就是这个专业啊。但是专业名称和学生其实没多大关系，专业名称依赖于专业编号。这就叫传递依赖，就是某一个字段不直接依赖主键，而是依赖 依赖主键的另一个字段。</p><p>解决方法：</p><p>学生表，学生编号为主键：</p><p>学生编号为主键：</p><table><thead><tr><th>学生编号</th><th>学生姓名</th><th>专业编号</th></tr></thead><tbody><tr><td>1001</td><td>白杰</td><td>2001</td></tr><tr><td>1002</td><td>杨春旺</td><td>2002</td></tr><tr><td>1003</td><td>张志伟</td><td>2001</td></tr></tbody></table><p>专业表，专业编号为主键：</p><table><thead><tr><th>专业编号</th><th>专业名称</th></tr></thead><tbody><tr><td>2001</td><td>计算机</td></tr><tr><td>2002</td><td>自动化</td></tr></tbody></table><p>以上设计是典型的一对多的设计，一存储在一张表中，多存储在一张表中，<strong>在多的那张表中添加外键指向一的一方</strong>。</p><h3 id="二、常见表关系" tabindex="-1"><a class="header-anchor" href="#二、常见表关系"><span>二、常见表关系</span></a></h3><h4 id="_1、一对一-用的不多" tabindex="-1"><a class="header-anchor" href="#_1、一对一-用的不多"><span>1、一对一 用的不多</span></a></h4><p>一个表和另一张表存在的关系是一对一，此种设计不常用，因为此种关系经常会将多张表合并为一张表。</p><p>举例：</p><p>学生信息表可以分为基本信息表和详细信息表。</p><p>可能有这种需求，需要给个某个账户对学生表的操作，但是有些私密信息又不能暴露，就可以拆分。</p><div class="language-undefined line-numbers-mode" data-highlighter="prismjs" data-ext="undefined" data-title="undefined"><pre><code><span class="line">第一种方案：分两张表存储，共享主键</span>
<span class="line">第二种方案：分两张表存储，外键唯一</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、一对多" tabindex="-1"><a class="header-anchor" href="#_2、一对多"><span>2、一对多</span></a></h4><p>第三范式的例子</p><p>两张表 外键建在多的一方</p><div class="language-undefined line-numbers-mode" data-highlighter="prismjs" data-ext="undefined" data-title="undefined"><pre><code><span class="line">分两张表存储，在多的一方添加外键，</span>
<span class="line">这个外键字段引用一的一方中的主键字段</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、多对多" tabindex="-1"><a class="header-anchor" href="#_3、多对多"><span>3、多对多</span></a></h4><p>第二范式的例子</p><div class="language-undefined line-numbers-mode" data-highlighter="prismjs" data-ext="undefined" data-title="undefined"><pre><code><span class="line">分三张表存储，在学生表中存储学生信息，在课程表中存储课程信息，</span>
<span class="line">在成绩表中存储学生和课程的关系信息</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="附录一-练习题答案" tabindex="-1"><a class="header-anchor" href="#附录一-练习题答案"><span>附录一：练习题答案</span></a></h2><p>1、查询‘01’号学生的姓名和各科成绩。 难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name sname<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name cname<span class="token punctuation">,</span>r<span class="token punctuation">.</span>score <span class="token keyword">from</span> student s</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">where</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、查询各个学科的平均成绩，最高成绩。 难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> course c</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id </span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、查询每个同学的最高成绩及科目名称。 难度：四颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>r<span class="token punctuation">.</span>score <span class="token keyword">from</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> <span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> scores r <span class="token keyword">where</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token punctuation">)</span> score <span class="token keyword">from</span> student s<span class="token punctuation">)</span>  t </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id <span class="token operator">and</span> r<span class="token punctuation">.</span>score <span class="token operator">=</span> t<span class="token punctuation">.</span>score</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> r<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4、查询所有姓张的同学的各科成绩。 难度：两颗星</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select s.id,s.name sname,c.name cname,r.score from student s</span>
<span class="line">left join scores r on r.s_id = s.id</span>
<span class="line">left join course c on c.id = r.c_id</span>
<span class="line">where s.name like &#39;张%&#39;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>5、查询每个课程最高分的同学信息。 难度：五颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> id <span class="token operator">in</span></span>
<span class="line"><span class="token punctuation">(</span></span>
<span class="line">    <span class="token keyword">select</span> <span class="token keyword">distinct</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">from</span></span>
<span class="line">        <span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> score <span class="token keyword">from</span> student s</span>
<span class="line">        <span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line">        <span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id </span>
<span class="line">        <span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name</span>
<span class="line">        <span class="token punctuation">)</span> t </span>
<span class="line">    <span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id <span class="token operator">and</span> t<span class="token punctuation">.</span>score <span class="token operator">=</span> r<span class="token punctuation">.</span>score</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>6、查询名字中含有“张”和‘李’字的学生信息和各科成绩 。 难度：两颗星</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">select s.id,s.name sname,c.name cname,r.score from student s</span>
<span class="line">left join scores r on r.s_id = s.id</span>
<span class="line">left join course c on c.id = r.c_id</span>
<span class="line">where s.name like &#39;%张%&#39; or s.name like &#39;%李%&#39;;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>7、查询平均成绩及格的同学的信息。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span></span>
<span class="line">  <span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> scores r </span>
<span class="line">	<span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>s_id </span>
<span class="line">	<span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">60</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>8、将学生按照总分数进行排名。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name sname<span class="token punctuation">,</span><span class="token function">sum</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> score <span class="token keyword">from</span> student s</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>9、查询数学成绩的最高分、最低分、平均分。 难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">min</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> <span class="token keyword">from</span> course c</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;数学&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>10、将各科目按照平均分排序。 难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> score <span class="token keyword">from</span> course c</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name <span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>11、查询老师的信息和他所带科目的平均分。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">from</span> teacher t</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>t_id </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>12、查询被“张楠”和‘‘李子豪’教的课程的最高分和平均分。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> </span>
<span class="line"><span class="token keyword">from</span> teacher t</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> t<span class="token punctuation">.</span>id <span class="token operator">=</span> c<span class="token punctuation">.</span>t_id </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>name<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token keyword">having</span> t<span class="token punctuation">.</span>name <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token string">&#39;张楠&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;李子豪&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>13、查询每个同学的最好成绩的科目名称。 难度：五颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> t<span class="token punctuation">.</span>id<span class="token punctuation">,</span>t<span class="token punctuation">.</span>sname<span class="token punctuation">,</span>r<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>score  <span class="token keyword">from</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name sname<span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> score </span>
<span class="line"><span class="token keyword">from</span> student s</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">)</span> t</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id <span class="token operator">and</span> r<span class="token punctuation">.</span>score <span class="token operator">=</span> t<span class="token punctuation">.</span>score</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> r<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id <span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>14、查询所有学生的课程及分数。 难度：一颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name sname<span class="token punctuation">,</span>c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name cname<span class="token punctuation">,</span>r<span class="token punctuation">.</span>score <span class="token keyword">from</span> student s</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>15、查询课程编号为1且课程成绩在60分以上的学生的学号和姓名。 难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> id <span class="token operator">in</span></span>
<span class="line"><span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> scores r <span class="token keyword">where</span> r<span class="token punctuation">.</span>c_id <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">and</span> r<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> <span class="token number">60</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>16、查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>score <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id <span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> score <span class="token keyword">from</span> scores r <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>s_id </span>
<span class="line"><span class="token punctuation">)</span> t <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>17、查询有不及格课程的同学信息。 难度：四颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token comment">-- 什么叫有不及格 ---》最低分数的科目如果不及格</span></span>
<span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> scores r <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>s_id </span>
<span class="line">	<span class="token keyword">HAVING</span> <span class="token function">min</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">60</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>18、求每门课程的学生人数。 难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span> t<span class="token punctuation">.</span>number <span class="token keyword">from</span> course c</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> </span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">select</span> r<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> number <span class="token keyword">from</span> scores r <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>c_id<span class="token punctuation">)</span> t</span>
<span class="line"><span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>c_id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course c </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>19、查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，按课程编号升序排列。 难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> score <span class="token keyword">from</span> course c </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id </span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> c<span class="token punctuation">.</span>id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name </span>
<span class="line"><span class="token keyword">order</span> <span class="token keyword">by</span> score <span class="token keyword">desc</span><span class="token punctuation">,</span>c<span class="token punctuation">.</span>id <span class="token keyword">asc</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>20、查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>t<span class="token punctuation">.</span>score <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">right</span> <span class="token keyword">join</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id<span class="token punctuation">,</span><span class="token function">avg</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span> score <span class="token keyword">from</span> scores r </span>
<span class="line">	<span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">having</span> score <span class="token operator">&gt;=</span> <span class="token number">70</span></span>
<span class="line"><span class="token punctuation">)</span> t <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> t<span class="token punctuation">.</span>s_id<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name sname<span class="token punctuation">,</span> <span class="token function">avg</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> score <span class="token keyword">from</span> student s</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name <span class="token keyword">having</span> <span class="token function">avg</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">70</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>21、查询有且仅有一门课程成绩在90分以上的学生信息； 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> scores r <span class="token keyword">where</span> r<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> <span class="token number">90</span></span>
<span class="line">	<span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>gander <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id </span>
<span class="line"><span class="token keyword">where</span> r<span class="token punctuation">.</span>score <span class="token operator">&gt;</span> <span class="token number">90</span></span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>gander <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>22、查询出只有三门课程的全部学生的学号和姓名。难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> scores r <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>gander <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id </span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>s<span class="token punctuation">.</span>gander <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>23、查询有不及格课程的课程信息 。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> course c <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>c_id <span class="token keyword">from</span> scores r <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line">	<span class="token keyword">HAVING</span> <span class="token function">min</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">60</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> r<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name <span class="token keyword">from</span> course c</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>c_id<span class="token punctuation">,</span>c<span class="token punctuation">.</span>name <span class="token keyword">HAVING</span> <span class="token function">min</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>24、检索至少选修5门课程的学生学号。难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student s <span class="token keyword">where</span> s<span class="token punctuation">.</span>id <span class="token operator">in</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">from</span> scores r <span class="token keyword">group</span> <span class="token keyword">by</span> r<span class="token punctuation">.</span>s_id <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">5</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name <span class="token keyword">having</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>25、查询没有学全所有课程的同学的信息 。难度：四颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> number <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name <span class="token keyword">having</span> number <span class="token operator">&lt;</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>26、查询学全所有课程的同学的信息。难度：四颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> number <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name <span class="token keyword">having</span> number <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">	<span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> course</span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>27、 查询各学生都选了多少门课。难度：两颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> number <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id</span>
<span class="line"><span class="token keyword">group</span> <span class="token keyword">by</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>28、查询课程名称为”java”，且分数低于60的学生姓名和分数。 难度：三颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name<span class="token punctuation">,</span>r<span class="token punctuation">.</span>score <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> s<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>s_id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> r<span class="token punctuation">.</span>c_id <span class="token operator">=</span> c<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">where</span> c<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;java&#39;</span> <span class="token operator">and</span> r<span class="token punctuation">.</span>score <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>29、查询学过”张楠”老师授课的同学的信息 。 难度：四颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> s<span class="token punctuation">.</span>id<span class="token punctuation">,</span>s<span class="token punctuation">.</span>name <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> teacher t <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id </span>
<span class="line"><span class="token keyword">where</span> t<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;张楠&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>30、查询没学过“张楠”老师授课的同学的信息 。 难度：五颗星</p><div class="language-sql line-numbers-mode" data-highlighter="prismjs" data-ext="sql" data-title="sql"><pre><code><span class="line"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">not</span> <span class="token operator">in</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> s<span class="token punctuation">.</span>id <span class="token keyword">from</span> student s </span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> scores r <span class="token keyword">on</span> r<span class="token punctuation">.</span>s_id <span class="token operator">=</span> s<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> course c <span class="token keyword">on</span> c<span class="token punctuation">.</span>id <span class="token operator">=</span> r<span class="token punctuation">.</span>c_id</span>
<span class="line"><span class="token keyword">left</span> <span class="token keyword">join</span> teacher t <span class="token keyword">on</span> c<span class="token punctuation">.</span>t_id <span class="token operator">=</span> t<span class="token punctuation">.</span>id </span>
<span class="line"><span class="token keyword">where</span> t<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;张楠&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="附表二-日期格式" tabindex="-1"><a class="header-anchor" href="#附表二-日期格式"><span>附表二：日期格式</span></a></h2><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%a</td><td>缩写星期名</td></tr><tr><td>%b</td><td>缩写月名</td></tr><tr><td>%c</td><td>月，数值</td></tr><tr><td>%D</td><td>带有英文前缀的月中的天</td></tr><tr><td>%d</td><td>月的天，数值(00-31)</td></tr><tr><td>%e</td><td>月的天，数值(0-31)</td></tr><tr><td>%f</td><td>微秒</td></tr><tr><td>%H</td><td>小时 (00-23)</td></tr><tr><td>%h</td><td>小时 (01-12)</td></tr><tr><td>%I</td><td>小时 (01-12)</td></tr><tr><td>%i</td><td>分钟，数值(00-59)</td></tr><tr><td>%j</td><td>年的天 (001-366)</td></tr><tr><td>%k</td><td>小时 (0-23)</td></tr><tr><td>%l</td><td>小时 (1-12)</td></tr><tr><td>%M</td><td>月名</td></tr><tr><td>%m</td><td>月，数值(00-12)</td></tr><tr><td>%p</td><td>AM 或 PM</td></tr><tr><td>%r</td><td>时间，12-小时（hh:mm:ss AM 或 PM）</td></tr><tr><td>%S</td><td>秒(00-59)</td></tr><tr><td>%s</td><td>秒(00-59)</td></tr><tr><td>%T</td><td>时间, 24-小时 (hh:mm:ss)</td></tr><tr><td>%U</td><td>周 (00-53) 星期日是一周的第一天</td></tr><tr><td>%u</td><td>周 (00-53) 星期一是一周的第一天</td></tr><tr><td>%V</td><td>周 (01-53) 星期日是一周的第一天，与 %X 使用</td></tr><tr><td>%v</td><td>周 (01-53) 星期一是一周的第一天，与 %x 使用</td></tr><tr><td>%W</td><td>星期名</td></tr><tr><td>%w</td><td>周的天 （0=星期日, 6=星期六）</td></tr><tr><td>%X</td><td>年，其中的星期日是周的第一天，4 位，与 %V 使用</td></tr><tr><td>%x</td><td>年，其中的星期一是周的第一天，4 位，与 %v 使用</td></tr><tr><td>%Y</td><td>年，4 位</td></tr><tr><td>%y</td><td>年，2 位</td></tr></tbody></table>`,457),l=[t];function o(c,i){return a(),n("div",null,l)}const r=s(e,[["render",o],["__file","mysql-base.html.vue"]]),d=JSON.parse('{"path":"/mysql1/mysql-base.html","title":"MySql入门","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"第一章 Mysql数据库","slug":"第一章-mysql数据库","link":"#第一章-mysql数据库","children":[{"level":3,"title":"1、数据库的概念","slug":"_1、数据库的概念","link":"#_1、数据库的概念","children":[]},{"level":3,"title":"2、mysql的概念","slug":"_2、mysql的概念","link":"#_2、mysql的概念","children":[]},{"level":3,"title":"3、安装mysql","slug":"_3、安装mysql","link":"#_3、安装mysql","children":[]},{"level":3,"title":"4、安装navicat","slug":"_4、安装navicat","link":"#_4、安装navicat","children":[]}]},{"level":2,"title":"第二章、SQL","slug":"第二章、sql","link":"#第二章、sql","children":[{"level":3,"title":"1、sql分类","slug":"_1、sql分类","link":"#_1、sql分类","children":[]},{"level":3,"title":"2、DCL图形化界面以及命令","slug":"_2、dcl图形化界面以及命令","link":"#_2、dcl图形化界面以及命令","children":[]},{"level":3,"title":"3、DDL(数据定义语言)语法","slug":"_3、ddl-数据定义语言-语法","link":"#_3、ddl-数据定义语言-语法","children":[]},{"level":3,"title":"4、DML(数据操作语言)语法（重要）","slug":"_4、dml-数据操作语言-语法-重要","link":"#_4、dml-数据操作语言-语法-重要","children":[]}]},{"level":2,"title":"第三章 DQL数据查询语言","slug":"第三章-dql数据查询语言","link":"#第三章-dql数据查询语言","children":[{"level":3,"title":"一、构建数据库","slug":"一、构建数据库","link":"#一、构建数据库","children":[]},{"level":3,"title":"二、单表查询","slug":"二、单表查询","link":"#二、单表查询","children":[]}]},{"level":2,"title":"第四章 多表查询","slug":"第四章-多表查询","link":"#第四章-多表查询","children":[{"level":3,"title":"一、笛卡尔积","slug":"一、笛卡尔积","link":"#一、笛卡尔积","children":[]},{"level":3,"title":"二、内连接","slug":"二、内连接","link":"#二、内连接","children":[]},{"level":3,"title":"三、外连接（常用）","slug":"三、外连接-常用","link":"#三、外连接-常用","children":[]},{"level":3,"title":"四、全连接","slug":"四、全连接","link":"#四、全连接","children":[]},{"level":3,"title":"五、子查询","slug":"五、子查询","link":"#五、子查询","children":[]},{"level":3,"title":"五、sql大练兵","slug":"五、sql大练兵","link":"#五、sql大练兵","children":[]}]},{"level":2,"title":"第五章 MySQL常用函数介绍","slug":"第五章-mysql常用函数介绍","link":"#第五章-mysql常用函数介绍","children":[{"level":3,"title":"一、聚合函数","slug":"一、聚合函数","link":"#一、聚合函数","children":[]},{"level":3,"title":"二、数值型函数","slug":"二、数值型函数","link":"#二、数值型函数","children":[]},{"level":3,"title":"三、字符串函数","slug":"三、字符串函数","link":"#三、字符串函数","children":[]},{"level":3,"title":"四、日期和时间函数","slug":"四、日期和时间函数","link":"#四、日期和时间函数","children":[]},{"level":3,"title":"五、加密函数","slug":"五、加密函数","link":"#五、加密函数","children":[]},{"level":3,"title":"六、流程控制函数","slug":"六、流程控制函数","link":"#六、流程控制函数","children":[]}]},{"level":2,"title":"第六章 数据库设计","slug":"第六章-数据库设计","link":"#第六章-数据库设计","children":[{"level":3,"title":"一、三范式","slug":"一、三范式","link":"#一、三范式","children":[]},{"level":3,"title":"二、常见表关系","slug":"二、常见表关系","link":"#二、常见表关系","children":[]}]},{"level":2,"title":"附录一：练习题答案","slug":"附录一-练习题答案","link":"#附录一-练习题答案","children":[]},{"level":2,"title":"附表二：日期格式","slug":"附表二-日期格式","link":"#附表二-日期格式","children":[]}],"git":{},"filePathRelative":"mysql1/mysql-base.md","excerpt":"\\n<h2>第一章 Mysql数据库</h2>\\n<h3>1、数据库的概念</h3>\\n<ul>\\n<li>数据库是【按照数据结构来组织、存储和管理数据的仓库】。是一个长期存储在计算机内的、有组织的、可共享的、统一管理的大量数据的集合。</li>\\n<li>数据对于公司来说是最宝贵的财富之一，而程序员的工作就是对数据的管理，包括运算、流转、存储、展示等，数据库的最重要的功能就是【存储数据】，绝大部分的数据需要进行持久化，长期保存，而数据库就可以很好的帮助我们完成这个工作</li>\\n</ul>\\n<h3>2、mysql的概念</h3>\\n<ul>\\n<li>MySQL是一个【关系型数据库管理系统】，由瑞典【MySQL AB】公司开发，属于 【Oracle】旗下产品。MySQL 是最流行的【关系型数据库管理系统】之一，在 【WEB】应用方面，MySQL是最好的 【RDBMS】 (Relational Database Management System，关系数据库管理系统) 应用软件之一。</li>\\n<li>MySQL是一种关系型数据库管理系统，关系数据库将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li>\\n<li>MySQL所使用的 【SQL 语言是】用于访问【数据库】的最常用标准化语言。MySQL 软件采用了双授权政策，分为社区版和商业版，由于其体积小、速度快、总体拥有成本低，尤其是【开放源码】这一特点，一般中小型网站的开发都选择 MySQL 作为网站数据库。</li>\\n</ul>"}');export{r as comp,d as data};
