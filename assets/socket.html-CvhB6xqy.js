import{_ as s,c as n,o as a,a as t}from"./app-us7mUOvw.js";const e={},p=t(`<h1 id="java网络编程" tabindex="-1"><a class="header-anchor" href="#java网络编程"><span>java网络编程</span></a></h1><p>网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。程序之间可以通信，互相发送消息，网络编程其实是有难度的，但是Java作为一个面向对象的语言，帮助我们屏蔽了大量的复杂实现，我们学起来，就简单了。</p><p>Java中提供了 java.net 包中 J2SE 的 API 包含有类和接口，它们提供低层次的通信细节。你可以直接使用这些类和接口，来专注于解决问题，而不用关注通信细节。当然学习这些之前，我们需要扫扫盲，学习一些网络的基本知识。</p><h2 id="一、网络基本概念" tabindex="-1"><a class="header-anchor" href="#一、网络基本概念"><span>一、网络基本概念</span></a></h2><h3 id="_1、网卡" tabindex="-1"><a class="header-anchor" href="#_1、网卡"><span>1、网卡</span></a></h3><p>网卡是一块被设计用来允许计算机在计算机网络上进行通讯的计算机硬件。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210914114831443.d1235758.png" alt="image-20210914114831443"></p><p>每一个网卡都有一个被称为MAC地址的独一无二的48位串行号，它被写在卡上的一块内存中。在网络上的每一个计算机都必须拥有一个独一无二的MAC地址。</p><p>没有任何两块被生产出来的网卡拥有同样的地址。这是因为电气电子工程师协会负责为网络接口控制器（网卡）销售商分配唯一的MAC地址。</p><h3 id="_2、mac地址、ip地址" tabindex="-1"><a class="header-anchor" href="#_2、mac地址、ip地址"><span>2、MAC地址、IP地址</span></a></h3><p>window电脑在命令行模式下输入命令：</p><p>怎么进入命令行模式，按 win+R，输入cmd即可</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150521017.41bf0fc3.png" alt="image-20210813150521017"></p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">ipconfig <span class="token parameter variable">-all</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>会看到：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">无线局域网适配器 WLAN:</span>
<span class="line"></span>
<span class="line">   描述. <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">:</span> Intel<span class="token punctuation">(</span>R<span class="token punctuation">)</span> Wi-Fi <span class="token number">6</span> AX201 160MHz</span>
<span class="line">   物理地址. <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">:</span> 8C-C6-81-54-FF-9C</span>
<span class="line">   IPv4 地址 <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">:</span> <span class="token number">192.168</span>.0.109<span class="token punctuation">(</span>首选<span class="token punctuation">)</span></span>
<span class="line">   子网掩码  <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span> <span class="token builtin class-name">:</span> <span class="token number">255.255</span>.255.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中物理地址指的就是MAC地址、IPv4 地址就是IP。</p><p>MAC地址也叫物理地址和局域网地址，主要用于确认网上设备的地址，类似于<code>身份证号</code>，具有唯一标识，每一个网卡制作完成之后就带有一个MAC地址，永远都不会改变。</p><p>IP地址，类似于你的现住址，是标记你在网络中的具体位置，一个网卡的IP地址是可以改变的。</p><p>IP地址的表示方式：32位</p><p>原始</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">01111111.00000000.00000000.00000001</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>十进制表示</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">127.0.0.1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3、计算机之间是怎么发送数据的" tabindex="-1"><a class="header-anchor" href="#_3、计算机之间是怎么发送数据的"><span>3、计算机之间是怎么发送数据的</span></a></h3><p>我们不是网络的通识教育，所以这里的讲解，以简单、通俗易懂为主。</p><h4 id="_1-双绞线" tabindex="-1"><a class="header-anchor" href="#_1-双绞线"><span>（1） 双绞线</span></a></h4><p>如果只是两台计算机，我们就可以使用双绞线（网线）连载一起，就能互相发送消息，组成一个小网络。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150542149.5bd31bc4.png" alt="image-20210813150542149"></p><h4 id="_2-交换机" tabindex="-1"><a class="header-anchor" href="#_2-交换机"><span>（2） 交换机</span></a></h4><p>但是我们的网络不是由两台电脑组成的，我们经常需要将几十台上百台电脑组织起来形成一个局域网，此时一个新的设备就出现了叫做交换机（switch）。</p><p>交换机可以记录每一个设备的地址和接口的对应关系，从而实现端对端的信息传输。</p><p>思考问题，交换机要将内容发送给指定的计算机，那么内部一定维护了一张表，记录了哪个电脑链接了我的哪个口。交换机只能识别MAC地址。MAC地址是【物理地址】，交换机对【IP地址】并不感兴趣。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150631723.de6ee244.png" alt="image-20210813150631723"></p><p>思考一个问题：</p><p>交换机是怎么知道这个表的：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150706819.ab18c5a2.png" alt="image-20210813150706819"></p><p>交换机效率比较高，而且可以进行桥接。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150719333.d55040cc.png" alt="image-20210813150719333"></p><h4 id="_3-路由器" tabindex="-1"><a class="header-anchor" href="#_3-路由器"><span>（3）路由器</span></a></h4><p>思考：使用交换机可以建立一个超大型的网络吗？</p><p>一般的交换机的地址表也就能存个几千个地址，当网络内的设备多起来以后，只要交换机找不到对应设备就会广播，地址表如果满了，新地址还会覆盖旧地址就会导致重新寻找效率比较低。所以又引入了一个设备叫【路由器】，谁也听过的一个设备，一般家里都有。</p><p>注意：路由器不是猫，猫是调制解调器。它能把计算机的【数字信号】翻译成可沿【普通电话线/光纤】传送的模拟信号，而这些模拟信号又可被线路另一端的另一个调制解调器接收，并译成计算机可懂的【语言】。但是运营商送你的盒子一般既有调制解调器的功能，也有路由器的功能，只不过路由功能不太好。</p><p>基于路由器，我们提出了以下的设计：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150741372.112a5e87.png" alt="image-20210813150741372"></p><p>这里就有了网络的概念了。以上的几种，哪怕是交换机的桥接也没有涉及IP地址这个概念，都是基于MAC地址进行数据传输。这里有了网络这个抽象概念之后IP地址就应运而生了，IP地址只是用来表示计算机的网络位置，它处于哪一个网络。IP地址和子网掩码共同帮助我们定位一个计算机在网络中的位置。</p><p>IP地址和子网掩码其实是个32位的二进制数字：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150801640.dbe09114.png" alt="image-20210813150801640"></p><p>此时发送信息就会再包一个消息的头部</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150819122.b8edb85e.png" alt="image-20210813150819122"></p><p>家用的路由器，有一个WAN口，有好几个LAN口，wan口用来连接互联网端，LAN用来连接家庭设备。信息在网络传播，依然需要依靠MAC地址，这里有一个ARP协议，就是用来通过IP查找MAC地址的。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150835776.b0b1527b.png" alt="image-20210813150835776"></p><p>来一个栗子，192.168.100.100 发送信息到 192.168.200.101</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813150854976.50b2aa80.png" alt="image-20210813150854976"></p><blockquote><p>这种因特网IP地址中特定的专用地址是不作分配的：</p></blockquote><p>①主机号全为“0”。不论哪一类网络，主机号全为“0”表示指向本网，常用在路由表中；</p><p>②主机号全为“1”。主机号全为“1”表示广播地址，向特定的所在网上的所有主机发送数据包。</p><p>IP地址分为五类，A类保留给政府机构，B类分配给中等规模的公司，C类分配给任何需要的人，D类用于组播，E类用于实验，各类可容纳的地址数目不同。</p><p>A、B、C三类IP地址的特征：当将IP地址写成二进制形式时，A类地址的第一位总是O，B类地址的前两位总是10，C类地址的前三位总是110。</p><blockquote><p>A类地址</p></blockquote><ol><li>A类地址第1字节为网络地址，其它3个字节为主机地址。</li><li>A类地址范围：1.0.0.1—126.255.255.254</li><li>A类地址中的私有地址和保留地址，10.X.X.X是私有地址（所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）。范围（10.0.0.0-10.255.255.255），127.X.X.X是保留地址，用做循环测试用的。</li></ol><blockquote><p>B类地址</p></blockquote><ol><li>B类地址第1字节和第2字节为网络地址，其它2个字节为主机地址。</li><li>B类地址范围：128.0.0.1—191.255.255.254。</li><li>B类地址的私有地址和保留地址，172.16.0.0—172.31.255.255是私有地址。</li></ol><blockquote><p>C类地址</p></blockquote><ol><li>C类地址第1字节、第2字节和第3个字节为网络地址，第4个字节为主机地址。另外第1个字节的前三位固定为110。</li><li>C类地址范围：192.0.0.1—223.255.255.254。</li><li>C类地址中的私有地址，192.168.X.X是私有地址。(192.168.0.0-192.168.255.255)</li></ol><blockquote><p>D类地址</p></blockquote><ol><li>D类地址不分网络地址和主机地址，它的第1个字节的前四位固定为1110。</li><li>D类地址范围：224.0.0.1—239.255.255.254</li></ol><blockquote><p>E类地址</p></blockquote><ol><li>E类地址不分网络地址和主机地址，它的第1个字节的前五位固定为11110。</li><li>E类地址范围：240.0.0.1—255.255.255.254</li></ol><h3 id="_4、域名" tabindex="-1"><a class="header-anchor" href="#_4、域名"><span>4、域名</span></a></h3><p>你真的能记住每个网站的IP地址吗？域名就是IP的名字，如果IP是手机号，域名就是名字。</p><p>我们可以去阿里云等云服务提供商购买域名。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813151029438.3d7b85a9.png" alt="image-20210813151029438"></p><p>我们购买了域名之后，需要在云服务厂商进行域名的配置，让域名指向一个拥有公网IP地址的服务器，以后访问域名就能访问到我们的服务器了。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813151052978.b18af4a1.png" alt="image-20210813151052978"></p><h4 id="_1-dns服务器" tabindex="-1"><a class="header-anchor" href="#_1-dns服务器"><span>（1）DNS服务器</span></a></h4><table><thead><tr><th>名称</th><th>介绍</th><th>DNS地址</th></tr></thead><tbody><tr><td>114DNS</td><td>国内用户量最大的老牌DNS</td><td>首选：114.114.114.114 备选：114.114.114.115</td></tr><tr><td>DNSPod DNS</td><td>中国最大的第三方域名服务商，全球排名第四位</td><td>首选：119.29.29.29 备选：182.254.116.116</td></tr><tr><td>阿里 DNS</td><td>阿里公共DNS是阿里巴巴集团推出的DNS递归解析系统</td><td>首选：223.5.5.5 备选：223.6.6.6</td></tr></tbody></table><h4 id="_2-域名的分类" tabindex="-1"><a class="header-anchor" href="#_2-域名的分类"><span>（2）域名的分类</span></a></h4><table><thead><tr><th>分类标准</th><th>分类详情</th></tr></thead><tbody><tr><td>语种分类</td><td>中文：百度.com 、百度.中国、baidu.中国 英文：baidu.com</td></tr><tr><td>地区分类</td><td>中国大陆顶级域名是.cn 美国国家顶级域名是.us 日本国家顶级域名是.jp</td></tr><tr><td>机构分类</td><td>.com 商业性的机构或公司 .org 非盈利的组织、团体 https://apache.org/ .gov 政府部门 http://www.gov.cn/ https://www.shanghai.gov.cn/</td></tr><tr><td>层级分类</td><td>顶级域名（一级域名)：baidu.com 二级域名：jingyan.baidu.com www.baidu.com</td></tr></tbody></table><h2 id="二、数据的传输" tabindex="-1"><a class="header-anchor" href="#二、数据的传输"><span>二、数据的传输</span></a></h2><h3 id="_1、网络七层参考模型" tabindex="-1"><a class="header-anchor" href="#_1、网络七层参考模型"><span>1、网络七层参考模型</span></a></h3><p>讲这个之前我们先聊聊历史：</p><p>一般来说，我们认为互联网起源于阿帕网（ARPANET），最早的阿帕网是非常简陋的，它使用网络控制协议（NetWork Control Protocol，缩写NCP）链接不同的计算机。在构建阿帕网之后，其他传输协议的研究慢慢的已经开始展开，NCP诞生两年后，NCP的开发者温特-瑟夫和罗伯特-卡恩一起开发了阿帕网的下一代协议，并在1974年发表了以分组、序列化、流量控制、超时和容错等为核心的一种新的网络协议奠定了TCP/IP协议的基础。</p><p>与此同时，一个叫【ISO】『 国际标准化组织(International Organization for Standardization， <em>ISO</em>) 』的组织发现，计算机设备的互联互通是一个值得研究的新领域，于是这个组织出面和众多厂商游说：“我们一起出一个网络互联互通的标准吧，这样大家都遵守这个标准，我们一起把这件事情搞大，大家就都有钱赚了”，于是ISO召集了一帮人认真的开始研究网络联通，这件事情还真搞出了一个非常强悍的标准，这就是【OSI（Open System Interconnection Reference Model）参考模型】。不过等他发布的时候时候，该组织惊讶的发现，满世界都在用一个叫【TCP/IP协议栈】的东西，而且跟OSI没有半毛钱的关系。</p><p>事实上我们前面提及的两位牛人卡恩和瑟夫一直都不遗余力的推广TCP/IP，TCP/IP成功也不是偶然的，而是综合了其他几个因素:</p><ul><li>它是免费的或者仅仅收少量的费用，这就是它的使用人群，非常的广；</li><li>TCP/IP搭上了unix这辆快车，并很快推出了基于【套接字】的实际编程接口。</li><li>TCP/IP来源于实际需求，它确实解决了当下的网络互连标准。</li></ul><p>我们接下来看看ISO参考模型和TCP/IP协议栈的对应关系。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813151107369.432f1bf1.png" alt="image-20210813151107369"></p><table><thead><tr><th>层</th><th>功能</th><th>协议</th></tr></thead><tbody><tr><td>应用层</td><td>提供应用程序之间的通信。</td><td>TFTP，HTTP，SNMP，FTP，SMTP，DNS，Telnet</td></tr><tr><td>表示层</td><td>处理数据格式，数据加密和压缩等。</td><td>没有协议</td></tr><tr><td>会话层</td><td>建立、管理、终止两主机的会话。</td><td>没有协议</td></tr><tr><td>传输层</td><td>建立主机的端到端连接。</td><td>TCP，UDP</td></tr><tr><td>网络层</td><td>路径选择。</td><td>ICMP，RIP，OSPF，BGP，IGMP，IP</td></tr><tr><td>数据链路层</td><td>负责两个相邻结点之间的数据传输。</td><td>SLIP，CSLIP，PPP，ARP，RARP，MTU</td></tr><tr><td>物理层</td><td>使原始的数据比特流能在物理媒介上传输。</td><td>ISO2110，IEEE802，IEEE802.2</td></tr></tbody></table><p>其实我们写代码是没必要关心具体的底层实现逻辑的，系统已经给我们开放了Socket的套接字编程接口，我们能够很简单的用Socket进行开发，当然我们以后可能会接触很多机遇，Http协议的应用层的开发，其实其底层也是Socket。</p><h3 id="_2、数据是怎么传输的" tabindex="-1"><a class="header-anchor" href="#_2、数据是怎么传输的"><span>2、数据是怎么传输的</span></a></h3><h4 id="_1-tcp协议" tabindex="-1"><a class="header-anchor" href="#_1-tcp协议"><span>（1）TCP协议</span></a></h4><p>TCP(Transmission Control Protocol 传输控制协议)是一种面向连接(连接导向)的、可靠的、 基于IP的传输层协议。提供了流量控制、拥塞控制、超时重传等机制。</p><p>TCP是面向链接的，建立链接需要三次握手，三次握手是为了保障双方都知道对方有发送和接收报文的能力。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813164457689.41dbed69.png" alt="image-20210813164457689"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813151258311.6ecdec4a.png" alt="image-20210813151258311"></p><p>断开链接是需要一个四次挥手的过程：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210813151313108.56542f6d.png" alt="image-20210813151313108"></p><h4 id="_2-udp协议" tabindex="-1"><a class="header-anchor" href="#_2-udp协议"><span>（2）UDP协议</span></a></h4><p>UDP(User Datagram Protocol，用户数据报协议)是一种<strong>传输层</strong>的协议，它提供<strong>不可靠</strong>服务，它是无连接的，所以<strong>不存在建立连接需要的时延</strong>。</p><p>有些场景如直播、电话会议，<strong>能容一些数据的丢失，但是不能允许有较大的时延</strong>。</p><p>TCP需要在端系统中<strong>维护连接</strong>状态，需要一定的开销。此连接装入包括接收和发送缓存，拥塞控制参数和序号与确认号的参数。UCP不维护连接状态，也不跟踪这些参数，开销小。空间和时间上都具有优势。UDP<strong>提供尽最大努力的交付</strong>，不保证可靠交付。</p><p>UDP常用一次性传输比较少量数据的网络应用，如DNS,SNMP等，因为对于这些应用，若是采用TCP，为连接的创建，维护和拆除带来不小的开销。UDP也常用于多媒体应用（如IP电话，实时视频会议，流媒体等）数据的可靠传输对他们而言并不重要，TCP的拥塞控制会使他们有较大的延迟，也是不可容忍的</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210914100950338.4e02ff87.png" alt="image-20210914100950338"></p><h2 id="三、socket-编程" tabindex="-1"><a class="header-anchor" href="#三、socket-编程"><span>三、Socket 编程</span></a></h2><p>Socket编程是在TCP/IP上的网络编程，但是Socket在上述模型的什么位置呢。这个位置被一个天才的理论家或者是抽象的计算机大神提出并且安排出来</p><p>我们可以发现Socket就在应用程序的传输层和应用层之间，设计了一个Socket抽象层，传输层的底一层的服务提供给Socket抽象层，Socket抽象层再提供给应用层，问题又来了，应用层和Socket抽象层之间和传输层，网络层之间如何通讯的呢，了解这个之前，我们还是回到原点</p><p>要想理解Socket编程怎么通过Socket关键词实现服务器和客户端通讯，必须得先了解TCP/IP是怎么通讯的，在这个的基础上再去理解Socket的握手通讯</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210914113006905.637db4b8.png" alt="image-20210914113006905"></p><p>套接字使用TCP提供了两台计算机之间的通信机制。 客户端程序创建一个套接字，并尝试连接服务器的套接字。</p><p>当连接建立时，服务器会创建一个 Socket 对象。客户端和服务器现在可以通过对 Socket 对象的写入和读取来进行通信。</p><p>java.net.Socket 类代表一个套接字，并且 java.net.ServerSocket 类为服务器程序提供了一种来监听客户端，并与他们建立连接的机制。</p><p>以下步骤在两台计算机之间使用套接字建立TCP连接时会出现：</p><ul><li>服务器实例化一个 ServerSocket 对象，表示通过服务器上的端口通信。</li><li>服务器调用 ServerSocket 类的 accept() 方法，该方法将一直等待，直到客户端连接到服务器上给定的端口。</li><li>服务器正在等待时，一个客户端实例化一个 Socket 对象，指定服务器名称和端口号来请求连接。</li><li>Socket 类的构造函数试图将客户端连接到指定的服务器和端口号。如果通信被建立，则在客户端创建一个 Socket 对象能够与服务器进行通信。</li><li>在服务器端，accept() 方法返回服务器上一个新的 Socket 引用，该 Socket 连接到客户端的 Socket。</li></ul><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210914114356892.1b92a4f7.png" alt="image-20210914114356892"></p><p>在学习Socket编程后我们先学习几个工具类：</p><h3 id="_1、inetaddress" tabindex="-1"><a class="header-anchor" href="#_1、inetaddress"><span>1、InetAddress</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Internet Protocol (IP) address</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_1-主机名" tabindex="-1"><a class="header-anchor" href="#_1-主机名"><span>（1）主机名</span></a></h4><p>这个类表示互联网协议(IP)地址。下面列出了 Socket 编程时比较有用的方法：</p><p>【主机名】就是计算机的名字（计算机名），这个名字可以随时更改，从我的电脑-属性的计算机名就可更改。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210914101034815.946342dc.png" alt="image-20210914101034815"></p><blockquote><p>主机名和域名的联系与区别如下：</p></blockquote><p>1、Internet域名是Internet网络上的一个服务器或一个网络系统的名字,在全世界,没有重复的域名。域名的范围要比主机名大。一个域名下可以有多个主机名,域名下还可以有子域名。例如,域名cnwg.cn下,有主机server1和server2,其主机全名就是server1.cnwg.cn和server2.cnwg.cn</p><p>2、主机名的含义是机器本身的名字，域名是方面记录IP地址才做的一种IP映射；二者有共性：都能对应到一个唯一的IP上，从应用场景上可以这么简单理解二者的区别：主机名用于局域网中；域名用于公网中。</p><h4 id="_2-环回地址" tabindex="-1"><a class="header-anchor" href="#_2-环回地址"><span>（2）环回地址</span></a></h4><p>环回地址是主机用于向自身发送通信的一个特殊地址（也就是一个特殊的目的地址）。访问本机的环回地址可以绕开TCP/IP协议栈的下层。（也就是说：不用再通过什么链路层、物理层、以太网传出去了，而是可以直接在自己的网络层、运输层进行处理了）</p><p>IPv4的环回地址为：127.0.0.0到127.255.255.255都是环回地址（只是有两个特殊的保留），此地址中的任何地址都不会出现在网络中，网络号为127的地址根本就不是一个网络地址（因为产生的IP数据报就不会到达外部网络接口中，是不离开主机的包）</p><p>当操作系统初始化本机的TCP/IP协议栈时，设置协议栈本身的IP地址为127.0.0.1（保留地址）。当IP层接收到目的地址为127.0.0.1（准确的说是：网络号为127的IP）的数据包时，不调用网卡驱动进行二次封装，而是立即转发到本机IP层进行处理，由于不涉及底层操作。因此，ping 127.0.0.1一般作为测试本机TCP/IP协议栈正常与否的判断之一。</p><p>所以说：127.0.0.1是保留地址之一，只是被经常的使用，来检验本机TCP/IP协议栈而已。如果我们可以ping通的话，就说明：本机的网卡和IP协议安装都没有问题。（跟我们当前主机有没有联网没有一点关系）</p><h4 id="_3-localhost" tabindex="-1"><a class="header-anchor" href="#_3-localhost"><span>（3）localhost</span></a></h4><p>localhost是个域名，但是是个保留域名，是给回路网络接口（loopback）的一个标准主机名，相对应的IP地址为127.0.0.1（IPv4）和[::1]（IPv6）。它可以被配置为任意的IP地址（也就是说，可以通过hosts这个文件进行更改的），不过默认情况下都指向： 127.0.0.1。</p><p>本机IP，我们可以理解为本机有三块网卡，一块网卡叫做loopback（虚拟网卡），一块叫做ethernet（有线网卡），一块叫做wlan（你的无线网卡）。</p><h4 id="_4-inetaddress的使用" tabindex="-1"><a class="header-anchor" href="#_4-inetaddress的使用"><span>（4）InetAddress的使用</span></a></h4><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th><th></th></tr></thead><tbody><tr><td>1</td><td>static InetAddress getByAddress(byte[] addr)</td><td>在给定原始 IP 地址的情况下，返回 InetAddress 对象。</td></tr><tr><td>2</td><td>static InetAddress getByAddress(String host, byte[] addr)</td><td>根据提供的主机名和 IP 地址创建 InetAddress。</td></tr><tr><td>3</td><td>static InetAddress getByName(String host)</td><td>在给定主机名的情况下确定主机的 IP 地址。</td></tr><tr><td>4</td><td>String getHostAddress()</td><td>返回 IP 地址字符串（以文本表现形式）。</td></tr><tr><td>5</td><td>String getHostName()</td><td>获取此 IP 地址的主机名。</td></tr><tr><td>6</td><td>static InetAddress getLocalHost()</td><td>返回本地主机。</td></tr><tr><td>7</td><td>String toString()</td><td>将此 IP 地址转换为 String。</td></tr></tbody></table><hr><p>我们可以写个代码找到百度的IP：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">InetAddress</span> inetAddress <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inetAddress<span class="token punctuation">.</span><span class="token function">getHostAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、url" tabindex="-1"><a class="header-anchor" href="#_2、url"><span>2、URL</span></a></h3><h4 id="_1-简介" tabindex="-1"><a class="header-anchor" href="#_1-简介"><span>（1）简介</span></a></h4><p>URL（Uniform Resource Locator）中文名为统一资源定位符，咱们的网页地址也是一种URL。表示为互联网上的资源，如网页或者 FTP 地址。我们可以使用URL很方便的定位到一个资源，URL 可以分为如下几个部分。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">protocol://host:port/path?query#fragment</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>protocol(协议)可以是 HTTP、HTTPS、FTP 和 File，port 为端口号，path为文件路径及文件名。</p><p>这个一个QQ的下载URL：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">https://down.qq.com/qqweb/PCQQ/PCQQ_EXE/PCQQ2021.exe</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>URL 解析：</p><ul><li>协议为(protocol)：https</li><li>主机为(host:port)：down.qq.com</li><li>端口号为(port) 443 ，以上URL实例并未指定端口，因为 HTTP 协议默认的端口号为443。</li><li>文件路径为(path)：/qqweb/PCQQ/PCQQ_EXE/PCQQ2021.exe</li></ul><p>当然本地文件也可以使用URL来表示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">file<span class="token operator">:</span><span class="token operator">/</span><span class="token comment">//D:/a.txt</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-url-类方法" tabindex="-1"><a class="header-anchor" href="#_2-url-类方法"><span>（2）URL 类方法</span></a></h4><p>在java.net包中定义了URL类，该类用来处理有关URL的内容。对于URL类的创建和使用，下面分别进行介绍。</p><p>java.net.URL提供了丰富的URL构建方式，并可以通过java.net.URL来获取资源。</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法描述</th><th></th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">public URL(String protocol, String host, int port, String file) throws MalformedURLException</td><td>通过给定的参数(协议、主机名、端口号、文件名)创建URL。</td></tr><tr><td style="text-align:left;">2</td><td style="text-align:left;">public URL(String protocol, String host, String file) throws MalformedURLException</td><td>使用指定的协议、主机名、文件名创建URL，端口使用协议的默认端口。</td></tr><tr><td style="text-align:left;">3</td><td style="text-align:left;">public URL(String url) throws MalformedURLException</td><td>通过给定的URL字符串创建URL</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">public URL(URL context, String url) throws MalformedURLException</td><td>使用基地址和相对URL创建</td></tr></tbody></table><p>URL类中包含了很多方法用于访问URL的各个部分，具体方法及描述如下：</p><table><thead><tr><th style="text-align:left;">序号</th><th style="text-align:left;">方法</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">public String getPath()</td><td>返回URL路径部分。</td></tr><tr><td style="text-align:left;">4</td><td style="text-align:left;">public int getPort()</td><td>返回URL端口部分</td></tr><tr><td style="text-align:left;">5</td><td style="text-align:left;">public int getDefaultPort()</td><td>返回协议的默认端口号。</td></tr><tr><td style="text-align:left;">6</td><td style="text-align:left;">public String getProtocol()</td><td>返回URL的协议</td></tr><tr><td style="text-align:left;">7</td><td style="text-align:left;">public String getHost()</td><td>返回URL的主机</td></tr><tr><td style="text-align:left;">8</td><td style="text-align:left;">public String getFile()</td><td>返回URL文件名部分</td></tr><tr><td style="text-align:left;">10</td><td style="text-align:left;">public URLConnection openConnection() throws IOException</td><td>打开一个URL连接，并运行客户端访问资源。</td></tr></tbody></table><p>比如我们想访问文件，还可以使用这种方式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">URL</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;file:///D:/a.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">URLConnection</span> urlConnection <span class="token operator">=</span> resource<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果我们把url换成QQ的文件下载地址，我们就可以使用java代码下载网络文件了。</p><p>代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">URL</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">&quot;https://down.qq.com/qqweb/PCQQ/PCQQ_EXE/PCQQ2021.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">URLConnection</span> urlConnection <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> urlConnection<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">&quot;D:/QQ.exe&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、serversocket-类的方法" tabindex="-1"><a class="header-anchor" href="#_3、serversocket-类的方法"><span>3、ServerSocket 类的方法</span></a></h3><p>服务器应用程序通过使用 java.net.ServerSocket 类以获取一个端口,并且侦听客户端请求。</p><p>ServerSocket 类有四个构造方法：</p><p>backlog是一个队列长度，我们可以简单的把他理解为最多允许多少个人排队握手。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th><th></th></tr></thead><tbody><tr><td>1</td><td>public ServerSocket(int port)</td><td>创建绑定到特定端口的服务器套接字</td></tr><tr><td>2</td><td>public ServerSocket(int port, int backlog)</td><td>利用指定的 backlog 创建服务器套接字并将其绑定到指定的本地端口号</td></tr><tr><td>3</td><td>public ServerSocket(int port, int backlog, InetAddress address)</td><td>使用指定的端口、侦听 backlog 和要绑定到的本地 IP 地址创建服务器</td></tr><tr><td>4</td><td>public ServerSocket() throws IOException</td><td>创建非绑定服务器套接字</td></tr></tbody></table><p>创建非绑定服务器套接字。 如果 ServerSocket 构造方法没有抛出异常，就意味着你的应用程序已经成功绑定到指定的端口，并且侦听客户端请求。</p><p>这里有一些 ServerSocket 类的常用方法：</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td>public int getLocalPort() 返回此套接字在其上侦听的端口。</td></tr><tr><td>2</td><td>public Socket accept() 侦听并接受到此套接字的连接。</td></tr><tr><td>4</td><td>public void bind(SocketAddress host, int backlog) 将 ServerSocket 绑定到特定地址（IP 地址和端口号）。</td></tr></tbody></table><hr><p>SocketAddress 指一个Socket的地址，它和InetAddress 不同，Socket网络地址除了需要主机名或IP之外，还需要一个用于通信的端口：</p><p>所以我们看到它的一个子类：InetSocketAddress的构造方法如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">anyLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token class-name">InetAddress</span> <span class="token function">anyLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>anyLocalAddress <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        anyLocalAddress <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inet4Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {0x00,0x00,0x00,0x00}</span></span>
<span class="line">        anyLocalAddress<span class="token punctuation">.</span><span class="token function">holder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hostName <span class="token operator">=</span> <span class="token string">&quot;0.0.0.0&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> anyLocalAddress<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> addr<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    holder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddressHolder</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">        addr <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">anyLocalAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> addr<span class="token punctuation">,</span></span>
<span class="line">        <span class="token function">checkPort</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、socket-类的方法" tabindex="-1"><a class="header-anchor" href="#_4、socket-类的方法"><span>4、Socket 类的方法</span></a></h3><p>java.net.Socket 类代表客户端和服务器都用来互相沟通的套接字。客户端要获取一个 Socket 对象通过实例化 ，而 服务器获得一个 Socket 对象则通过 accept() 方法的返回值。</p><p>Socket 类有五个构造方法.</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td>public Socket(String host, int port) throws UnknownHostException, IOException. 创建一个流套接字并将其连接到指定主机上的指定端口号。</td></tr><tr><td>2</td><td>public Socket(InetAddress host, int port) throws IOException 创建一个流套接字并将其连接到指定 IP 地址的指定端口号。</td></tr><tr><td>3</td><td>public Socket(String host, int port, InetAddress localAddress, int localPort) throws IOException. 创建一个套接字并将其连接到指定远程主机上的指定远程端口。</td></tr><tr><td>4</td><td>public Socket(InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException. 创建一个套接字并将其连接到指定远程地址上的指定远程端口。</td></tr><tr><td>5</td><td>public Socket() 通过系统默认类型的 SocketImpl 创建未连接套接字</td></tr></tbody></table><p>当 Socket 构造方法返回，并没有简单的实例化了一个 Socket 对象，它实际上会尝试连接到指定的服务器和端口。</p><p>下面列出了一些感兴趣的方法，注意客户端和服务器端都有一个 Socket 对象，所以无论客户端还是服务端都能够调用这些方法。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>方法描述</strong></th></tr></thead><tbody><tr><td>1</td><td><strong>public void connect(SocketAddress host, int timeout) throws IOException</strong> 将此套接字连接到服务器，并指定一个超时值。</td></tr><tr><td>2</td><td><strong>public InetAddress getInetAddress()</strong> 返回套接字连接的地址。</td></tr><tr><td>3</td><td><strong>public int getPort()</strong> 返回此套接字连接到的远程端口。</td></tr><tr><td>4</td><td><strong>public int getLocalPort()</strong> 返回此套接字绑定到的本地端口。</td></tr><tr><td>5</td><td><strong>public SocketAddress getRemoteSocketAddress()</strong> 返回此套接字连接的端点的地址，如果未连接则返回 null。</td></tr><tr><td>6</td><td><strong>public InputStream getInputStream() throws IOException</strong> 返回此套接字的输入流。</td></tr><tr><td>7</td><td><strong>public OutputStream getOutputStream() throws IOException</strong> 返回此套接字的输出流。</td></tr><tr><td>8</td><td><strong>public void close() throws IOException</strong> 关闭此套接字。</td></tr></tbody></table><h3 id="_5、客户端和服务端的通信" tabindex="-1"><a class="header-anchor" href="#_5、客户端和服务端的通信"><span>5、客户端和服务端的通信</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">serverTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建ServerSocket</span></span>
<span class="line">    <span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 绑定在某一个端口上</span></span>
<span class="line">    server<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 监听在这个端口</span></span>
<span class="line">    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@Test</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clientTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建Socket</span></span>
<span class="line">    <span class="token class-name">Socket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 使用这个socket进行连接</span></span>
<span class="line">    socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getLoopbackAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;hello server!&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、udp的实现" tabindex="-1"><a class="header-anchor" href="#_6、udp的实现"><span>6、UDP的实现</span></a></h3><p>对于UDP而言，它是没有连接过程的，直接面向的是数据报，所以，在UDP中只有两个核心的类。</p><p>DatagramSocket：用来建立socket</p><p>DatagramPacket：用来封装一个数据报文</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UDPTest</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//发送端</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 创建socket，可以指定端口，如果不指定会随机开一个端口，一般我们客户端都会选择随机端口</span></span>
<span class="line">        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">&quot;我是UDP方式发送的导弹&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 构建一个数据报</span></span>
<span class="line">        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span></span>
<span class="line">                    data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">,</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8080</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 直接发送</span></span>
<span class="line">        socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token comment">//接收端</span></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;InfiniteLoopStatement&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">receiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">DatagramSocket</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">9090</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">DatagramPacket</span> packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 接收</span></span>
<span class="line">        socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token comment">// packet.getData() 用来获取数据报的数据</span></span>
<span class="line">        <span class="token comment">// packet.getLength() 用来获取读取的数据报的长度</span></span>
<span class="line">        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,186),l=[p];function c(o,i){return a(),n("div",null,l)}const r=s(e,[["render",c],["__file","socket.html.vue"]]),d=JSON.parse('{"path":"/JavaSE2/socket.html","title":"java网络编程","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"一、网络基本概念","slug":"一、网络基本概念","link":"#一、网络基本概念","children":[{"level":3,"title":"1、网卡","slug":"_1、网卡","link":"#_1、网卡","children":[]},{"level":3,"title":"2、MAC地址、IP地址","slug":"_2、mac地址、ip地址","link":"#_2、mac地址、ip地址","children":[]},{"level":3,"title":"3、计算机之间是怎么发送数据的","slug":"_3、计算机之间是怎么发送数据的","link":"#_3、计算机之间是怎么发送数据的","children":[]},{"level":3,"title":"4、域名","slug":"_4、域名","link":"#_4、域名","children":[]}]},{"level":2,"title":"二、数据的传输","slug":"二、数据的传输","link":"#二、数据的传输","children":[{"level":3,"title":"1、网络七层参考模型","slug":"_1、网络七层参考模型","link":"#_1、网络七层参考模型","children":[]},{"level":3,"title":"2、数据是怎么传输的","slug":"_2、数据是怎么传输的","link":"#_2、数据是怎么传输的","children":[]}]},{"level":2,"title":"三、Socket 编程","slug":"三、socket-编程","link":"#三、socket-编程","children":[{"level":3,"title":"1、InetAddress","slug":"_1、inetaddress","link":"#_1、inetaddress","children":[]},{"level":3,"title":"2、URL","slug":"_2、url","link":"#_2、url","children":[]},{"level":3,"title":"3、ServerSocket 类的方法","slug":"_3、serversocket-类的方法","link":"#_3、serversocket-类的方法","children":[]},{"level":3,"title":"4、Socket 类的方法","slug":"_4、socket-类的方法","link":"#_4、socket-类的方法","children":[]},{"level":3,"title":"5、客户端和服务端的通信","slug":"_5、客户端和服务端的通信","link":"#_5、客户端和服务端的通信","children":[]},{"level":3,"title":"6、UDP的实现","slug":"_6、udp的实现","link":"#_6、udp的实现","children":[]}]}],"git":{"updatedTime":1723708439000,"contributors":[{"name":"zqb","email":"2506956864@qq.com","commits":1}]},"filePathRelative":"JavaSE2/socket.md","excerpt":"\\n<p>网络编程是指编写运行在多个设备（计算机）的程序，这些设备都通过网络连接起来。程序之间可以通信，互相发送消息，网络编程其实是有难度的，但是Java作为一个面向对象的语言，帮助我们屏蔽了大量的复杂实现，我们学起来，就简单了。</p>\\n<p>Java中提供了 java.net 包中 J2SE 的 API 包含有类和接口，它们提供低层次的通信细节。你可以直接使用这些类和接口，来专注于解决问题，而不用关注通信细节。当然学习这些之前，我们需要扫扫盲，学习一些网络的基本知识。</p>\\n<h2>一、网络基本概念</h2>\\n<h3>1、网卡</h3>\\n<p>网卡是一块被设计用来允许计算机在计算机网络上进行通讯的计算机硬件。</p>"}');export{r as comp,d as data};
