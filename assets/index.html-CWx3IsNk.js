import{_ as s,c as n,o as a,a as e}from"./app-DTribdQX.js";const t={},l=e(`<h1 id="elk搜索高级课程" tabindex="-1"><a class="header-anchor" href="#elk搜索高级课程"><span>ELK搜索高级课程</span></a></h1><h2 id="第一章-课程简介" tabindex="-1"><a class="header-anchor" href="#第一章-课程简介"><span>第一章 课程简介</span></a></h2><h3 id="一、课程内容" tabindex="-1"><a class="header-anchor" href="#一、课程内容"><span>一、课程内容</span></a></h3><p>ELK是包含但不限于Elasticsearch（简称es）、Logstash、Kibana 三个开源软件的组成的一个整体，分别取其首字母组成ELK。ELK是用于数据抽取（Logstash）、搜索分析（Elasticsearch）、数据展现（Kibana）的一整套解决方案，所以也称作ELK stack。</p><p>本课程分别对三个组件进行详细介绍，尤其是Elasticsearch，因为它是ELK的核心。Elasticsearch会对底层的文档、索引、搜索、聚合、集群进行介绍，从搜索和聚合分析实例来展现它的魅力。Logstash会从内部如何采集数据到指定地方来展现它数据采集的功能。Kibana则从数据绘图来展现它数据可视化的能力。</p><h3 id="二、面向人员" tabindex="-1"><a class="header-anchor" href="#二、面向人员"><span>二、面向人员</span></a></h3><ul><li>java工程师：深入研究es,使得java工程师向搜索工程师迈进。</li><li>运维工程师：搭建整体elk集群。不需写代码，仅需配置，即可收集服务器指标、日志文件、数据库数据，并在前端华丽展现。</li><li>数据分析人员：不需写代码，仅需配置kibana图表，即可完成数据可视化工作，得到想要的数据图表。</li><li>大厂架构师：完成数据中台的搭建。对公司数据流的处理得心应手，对接本公司大数据业务。</li></ul><h3 id="三、课程优势" tabindex="-1"><a class="header-anchor" href="#三、课程优势"><span>三、课程优势</span></a></h3><ul><li>基于最新的elk7.3版本讲解。最新api。包含sql功能。</li><li>理论和实际代码相辅相成。理论结合画图讲解。代码与spring boot结合。</li><li>包含实际运维部署理论与实践。</li><li>Elk整体流程项目，包含数据采集。</li></ul><h3 id="四、学习路径" tabindex="-1"><a class="header-anchor" href="#四、学习路径"><span>四、学习路径</span></a></h3><p>参照目录，按照介绍，es入门，文档、映射、索引、分词器、搜索、聚合。logstash、kibana。集群部署。项目实战。</p><p>每个知识点先学概念，在学rest api,最后java代码上手。</p><h2 id="第二章-elastic-stack简介" tabindex="-1"><a class="header-anchor" href="#第二章-elastic-stack简介"><span>第二章 Elastic Stack简介</span></a></h2><h3 id="一、简介" tabindex="-1"><a class="header-anchor" href="#一、简介"><span>一、简介</span></a></h3><p>ELK是一个免费开源的日志分析架构技术栈总称，官网https://www.elastic.co/cn。包含三大基础组件，分别是Elasticsearch、Logstash、Kibana。但实际上ELK不仅仅适用于日志分析，它还可以支持其它任何数据搜索、分析和收集的场景，日志分析和收集只是更具有代表性。并非唯一性。下面是ELK架构：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567691051440.dff99b83.png" alt="1567691051440"></p><p>随着elk的发展，又有新成员Beats、elastic cloud的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567691098941.56c9ae82.png" alt="1567691098941"></p><h3 id="二、特色" tabindex="-1"><a class="header-anchor" href="#二、特色"><span>二、特色</span></a></h3><ul><li>处理方式灵活：elasticsearch是目前最流行的准实时全文检索引擎，具有高速检索大数据的能力。</li><li>配置简单：安装elk的每个组件，仅需配置每个组件的一个配置文件即可。修改处不多，因为大量参数已经默认配在系统中，修改想要修改的选项即可。</li><li>接口简单：采用json形式RESTFUL API接受数据并响应，无关语言。</li><li>性能高效：elasticsearch基于优秀的全文搜索技术Lucene，采用倒排索引，可以轻易地在百亿级别数据量下，搜索出想要的内容，并且是秒级响应。</li><li>灵活扩展：elasticsearch和logstash都可以根据集群规模线性拓展，elasticsearch内部自动实现集群协作。</li><li>数据展现华丽：kibana作为前端展现工具，图表华丽，配置简单。</li></ul><h3 id="三、组件介绍" tabindex="-1"><a class="header-anchor" href="#三、组件介绍"><span>三、组件介绍</span></a></h3><p><strong>Elasticsearch</strong></p><p>Elasticsearch 是使用java开发，基于Lucene、分布式、通过Restful方式进行交互的近实时搜索平台框架。它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</p><p><strong>Logstash</strong></p><p>Logstash 基于java开发，是一个数据抽取转化工具。一般工作方式为c/s架构，client端安装在需要收集信息的主机上，server端负责将收到的各节点日志进行过滤、修改等操作在一并发往elasticsearch或其他组件上去。</p><p><strong>Kibana</strong></p><p>Kibana 基于nodejs，也是一个开源和免费的可视化工具。Kibana可以为 Logstash 和 ElasticSearch 提供的日志分析友好的 Web 界面，可以汇总、分析和搜索重要数据日志。</p><p><strong>Beats</strong></p><p>Beats 平台集合了多种单一用途数据采集器。它们从成百上千或成千上万台机器和系统向 Logstash 或 Elasticsearch 发送数据。</p><p>Beats由如下组成:</p><p>Packetbeat：轻量型网络数据采集器，用于深挖网线上传输的数据，了解应用程序动态。Packetbeat 是一款轻量型网络数据包分析器，能够将数据发送至 Logstash 或 Elasticsearch。其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议。</p><p>Filebeat：轻量型日志采集器。当您要面对成百上千、甚至成千上万的服务器、虚拟机和容器生成的日志时，请告别 SSH 吧。Filebeat 将为您提供一种轻量型方法，用于转发和汇总日志与文件，让简单的事情不再繁杂。</p><p>Metricbeat ：轻量型指标采集器。Metricbeat 能够以一种轻量型的方式，输送各种系统和服务统计数据，从 CPU 到内存，从 Redis 到 Nginx，不一而足。可定期获取外部系统的监控指标信息，其可以监控、收集 Apache http、HAProxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务。</p><p>Winlogbeat：轻量型 Windows 事件日志采集器。用于密切监控基于 Windows 的基础设施上发生的事件。Winlogbeat 能够以一种轻量型的方式，将 Windows 事件日志实时地流式传输至 Elasticsearch 和 Logstash。</p><p>Auditbeat：轻量型审计日志采集器。收集您 Linux 审计框架的数据，监控文件完整性。Auditbeat 实时采集这些事件，然后发送到 Elastic Stack 其他部分做进一步分析。</p><p>Heartbeat：面向运行状态监测的轻量型采集器。通过主动探测来监测服务的可用性。通过给定 URL 列表，Heartbeat 仅仅询问：网站运行正常吗？Heartbeat 会将此信息和响应时间发送至 Elastic 的其他部分，以进行进一步分析。</p><p>Functionbeat：面向云端数据的无服务器采集器。在作为一项功能部署在云服务提供商的功能即服务 (FaaS) 平台上后，Functionbeat 即能收集、传送并监测来自您的云服务的相关数据。</p><p><strong>Elastic cloud</strong></p><p>基于 Elasticsearch 的软件即服务(SaaS)解决方案。通过 Elastic 的官方合作伙伴使用托管的 Elasticsearch 服务。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567691213668.cae69eef.png" alt="1567691213668"></p><h2 id="第三章-elasticsearch是什么" tabindex="-1"><a class="header-anchor" href="#第三章-elasticsearch是什么"><span>第三章 Elasticsearch是什么</span></a></h2><h3 id="一、搜索是什么" tabindex="-1"><a class="header-anchor" href="#一、搜索是什么"><span>一、搜索是什么</span></a></h3><p>概念：用户输入想要的关键词，返回含有该关键词的所有信息。</p><p>场景：</p><p>1互联网搜索：谷歌、百度、各种新闻首页</p><p>2 站内搜索（垂直搜索）：企业OA查询订单、人员、部门，电商网站内部搜索商品（淘宝、京东）场景。</p><h3 id="二、数据库做搜索弊端" tabindex="-1"><a class="header-anchor" href="#二、数据库做搜索弊端"><span>二、数据库做搜索弊端</span></a></h3><h4 id="_1、站内搜索-垂直搜索-数据量小-简单搜索-可以使用数据库。" tabindex="-1"><a class="header-anchor" href="#_1、站内搜索-垂直搜索-数据量小-简单搜索-可以使用数据库。"><span>1、站内搜索（垂直搜索）：数据量小，简单搜索，可以使用数据库。</span></a></h4><p>问题出现：</p><p>l 存储问题。电商网站商品上亿条时，涉及到单表数据过大必须拆分表，数据库磁盘占用过大必须分库（mycat）。</p><p>l 性能问题：解决上面问题后，查询“笔记本电脑”等关键词时，上亿条数据的商品名字段逐行扫描，性能跟不上。</p><p>l 不能分词。如搜索“笔记本电脑”，只能搜索完全和关键词一样的数据，那么数据量小时，搜索“笔记电脑”，“电脑”数据要不要给用户。</p><h4 id="_2、互联网搜索-肯定不会使用数据库搜索。数据量太大。pb级。" tabindex="-1"><a class="header-anchor" href="#_2、互联网搜索-肯定不会使用数据库搜索。数据量太大。pb级。"><span>2、互联网搜索，肯定不会使用数据库搜索。数据量太大。PB级。</span></a></h4><h3 id="三、全文检索、倒排索引和lucene" tabindex="-1"><a class="header-anchor" href="#三、全文检索、倒排索引和lucene"><span>三、全文检索、倒排索引和Lucene</span></a></h3><h4 id="_1、全文检索" tabindex="-1"><a class="header-anchor" href="#_1、全文检索"><span><strong>1、全文检索</strong></span></a></h4><p>倒排索引。数据存储时，经行分词建立term索引库。见画图。</p><p>倒排索引源于实际应用中需要根据属性的值来查找记录。这种索引表中的每一项都包括一个属性值和具有该属性值的各记录的地址。由于不是由记录来确定属性值，而是由属性值来确定记录的位置，因而称为倒排索引(inverted index)。带有倒排索引的文件我们称为倒排<a href="https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreferrer">索引文件open in new window</a>，简称<a href="https://baike.baidu.com/item/%E5%80%92%E6%8E%92%E6%96%87%E4%BB%B6/4137688" target="_blank" rel="noopener noreferrer">倒排文件open in new window</a>(inverted file)。</p><h4 id="_2、lucene" tabindex="-1"><a class="header-anchor" href="#_2、lucene"><span>2、Lucene</span></a></h4><p>就是一个jar包，里面封装了全文检索的引擎、搜索的算法代码。开发时，引入lucene的jar包，通过api开发搜索相关业务。底层会在磁盘建立索引库。</p><h3 id="四、什么是elasticsearch" tabindex="-1"><a class="header-anchor" href="#四、什么是elasticsearch"><span>四、什么是Elasticsearch</span></a></h3><h4 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介"><span>1、简介</span></a></h4><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567696557762.399b3eb9.png" alt="1567696557762"></p><p>官网：https://www.elastic.co/cn/products/elasticsearch</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567696574236.0fbdc4ad.png" alt="1567696574236"></p><h4 id="_2、elasticsearch的功能" tabindex="-1"><a class="header-anchor" href="#_2、elasticsearch的功能"><span>2、Elasticsearch的功能</span></a></h4><ul><li>分布式的搜索引擎和数据分析引擎</li></ul><p>搜索：互联网搜索、电商网站站内搜索、OA系统查询</p><p>数据分析：电商网站查询近一周哪些品类的图书销售前十；新闻网站，最近3天阅读量最高的十个关键词，舆情分析。</p><ul><li>全文检索，结构化检索，数据分析</li></ul><p>全文检索：搜索商品名称包含java的图书select * from books where book_name like &quot;%java%&quot;。</p><p>结构化检索：搜索商品分类为spring的图书都有哪些，select * from books where category_id=&#39;spring&#39;</p><p>数据分析：分析每一个分类下有多少种图书，select category_id,count(*) from books group by category_id</p><ul><li>对海量数据进行近实时的处理</li></ul><p>分布式：ES自动可以将海量数据分散到多台服务器上去存储和检索,经行并行查询，提高搜索效率。相对的，Lucene是单机应用。</p><p>近实时：数据库上亿条数据查询，搜索一次耗时几个小时，是批处理（batch-processing）。而es只需秒级即可查询海量数据，所以叫近实时。秒级。</p><h4 id="_3、elasticsearch的使用场景" tabindex="-1"><a class="header-anchor" href="#_3、elasticsearch的使用场景"><span>3、Elasticsearch的使用场景</span></a></h4><p>国外：</p><ul><li>维基百科，类似百度百科，“网络七层协议”的维基百科，全文检索，高亮，搜索推荐</li><li>Stack Overflow（国外的程序讨论论坛），相当于程序员的贴吧。遇到it问题去上面发帖，热心网友下面回帖解答。</li><li>GitHub（开源代码管理），搜索上千亿行代码。</li><li>电商网站，检索商品</li><li>日志数据分析，logstash采集日志，ES进行复杂的数据分析（ELK技术，elasticsearch+logstash+kibana）</li><li>商品价格监控网站，用户设定某商品的价格阈值，当低于该阈值的时候，发送通知消息给用户，比如说订阅《java编程思想》的监控，如果价格低于27块钱，就通知我，我就去买。</li><li>BI系统，商业智能（Business Intelligence）。大型连锁超市，分析全国网点传回的数据，分析各个商品在什么季节的销售量最好、利润最高。成本管理，店面租金、员工工资、负债等信息进行分析。从而部署下一个阶段的战略目标。</li></ul><p>国内：</p><ul><li>百度搜索，第一次查询，使用es。</li><li>OA、ERP系统站内搜索。</li></ul><h4 id="_4、elasticsearch的特点" tabindex="-1"><a class="header-anchor" href="#_4、elasticsearch的特点"><span>4、Elasticsearch的特点</span></a></h4><ul><li>可拓展性：大型分布式集群（数百台服务器）技术，处理PB级数据，大公司可以使用。小公司数据量小，也可以部署在单机。大数据领域使用广泛。</li><li>技术整合：将全文检索、数据分析、分布式相关技术整合在一起：lucene（全文检索），商用的数据分析软件（BI软件），分布式数据库（mycat）</li><li>部署简单：开箱即用，很多默认配置不需关心，解压完成直接运行即可。拓展时，只需多部署几个实例即可，负载均衡、分片迁移集群内部自己实施。</li><li>接口简单：使用restful api经行交互，跨语言。</li><li>功能强大：Elasticsearch作为传统数据库的一个补充，提供了数据库所不不能提供的很多功能，如全文检索，同义词处理，相关度排名。</li></ul><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567696692347.034e2f59.png" alt="1567696692347"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567696700718.7f441cee.png" alt="1567696700718"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567696712256.629e37c7.png" alt="1567696712256"></p><h3 id="五、elasticsearch核心概念" tabindex="-1"><a class="header-anchor" href="#五、elasticsearch核心概念"><span>五、elasticsearch核心概念</span></a></h3><h4 id="_1、lucene和elasticsearch的关系" tabindex="-1"><a class="header-anchor" href="#_1、lucene和elasticsearch的关系"><span>1、lucene和elasticsearch的关系</span></a></h4><p>Lucene：最先进、功能最强大的搜索库，直接基于lucene开发，非常复杂，api复杂</p><p>Elasticsearch：基于lucene，封装了许多lucene底层功能，提供简单易用的restful api接口和许多语言的客户端，如java的高级客户端（<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.3/java-rest-low.html" target="_blank" rel="noopener noreferrer">Java High Level REST Clientopen in new window</a>）和底层客户端（<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.3/java-rest-low.html" target="_blank" rel="noopener noreferrer">Java Low Level REST Clientopen in new window</a>）</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1567696843304.2d317ebc.png" alt="1567696843304"></p><p>起源：Shay Banon。2004年失业，陪老婆去伦敦学习厨师。失业在家帮老婆写一个菜谱搜索引擎。封装了lucene的开源项目，compass。找到工作后，做分布式高性能项目，再封装compass，写出了elasticsearch，使得lucene支持分布式。现在是Elasticsearch创始人兼Elastic首席执行官。</p><h4 id="_2、elasticsearch的核心概念" tabindex="-1"><a class="header-anchor" href="#_2、elasticsearch的核心概念"><span>2、elasticsearch的核心概念</span></a></h4><h5 id="_1-nrt-near-realtime-近实时" tabindex="-1"><a class="header-anchor" href="#_1-nrt-near-realtime-近实时"><span>（1）NRT（Near Realtime）：近实时</span></a></h5><p>两方面：</p><ul><li>写入数据时，过1秒才会被搜索到，因为内部在分词、录入索引。</li><li>es搜索时：搜索和分析数据需要秒级出结果。</li></ul><h5 id="_2-cluster-集群" tabindex="-1"><a class="header-anchor" href="#_2-cluster-集群"><span>（2）Cluster：集群</span></a></h5><p>包含一个或多个启动着es实例的机器群。通常一台机器起一个es实例。同一网络下，集群名一样的多个es实例自动组成集群，自动均衡分片等行为。默认集群名为“elasticsearch”。</p><h5 id="_3-node-节点" tabindex="-1"><a class="header-anchor" href="#_3-node-节点"><span>（3）Node：节点</span></a></h5><p>每个es实例称为一个节点。节点名自动分配，也可以手动配置。</p><h5 id="_4-index-索引" tabindex="-1"><a class="header-anchor" href="#_4-index-索引"><span>（4）Index：索引</span></a></h5><p>包含一堆有相似结构的文档数据。</p><p>索引创建规则：</p><ul><li>仅限小写字母</li><li>不能包含\\、/、 *、?、&quot;、&lt;、&gt;、|、#以及空格符等特殊符号</li><li>从7.0版本开始不再包含冒号</li><li>不能以-、_或+开头</li><li>不能超过255个字节（注意它是字节，因此多字节字符将计入255个限制）</li></ul><h5 id="_5-document-文档" tabindex="-1"><a class="header-anchor" href="#_5-document-文档"><span>（5）Document：文档</span></a></h5><p>es中的最小数据单元。一个document就像数据库中的一条记录。通常以json格式显示。多个document存储于一个索引（Index）中。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">book document</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;book_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;book_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java编程思想&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;book_desc&quot;</span><span class="token operator">:</span> <span class="token string">&quot;从Java的基础语法到最高级特性（深入的[面向对象](https://baike.baidu.com/item/面向对象)概念、多线程、自动项目构建、单元测试和调试等），本书都能逐步指导你轻松掌握。&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;category_id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;category_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-field-字段" tabindex="-1"><a class="header-anchor" href="#_6-field-字段"><span>（6）Field:字段</span></a></h5><p>就像数据库中的列（Columns），定义每个document应该有的字段。</p><h5 id="_7-type-类型" tabindex="-1"><a class="header-anchor" href="#_7-type-类型"><span>（7）Type：类型</span></a></h5><p>每个索引里都可以有一个或多个type，type是index中的一个逻辑数据分类，一个type下的document，都有相同的field。</p><p>注意：6.0之前的版本有type（类型）概念，type相当于关系数据库的表，ES官方将在ES9.0版本中彻底删除type。本教程typy都为_doc。</p><h5 id="_8-shard-分片" tabindex="-1"><a class="header-anchor" href="#_8-shard-分片"><span>（8）shard：分片</span></a></h5><p>index数据过大时，将index里面的数据，分为多个shard，分布式的存储在各个服务器上面。可以支持海量数据和高并发，提升性能和吞吐量，充分利用多台机器的cpu。</p><h5 id="_9-replica-副本" tabindex="-1"><a class="header-anchor" href="#_9-replica-副本"><span>（9）replica：副本</span></a></h5><p>在分布式环境下，任何一台机器都会随时宕机，如果宕机，index的一个分片没有，导致此index不能搜索。所以，为了保证数据的安全，我们会将每个index的分片经行备份，存储在另外的机器上。保证少数机器宕机es集群仍可以搜索。</p><p>能正常提供查询和插入的分片我们叫做主分片（primary shard），其余的我们就管他们叫做备份的分片（replica shard）。</p><p>es6默认新建索引时，5分片，2副本，也就是一主一备，共10个分片。所以，es集群最小规模为两台。</p><h4 id="_3、elasticsearch核心概念-vs-数据库核心概念" tabindex="-1"><a class="header-anchor" href="#_3、elasticsearch核心概念-vs-数据库核心概念"><span>3、elasticsearch核心概念 vs. 数据库核心概念</span></a></h4><table><thead><tr><th><strong>关系型数据库（比如Mysql）</strong></th><th><strong>非关系型数据库（Elasticsearch）</strong></th></tr></thead><tbody><tr><td>数据库Database</td><td>索引Index</td></tr><tr><td>表Table</td><td>索引Index（原为Type）</td></tr><tr><td>数据行Row</td><td>文档Document</td></tr><tr><td>数据列Column</td><td>字段Field</td></tr><tr><td>约束 Schema</td><td>映射Mapping</td></tr></tbody></table><h2 id="第四章-elasticsearch相关软件安装" tabindex="-1"><a class="header-anchor" href="#第四章-elasticsearch相关软件安装"><span>第四章 Elasticsearch相关软件安装</span></a></h2><h3 id="一、windows安装elasticsearch" tabindex="-1"><a class="header-anchor" href="#一、windows安装elasticsearch"><span>一、Windows安装elasticsearch</span></a></h3><h4 id="_1、安装jdk-至少1-8-0-73以上版本-验证-java-version。" tabindex="-1"><a class="header-anchor" href="#_1、安装jdk-至少1-8-0-73以上版本-验证-java-version。"><span>1、安装JDK，至少1.8.0_73以上版本，验证：java -version。</span></a></h4><h4 id="_2、下载和解压缩elasticsearch安装包-查看目录结构。" tabindex="-1"><a class="header-anchor" href="#_2、下载和解压缩elasticsearch安装包-查看目录结构。"><span>2、下载和解压缩Elasticsearch安装包，查看目录结构。</span></a></h4><p>https://www.elastic.co/cn/downloads/elasticsearch</p><p>bin：脚本目录，包括：启动、停止等可执行脚本</p><p>config：配置文件目录</p><p>data：索引目录，存放索引文件的地方</p><p>logs：日志目录</p><p>modules：模块目录，包括了es的功能模块</p><p>plugins :插件目录，es支持插件机制</p><h4 id="_3、配置文件" tabindex="-1"><a class="header-anchor" href="#_3、配置文件"><span>3、配置文件</span></a></h4><p>位置：</p><p>ES的配置文件的地址根据安装形式的不同而不同：</p><p>使用zip、tar安装，配置文件的地址在安装目录的config下。</p><p>使用RPM安装，配置文件在/etc/elasticsearch下。</p><p>使用MSI安装，配置文件的地址在安装目录的config下，并且会自动将config目录地址写入环境变量ES_PATH_CONF。</p><p><strong>elasticsearch.yml</strong></p><p>配置格式是YAML，可以采用如下两种方式：</p><p>方式1：层次方式</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">path</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">data</span><span class="token punctuation">:</span> /var/lib/elasticsearch</span>
<span class="line">    <span class="token key atrule">logs</span><span class="token punctuation">:</span> /var/log/elasticsearch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式2：属性方式</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">path.data</span><span class="token punctuation">:</span> /var/lib/elasticsearch</span>
<span class="line"><span class="token key atrule">path.logs</span><span class="token punctuation">:</span> /var/log/elasticsearch</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>常用的配置项如下</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">cluster.name</span><span class="token punctuation">:</span> </span>
<span class="line">	配置elasticsearch的集群名称，默认是elasticsearch。建议修改成一个有意义的名称。</span>
<span class="line"><span class="token key atrule">node.name</span><span class="token punctuation">:</span></span>
<span class="line">	节点名，通常一台物理服务器就是一个节点，es会默认随机指定一个名字，建议指定一个有意义的名称，方便管理</span>
<span class="line">	一个或多个节点组成一个cluster集群，集群是一个逻辑的概念，节点是物理概念，后边章节会详细介绍。</span>
<span class="line"><span class="token key atrule">path.conf</span><span class="token punctuation">:</span> </span>
<span class="line">	设置配置文件的存储路径，tar或zip包安装默认在es根目录下的config文件夹，rpm安装默认在/etc/ elasticsearch</span>
<span class="line"><span class="token key atrule">path.data</span><span class="token punctuation">:</span></span>
<span class="line">	设置索引数据的存储路径，默认是es根目录下的data文件夹，可以设置多个存储路径，用逗号隔开。</span>
<span class="line"><span class="token key atrule">path.logs</span><span class="token punctuation">:</span></span>
<span class="line">	设置日志文件的存储路径，默认是es根目录下的logs文件夹</span>
<span class="line"><span class="token key atrule">path.plugins</span><span class="token punctuation">:</span> </span>
<span class="line">	设置插件的存放路径，默认是es根目录下的plugins文件夹</span>
<span class="line"><span class="token key atrule">bootstrap.memory_lock</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line">	设置为true可以锁住ES使用的内存，避免内存与swap分区交换数据。</span>
<span class="line"><span class="token key atrule">network.host</span><span class="token punctuation">:</span> </span>
<span class="line">	设置绑定主机的ip地址，设置为0.0.0.0表示绑定任何ip，允许外网访问，生产环境建议设置为具体的ip。</span>
<span class="line"><span class="token key atrule">http.port</span><span class="token punctuation">:</span> <span class="token number">9200</span></span>
<span class="line">	设置对外服务的http端口，默认为9200。</span>
<span class="line"><span class="token key atrule">transport.tcp.port</span><span class="token punctuation">:</span> 9300  集群结点之间通信端口</span>
<span class="line"><span class="token key atrule">node.master</span><span class="token punctuation">:</span> </span>
<span class="line">	指定该节点是否有资格被选举成为master结点，默认是true，如果原来的master宕机会重新选举新的master。</span>
<span class="line"><span class="token key atrule">node.data</span><span class="token punctuation">:</span> </span>
<span class="line">	指定该节点是否存储索引数据，默认为true。</span>
<span class="line"><span class="token key atrule">discovery.zen.ping.unicast.hosts</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;host1:port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;host2:port&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">]</span></span>
<span class="line">	设置集群中master节点的初始列表。</span>
<span class="line"><span class="token key atrule">discovery.zen.ping.timeout</span><span class="token punctuation">:</span> 3s</span>
<span class="line">	设置ES自动发现节点连接超时的时间，默认为3秒，如果网络延迟高可设置大些。</span>
<span class="line"><span class="token key atrule">discovery.zen.minimum_master_nodes</span><span class="token punctuation">:</span></span>
<span class="line">	主结点数量的最少值 <span class="token punctuation">,</span>此值的公式为：(master_eligible_nodes / 2) + 1 ，比如：有3个符合要求的主结点，那么这里要设置为2。</span>
<span class="line"><span class="token key atrule">node.max_local_storage_nodes</span><span class="token punctuation">:</span> </span>
<span class="line">	单机允许的最大存储结点数，通常单机启动一个结点建议设置为1，开发环境如果单机启动多个节点可设置大于1。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>jvm.options</strong></p><p>设置最小及最大的JVM堆内存大小：</p><p>在jvm.options中设置 -Xms和-Xmx：</p><p>1） 两个值设置为相等</p><p>2） 将Xmx 设置为不超过物理内存的一半。</p><p><strong>log4j2.properties</strong></p><p>日志文件设置，ES使用log4j，注意日志级别的配置。</p><h4 id="_4、启动elasticsearch-bin-elasticsearch-bat-es的特点就是开箱即-无需配置-启动即可。" tabindex="-1"><a class="header-anchor" href="#_4、启动elasticsearch-bin-elasticsearch-bat-es的特点就是开箱即-无需配置-启动即可。"><span>4、启动Elasticsearch：bin\\elasticsearch.bat，es的特点就是开箱即，无需配置，启动即可。</span></a></h4><p>注意：es7 windows版本不支持机器学习，所以elasticsearch.yml中添加如下几个参数：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">node.name</span><span class="token punctuation">:</span> node<span class="token punctuation">-</span><span class="token number">1</span>  </span>
<span class="line"><span class="token key atrule">cluster.initial_master_nodes</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">&quot;node-1&quot;</span><span class="token punctuation">]</span>  </span>
<span class="line"><span class="token key atrule">xpack.ml.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> </span>
<span class="line"><span class="token key atrule">http.cors.enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span></span>
<span class="line"><span class="token key atrule">http.cors.allow-origin</span><span class="token punctuation">:</span> /.<span class="token important">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、检查es是否启动成功-浏览器访问http-localhost-9200-pretty" tabindex="-1"><a class="header-anchor" href="#_5、检查es是否启动成功-浏览器访问http-localhost-9200-pretty"><span>5、检查ES是否启动成功：浏览器访问http://localhost:9200/?Pretty</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node-1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;cluster_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;elasticsearch&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;cluster_uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;HqAKQ_0tQOOm8b6qU-2Qug&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;version&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;number&quot;</span><span class="token operator">:</span> <span class="token string">&quot;7.3.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;build_flavor&quot;</span><span class="token operator">:</span> <span class="token string">&quot;default&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;build_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zip&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;build_hash&quot;</span><span class="token operator">:</span> <span class="token string">&quot;de777fa&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;build_date&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2019-07-24T18:30:11.767338Z&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;build_snapshot&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;lucene_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;8.1.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;minimum_wire_compatibility_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;6.8.0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;minimum_index_compatibility_version&quot;</span><span class="token operator">:</span> <span class="token string">&quot;6.0.0-beta1&quot;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;tagline&quot;</span><span class="token operator">:</span> <span class="token string">&quot;You Know, for Search&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><p>name: node名称，取自机器的hostname</p><p>cluster_name: 集群名称（默认的集群名称就是elasticsearch）</p><p>version.number: 7.3.0，es版本号</p><p>version.lucene_version:封装的lucene版本号</p><h4 id="_6、浏览器访问-http-localhost-9200-cluster-health-查询集群状态" tabindex="-1"><a class="header-anchor" href="#_6、浏览器访问-http-localhost-9200-cluster-health-查询集群状态"><span>6、浏览器访问 http://localhost:9200/_cluster/health 查询集群状态</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;cluster_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;elasticsearch&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;timed_out&quot;</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;number_of_nodes&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;number_of_data_nodes&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;active_primary_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;active_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;relocating_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;initializing_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;unassigned_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;delayed_unassigned_shards&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;number_of_pending_tasks&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;number_of_in_flight_fetch&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;task_max_waiting_in_queue_millis&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;active_shards_percent_as_number&quot;</span><span class="token operator">:</span> <span class="token number">100</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>解释：</p><p>Status：集群状态。Green 所有分片可用。Yellow所有主分片可用。Red主分片不可用，集群不可用。</p><h3 id="二、-windows安装kibana" tabindex="-1"><a class="header-anchor" href="#二、-windows安装kibana"><span>二、 Windows安装Kibana</span></a></h3><p>1、kibana是es数据的前端展现，数据分析时，可以方便地看到数据。作为开发人员，可以方便访问es。</p><p>2、下载，解压kibana。</p><p>3、启动Kibana：bin\\kibana.bat</p><p>4、浏览器访问 http://localhost:5601 进入Dev Tools界面。像plsql一样支持代码提示。</p><p>5、发送get请求，查看集群状态GET _cluster/health。相当于浏览器访问。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568622526251.64ac6583.png" alt="1568622526251"></p><p>总览</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568622589010.ce0c3dcf.png" alt="1568622589010"></p><p>Dev Tools界面</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568622607418.ed5b4e79.png" alt="1568622607418"></p><p>监控集群界面</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568622619503.fef13406.png" alt="1568622619503"></p><p>集群状态（搜索速率、索引速率等）</p><h3 id="三、-windows安装postman" tabindex="-1"><a class="header-anchor" href="#三、-windows安装postman"><span>三、 Windows安装postman</span></a></h3><p>是什么：postman是一个模拟http请求的工具。能够非常细致地定制化各种http请求。如get]\\post\\pu\\delete,携带body参数等。</p><p>为什么：在没有kibana时，可以使用postman调试。</p><p>怎么用：</p><p>get http://localhost:9200/</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568622671957.81609ef9.png" alt="1568622671957"></p><p>测试一下get方式查询集群状态http://localhost:9200/_cluster/health</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568622683707.5fc7c102.png" alt="1568622683707"></p><h3 id="四、windows安装head插件" tabindex="-1"><a class="header-anchor" href="#四、windows安装head插件"><span>四、Windows安装head插件</span></a></h3><p>head插件是ES的一个可视化管理插件，用来监视ES的状态，并通过head客户端和ES服务进行交互，比如创建映射、创建索引等，head的项目地址在https://github.com/mobz/elasticsearch-head 。</p><p>从ES6.0开始，head插件支持使得node.js运行。</p><h4 id="_1、安装node-js" tabindex="-1"><a class="header-anchor" href="#_1、安装node-js"><span>1、安装node.js</span></a></h4><h4 id="_2、下载head并运行" tabindex="-1"><a class="header-anchor" href="#_2、下载head并运行"><span>2、下载head并运行</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">git clone git://github.com/mobz/elasticsearch-head.git </span>
<span class="line">cd elasticsearch-head </span>
<span class="line">npm install </span>
<span class="line">npm run start </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器打开 http://localhost:9100/</p><h4 id="_3、运行" tabindex="-1"><a class="header-anchor" href="#_3、运行"><span>3、运行</span></a></h4><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568627572838.1673126b.png" alt="1568627572838"></p><p>打开浏览器调试工具发现报错：</p><p>Origin null is not allowed by Access-Control-Allow-Origin.</p><p>原因是：head插件作为客户端要连接ES服务（localhost:9200），此时存在跨域问题，elasticsearch默认不允许跨域访问。</p><p>解决方案：</p><p>设置elasticsearch允许跨域访问。</p><p>在config/elasticsearch.yml 后面增加以下参数：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">#开启cors跨域访问支持，默认为false   </span>
<span class="line">http.cors.enabled: true   </span>
<span class="line">#跨域访问允许的域名地址，(允许所有域名)以上使用正则   </span>
<span class="line">http.cors.allow-origin: /.*/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：将config/elasticsearch.yml另存为utf-8编码格式。</p><p>成功连接ES</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568627617789.9ef341a6.png" alt="1568627617789"></p><p>注意：kibana\\postman\\head插件选择自己喜欢的一种使用即可。</p><p>本教程使用kibana的dev tool，因为地址栏省略了http://localhost:9200。</p><h2 id="第五章-es快速入门" tabindex="-1"><a class="header-anchor" href="#第五章-es快速入门"><span>第五章 es快速入门</span></a></h2><h3 id="一、文档-document-的数据格式" tabindex="-1"><a class="header-anchor" href="#一、文档-document-的数据格式"><span>一、文档（document）的数据格式</span></a></h3><p>（1）应用系统的数据结构都是面向对象的，具有复杂的数据结构</p><p>（2）对象存储到数据库，需要将关联的复杂对象属性插到另一张表，查询时再拼接起来。</p><p>（3）es面向文档，文档中存储的数据结构，与对象一致。所以一个对象可以直接存成一个文档。</p><p>（4）es的document用json数据格式来表达。</p><p>例如：班级和学生关系</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">  </span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">String</span> classInfoId<span class="token punctuation">;</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ClassInfo</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">String</span> id<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> <span class="token class-name">String</span> className<span class="token punctuation">;</span></span>
<span class="line">。。。。。</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>数据库中要设计所谓的一对多，多对一的两张表，外键等。查询出来时，还要关联，mybatis写映射文件，很繁琐。</p><p>而在es中，一个学生存成文档如下：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;last_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zhang&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;classInfo&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;className&quot;</span><span class="token operator">:</span> <span class="token string">&quot;三年二班&quot;</span><span class="token punctuation">,</span>     </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、图书网站商品管理案例-背景介绍" tabindex="-1"><a class="header-anchor" href="#二、图书网站商品管理案例-背景介绍"><span>二、图书网站商品管理案例：背景介绍</span></a></h3><p>有一个售卖图书的网站，需要为其基于ES构建一个后台系统，提供以下功能：</p><p>（1）对商品信息进行CRUD（增删改查）操作</p><p>（2）执行简单的结构化查询</p><p>（3）可以执行简单的全文检索，以及复杂的phrase（短语）检索</p><p>（4）对于全文检索的结果，可以进行高亮显示</p><p>（5）对数据进行简单的聚合分析</p><h3 id="三、简单的集群管理" tabindex="-1"><a class="header-anchor" href="#三、简单的集群管理"><span>三、简单的集群管理</span></a></h3><h4 id="_1、快速检查集群的健康状况" tabindex="-1"><a class="header-anchor" href="#_1、快速检查集群的健康状况"><span>1、快速检查集群的健康状况</span></a></h4><p>es提供了一套api，叫做cat api，可以查看es中各种各样的数据</p><p>GET /_cat/health?v</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">epoch      timestamp cluster       status node.total node.data shards pri relo init unassign pending_tasks max_task_wait_time active_shards_percent</span>
<span class="line">1568635460 12:04:20  elasticsearch green           1         1      4   4    0    0        0             0                  -                100.0%</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>如何快速了解集群的健康状况？green、yellow、red？</p><p>green：每个索引的primary shard和replica shard都是active状态的</p><p>yellow：每个索引的primary shard都是active状态的，但是部分replica shard不是active状态，处于不可用的状态</p><p>red：不是所有索引的primary shard都是active状态的，部分索引有数据丢失了</p><h4 id="_2、快速查看集群中有哪些索引" tabindex="-1"><a class="header-anchor" href="#_2、快速查看集群中有哪些索引"><span>2、快速查看集群中有哪些索引</span></a></h4><p>GET /_cat/indices?v</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">health status index                           uuid                   pri rep docs.count docs.deleted store.size pri.store.size</span>
<span class="line">green  open   .kibana_task_manager            JBMgpucOSzenstLcjA_G4A   1   0          2            0     45.5kb         45.5kb</span>
<span class="line">green  open   .monitoring-kibana-7-2019.09.16 LIskf15DTcS70n4Q6t2bTA   1   0        433            0    218.2kb        218.2kb</span>
<span class="line">green  open   .monitoring-es-7-2019.09.16     RMeUN3tQRjqM8xBgw7Zong   1   0       3470         1724      1.9mb          1.9mb</span>
<span class="line">green  open   .kibana_1                       1cRiyIdATya5xS6qK5pGJw   1   0          4            0     18.2kb         18.2kb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、简单的索引操作" tabindex="-1"><a class="header-anchor" href="#_3、简单的索引操作"><span>3、简单的索引操作</span></a></h4><p>创建索引：PUT /demo_index?pretty</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;acknowledged&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;shards_acknowledged&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;demo_index&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>删除索引：DELETE /demo_index?pretty</p><h4 id="_4、商品的crud操作-document-crud操作" tabindex="-1"><a class="header-anchor" href="#_4、商品的crud操作-document-crud操作"><span>4、商品的CRUD操作（document CRUD操作）</span></a></h4><h5 id="_1-新建图书索引" tabindex="-1"><a class="header-anchor" href="#_1-新建图书索引"><span>（1）新建图书索引</span></a></h5><p>首先建立图书索引 book</p><p>语法：put /index</p><p>PUT /book</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568632608676.29094666.png" alt="1568632608676"></p><h5 id="_2-新增图书-新增文档" tabindex="-1"><a class="header-anchor" href="#_2-新增图书-新增文档"><span>（2）新增图书 :新增文档</span></a></h5><p>语法：PUT /index/type/id</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /book/_doc/<span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bootstrap开发&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;studymodel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;201002&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">38.6</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span><span class="token string">&quot;2019-08-25 19:11:35&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;pic&quot;</span><span class="token operator">:</span><span class="token string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;bootstrap&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dev&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /book/_doc/<span class="token number">2</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java编程思想&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;java语言是世界第一编程语言，在软件开发领域使用人数最多。&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;studymodel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;201001&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">68.6</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span><span class="token string">&quot;2019-08-25 19:11:35&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;pic&quot;</span><span class="token operator">:</span><span class="token string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;dev&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token constant">PUT</span> <span class="token operator">/</span>book<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">3</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line"><span class="token string">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;spring开发基础&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;spring 在java领域非常流行，java程序员都在用。&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;studymodel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;201001&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">88.6</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;timestamp&quot;</span><span class="token operator">:</span><span class="token string">&quot;2019-08-24 19:11:35&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;pic&quot;</span><span class="token operator">:</span><span class="token string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token string">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;spring&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;java&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;result&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_shards&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;total&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;successful&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;failed&quot;</span> <span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-查询图书-检索文档" tabindex="-1"><a class="header-anchor" href="#_3-查询图书-检索文档"><span>（3）查询图书：检索文档</span></a></h5><p>语法：GET /index/type/id</p><p>查看图书:GET /book/_doc/1 就可看到json形式的文档。方便程序解析。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;_index&quot; : &quot;book&quot;,</span>
<span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span>
<span class="line"></span>
<span class="line">  &quot;_id&quot; : &quot;1&quot;,</span>
<span class="line"></span>
<span class="line">  &quot;_version&quot; : 4,</span>
<span class="line"></span>
<span class="line">  &quot;_seq_no&quot; : 5,</span>
<span class="line"></span>
<span class="line">  &quot;_primary_term&quot; : 1,</span>
<span class="line"></span>
<span class="line">  &quot;found&quot; : true,</span>
<span class="line"></span>
<span class="line">  &quot;_source&quot; : {</span>
<span class="line"></span>
<span class="line">    &quot;name&quot; : &quot;Bootstrap开发&quot;,</span>
<span class="line"></span>
<span class="line">    &quot;description&quot; : &quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;,</span>
<span class="line"></span>
<span class="line">    &quot;studymodel&quot; : &quot;201002&quot;,</span>
<span class="line"></span>
<span class="line">    &quot;price&quot; : 38.6,</span>
<span class="line"></span>
<span class="line">    &quot;timestamp&quot; : &quot;2019-08-25 19:11:35&quot;,</span>
<span class="line"></span>
<span class="line">    &quot;pic&quot; : &quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;,</span>
<span class="line"></span>
<span class="line">    &quot;tags&quot; : [</span>
<span class="line"></span>
<span class="line">      &quot;bootstrap&quot;,</span>
<span class="line"></span>
<span class="line">      &quot;开发&quot;</span>
<span class="line"></span>
<span class="line">    ]</span>
<span class="line"></span>
<span class="line">  }</span>
<span class="line"></span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为方便查看索引中的数据，kibana可以如下操作</p><p>Kibana-discover- Create index pattern- Index pattern填book</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568632860925.6511b01b.png" alt="1568632860925"></p><p>下一步，再点击discover就可看到数据。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568632872820.d0831041.png" alt="1568632872820"></p><p>点击json还可以看到原始数据</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568632881931.b84bb8e5.png" alt="1568632881931"></p><p>为方便查看索引中的数据，head可以如下操作</p><p>点击数据浏览，点击book索引。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568632895254.d334dc43.png" alt="1568632895254"></p><h5 id="_4-修改图书-替换操作" tabindex="-1"><a class="header-anchor" href="#_4-修改图书-替换操作"><span>（4）修改图书：替换操作</span></a></h5><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /book/_doc/<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bootstrap开发教程1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;description&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;studymodel&quot;</span><span class="token operator">:</span> <span class="token string">&quot;201002&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;price&quot;</span><span class="token operator">:</span><span class="token number">38.6</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;timestamp&quot;</span><span class="token operator">:</span><span class="token string">&quot;2019-08-25 19:11:35&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;pic&quot;</span><span class="token operator">:</span><span class="token string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token string">&quot;bootstrap&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;开发&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>替换操作是整体覆盖，要带上所有信息。</p><h5 id="_5-修改图书-更新文档" tabindex="-1"><a class="header-anchor" href="#_5-修改图书-更新文档"><span>（5） 修改图书：更新文档</span></a></h5><p>语法：POST /{index}/type /{id}/_update</p><p>或者POST /{index}/_update/{id}</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /book/_update/<span class="token number">1</span>/ </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">   <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot; Bootstrap开发教程高级&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;result&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;updated&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_shards&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;total&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;successful&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;failed&quot;</span> <span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-删除图书-删除文档" tabindex="-1"><a class="header-anchor" href="#_6-删除图书-删除文档"><span>（6）删除图书：删除文档</span></a></h5><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">DELETE /book/_doc/1</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">11</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;result&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;deleted&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_shards&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;total&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;successful&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;failed&quot;</span> <span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第六章-文档document入门" tabindex="-1"><a class="header-anchor" href="#第六章-文档document入门"><span>第六章 文档document入门</span></a></h2><h3 id="一、-默认自带字段解析" tabindex="-1"><a class="header-anchor" href="#一、-默认自带字段解析"><span>一、 默认自带字段解析</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;found&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_source&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Bootstrap开发教程1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;description&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Bootstrap是由Twitter推出的一个前台页面开发css框架，是一个非常流行的开发框架，此框架集成了多种页面效果。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长css页面开发的程序人员）轻松的实现一个css，不受浏览器限制的精美界面css效果。&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;studymodel&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;201002&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;price&quot;</span> <span class="token operator">:</span> <span class="token number">38.6</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;timestamp&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;2019-08-25 19:11:35&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;pic&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;group1/M00/00/00/wKhlQFs6RCeAY0pHAAJx5ZjNDEM428.jpg&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;tags&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token string">&quot;bootstrap&quot;</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token string">&quot;开发&quot;</span></span>
<span class="line">    <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_1、-index" tabindex="-1"><a class="header-anchor" href="#_1、-index"><span>1、 _index</span></a></h4><ul><li>含义：此文档属于哪个索引</li><li>原则：类似数据放在一个索引中。数据库中表的定义规则。如图书信息放在book索引中，员工信息放在employee索引中。各个索引存储和搜索时互不影响。</li><li>定义规则：英文小写。尽量不要使用特殊字符。order user</li></ul><h4 id="_2、-type" tabindex="-1"><a class="header-anchor" href="#_2、-type"><span>2、_type</span></a></h4><ul><li>含义：类别。book java node</li><li>注意：以后的es9将彻底删除此字段，所以当前版本在不断弱化type。不需要关注。见到_type都为doc。</li></ul><h4 id="_3、-id" tabindex="-1"><a class="header-anchor" href="#_3、-id"><span>3、_id</span></a></h4><p>含义：文档的唯一标识。就像表的id主键。结合索引可以标识和定义一个文档。</p><p>生成：手动（put /index/_doc/id）、自动</p><h4 id="_4、创建索引时-不同数据放到不同索引中" tabindex="-1"><a class="header-anchor" href="#_4、创建索引时-不同数据放到不同索引中"><span>4、创建索引时，不同数据放到不同索引中</span></a></h4><h3 id="二、生成文档id" tabindex="-1"><a class="header-anchor" href="#二、生成文档id"><span>二、生成文档id</span></a></h3><h4 id="_1、手动生成id" tabindex="-1"><a class="header-anchor" href="#_1、手动生成id"><span>1、手动生成id</span></a></h4><p>场景：数据从其他系统导入时，本身有唯一主键。如数据库中的图书、员工信息等。</p><p>用法：put /index/_doc/id</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /test_index/_doc/<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;test_field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、自动生成id" tabindex="-1"><a class="header-anchor" href="#_2、自动生成id"><span>2、自动生成id</span></a></h4><p>用法：POST /index/_doc</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /test_index/_doc</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;test_field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test1&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;test_index&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;x29LOm0BPsY0gSJFYZAl&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;result&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_shards&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;total&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;successful&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;failed&quot;</span> <span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>自动id特点：</p><p>长度为20个字符，URL安全，base64编码，GUID，分布式生成不冲突</p><h3 id="三、-source-字段" tabindex="-1"><a class="header-anchor" href="#三、-source-字段"><span>三、 _source 字段</span></a></h3><h4 id="_1、-source" tabindex="-1"><a class="header-anchor" href="#_1、-source"><span>1、_source</span></a></h4><p>含义：插入数据时的所有字段和值。在get获取数据时，在_source字段中原样返回。</p><p>GET /book/_doc/1</p><h4 id="_2、-定制返回字段" tabindex="-1"><a class="header-anchor" href="#_2、-定制返回字段"><span>2、 定制返回字段</span></a></h4><p>就像sql不要select *,而要select name,price from book …一样。</p><p>GET /book/_doc/1?__source_includes=name,price</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;found&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_source&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;price&quot;</span> <span class="token operator">:</span> <span class="token number">38.6</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;Bootstrap开发教程1&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、文档的替换与删除" tabindex="-1"><a class="header-anchor" href="#四、文档的替换与删除"><span>四、文档的替换与删除</span></a></h3><h4 id="_1、全量替换" tabindex="-1"><a class="header-anchor" href="#_1、全量替换"><span>1、全量替换</span></a></h4><p>执行两次，返回结果中版本号（_version）在不断上升。此过程为全量替换。</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /test_index/_doc/<span class="token number">1</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;test_field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实质：旧文档的内容不会立即删除，只是标记为deleted。适当的时机，集群会将这些文档删除。</p><h4 id="_2、强制创建" tabindex="-1"><a class="header-anchor" href="#_2、强制创建"><span>2、强制创建</span></a></h4><p>为防止覆盖原有数据，我们在新增时，设置为强制创建，不会覆盖原有文档。</p><p>语法：PUT /index/ _doc/id/_create</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /test_index/_doc/<span class="token number">1</span>/_create</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;test_field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;root_cause&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;version_conflict_engine_exception&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;reason&quot;</span><span class="token operator">:</span> <span class="token string">&quot;[2]: version conflict, document already exists (current version [1])&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;index_uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lqzVqxZLQuCnd6LYtZsMkg&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;shard&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test_index&quot;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;version_conflict_engine_exception&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;reason&quot;</span><span class="token operator">:</span> <span class="token string">&quot;[2]: version conflict, document already exists (current version [1])&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;index_uuid&quot;</span><span class="token operator">:</span> <span class="token string">&quot;lqzVqxZLQuCnd6LYtZsMkg&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;shard&quot;</span><span class="token operator">:</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;index&quot;</span><span class="token operator">:</span> <span class="token string">&quot;test_index&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;status&quot;</span><span class="token operator">:</span> <span class="token number">409</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、删除" tabindex="-1"><a class="header-anchor" href="#_3、删除"><span>3、删除</span></a></h4><p>DELETE /index/_doc/id</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">DELETE  /test_index/_doc/1/</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>实质：旧文档的内容不会立即删除，只是标记为deleted。适当的时机，集群会将这些文档删除。</p><p>lazy delete</p><h3 id="五、局部替换-partial-update" tabindex="-1"><a class="header-anchor" href="#五、局部替换-partial-update"><span>五、局部替换 partial update</span></a></h3><p>使用 PUT /index/type/id 为文档全量替换，需要将文档所有数据提交。</p><p>partial update局部替换则只修改变动字段。</p><p>用法：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">post /index/type/id/_update </span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token string">&quot;field&quot;</span>：<span class="token string">&quot;value&quot;</span></span>
<span class="line">   <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="图解内部原理" tabindex="-1"><a class="header-anchor" href="#图解内部原理"><span>图解内部原理</span></a></h4><p>内部与全量替换是一样的，旧文档标记为删除，新建一个文档。</p><p>优点：</p><ul><li>大大减少网络传输次数和流量，提升性能</li><li>减少并发冲突发生的概率。</li></ul><h4 id="演示" tabindex="-1"><a class="header-anchor" href="#演示"><span>演示</span></a></h4><p>插入文档</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/5</span>
<span class="line">{</span>
<span class="line">  &quot;test_field1&quot;: &quot;ydl&quot;,</span>
<span class="line">  &quot;test_field2&quot;: &quot;ydlclass&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改字段1</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /test_index/_doc/<span class="token number">5</span>/_update</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;test_field2&quot;</span><span class="token operator">:</span> <span class="token string">&quot; ydlclass 2&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、-使用脚本更新" tabindex="-1"><a class="header-anchor" href="#六、-使用脚本更新"><span>六、 使用脚本更新</span></a></h3><p>es可以内置脚本执行复杂操作。例如painless脚本。</p><p>注意：groovy脚本在es6以后就不支持了。原因是耗内存，不安全远程注入漏洞。</p><h4 id="_1、内置脚本" tabindex="-1"><a class="header-anchor" href="#_1、内置脚本"><span>1、内置脚本</span></a></h4><p>需求1：修改文档6的num字段，+1。</p><p>插入数据</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /test_index/_doc/<span class="token number">6</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;num&quot;</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;tags&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行脚本操作</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /test_index/_doc/<span class="token number">6</span>/_update</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">   <span class="token property">&quot;script&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;ctx._source.num+=1&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询数据</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /test_index/_doc/6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;test_index&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;6&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">23</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;found&quot;</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_source&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;num&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;tags&quot;</span> <span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需求2：搜索所有文档，将num字段乘以2输出</p><p>插入数据</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/7</span>
<span class="line">{</span>
<span class="line">  &quot;num&quot;: 5</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查询</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">GET /test_index/_search</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;script_fields&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;my_doubled_field&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token property">&quot;script&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">       <span class="token property">&quot;lang&quot;</span><span class="token operator">:</span> <span class="token string">&quot;expression&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;source&quot;</span><span class="token operator">:</span> <span class="token string">&quot;doc[&#39;num&#39;] * multiplier&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;params&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token property">&quot;multiplier&quot;</span><span class="token operator">:</span> <span class="token number">2</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">        &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">        &quot;_type&quot; : &quot;_doc&quot;,</span>
<span class="line">        &quot;_id&quot; : &quot;7&quot;,</span>
<span class="line">        &quot;_score&quot; : 1.0,</span>
<span class="line">        &quot;fields&quot; : {</span>
<span class="line">          &quot;my_doubled_field&quot; : [</span>
<span class="line">            10.0</span>
<span class="line">          ]</span>
<span class="line">        }</span>
<span class="line">      }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、外部脚本" tabindex="-1"><a class="header-anchor" href="#_2、外部脚本"><span>2、外部脚本</span></a></h4><p>Painless是内置支持的。脚本内容可以通过多种途径传给 es，包括 rest 接口，或者放到 config/scripts目录等，默认开启。</p><p>注意：脚本性能低下，且容易发生注入，本教程忽略。</p><p>官方文档：https://www.elastic.co/guide/en/elasticsearch/reference/current/modules-scripting-using.html</p><h3 id="七、-图解es的并发问题" tabindex="-1"><a class="header-anchor" href="#七、-图解es的并发问题"><span>七、 图解es的并发问题</span></a></h3><p>如同秒杀，多线程情况下，es同样会出现并发冲突问题。</p><h3 id="八、-图解悲观锁与乐观锁机制" tabindex="-1"><a class="header-anchor" href="#八、-图解悲观锁与乐观锁机制"><span>八、 图解悲观锁与乐观锁机制</span></a></h3><p>为控制并发问题，我们通常采用锁机制。分为悲观锁和乐观锁两种机制。</p><p>悲观锁：很悲观，所有情况都上锁。此时只有一个线程可以操作数据。具体例子为数据库中的行级锁、表级锁、读锁、写锁等。</p><p>特点：优点是方便，直接加锁，对程序透明。缺点是效率低。</p><p>乐观锁：很乐观，对数据本身不加锁。提交数据时，通过一种机制验证是否存在冲突，如es中通过版本号验证。</p><p>特点：优点是并发能力高。缺点是操作繁琐，在提交数据时，可能反复重试多次。</p><h3 id="九、图解es内部基于-version乐观锁控制" tabindex="-1"><a class="header-anchor" href="#九、图解es内部基于-version乐观锁控制"><span>九、图解es内部基于_version乐观锁控制</span></a></h3><h4 id="实验基于-version的版本控制" tabindex="-1"><a class="header-anchor" href="#实验基于-version的版本控制"><span>实验基于_version的版本控制</span></a></h4><p>es对于文档的增删改都是基于版本号。</p><p>1新增多次文档：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/3</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;test&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回版本号递增</p><p>2删除此文档</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">DELETE /test_index/_doc/3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>返回</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">DELETE /test_index/_doc/3</span>
<span class="line">{</span>
<span class="line">  &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">  &quot;_type&quot; : &quot;_doc&quot;,</span>
<span class="line">  &quot;_id&quot; : &quot;2&quot;,</span>
<span class="line">  &quot;_version&quot; : 6,</span>
<span class="line">  &quot;result&quot; : &quot;deleted&quot;,</span>
<span class="line">  &quot;_shards&quot; : {</span>
<span class="line">    &quot;total&quot; : 2,</span>
<span class="line">    &quot;successful&quot; : 1,</span>
<span class="line">    &quot;failed&quot; : 0</span>
<span class="line">  },</span>
<span class="line">  &quot;_seq_no&quot; : 7,</span>
<span class="line">  &quot;_primary_term&quot; : 1</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3再新增</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/3</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;test&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到版本号依然递增，验证延迟删除策略。</p><p>如果删除一条数据立马删除的话，所有分片和副本都要立马删除，对es集群压力太大。</p><h4 id="图解es内部并发控制" tabindex="-1"><a class="header-anchor" href="#图解es内部并发控制"><span>图解es内部并发控制</span></a></h4><p>es内部主从同步时，是多线程异步。乐观锁机制。</p><h3 id="十、演示客户端程序基于-version并发操作流程" tabindex="-1"><a class="header-anchor" href="#十、演示客户端程序基于-version并发操作流程"><span>十、演示客户端程序基于_version并发操作流程</span></a></h3><p>java python客户端更新的机制。</p><h4 id="_1、新建文档" tabindex="-1"><a class="header-anchor" href="#_1、新建文档"><span>1、新建文档</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">PUT /test_index/_doc/<span class="token number">5</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;test_field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ydl&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;_index&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;test_index&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_type&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;_doc&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_version&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;result&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;created&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_shards&quot;</span> <span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;total&quot;</span> <span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;successful&quot;</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token property">&quot;failed&quot;</span> <span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_seq_no&quot;</span> <span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;_primary_term&quot;</span> <span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、客户端1修改。带版本号1。" tabindex="-1"><a class="header-anchor" href="#_2、客户端1修改。带版本号1。"><span>2、客户端1修改。带版本号1。</span></a></h4><p>首先获取数据的当前版本号</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /test_index/_doc/5</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>更新文档</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/5?version=1</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl1&quot;</span>
<span class="line">}</span>
<span class="line">PUT /test_index/_doc/5?if_seq_no=21&amp;if_primary_term=1</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl1&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、客户端2并发修改。带版本号1。" tabindex="-1"><a class="header-anchor" href="#_3、客户端2并发修改。带版本号1。"><span>3、客户端2并发修改。带版本号1。</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/5?version=1</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl2&quot;</span>
<span class="line">}</span>
<span class="line">PUT /test_index/_doc/5?if_seq_no=21&amp;if_primary_term=1</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl1&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错。</p><h4 id="_4、客户端2重新查询。得到最新版本为2。seq-no-22" tabindex="-1"><a class="header-anchor" href="#_4、客户端2重新查询。得到最新版本为2。seq-no-22"><span>4、客户端2重新查询。得到最新版本为2。seq_no=22</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /test_index/_doc/4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_5、客户端2并发修改。带版本号2。" tabindex="-1"><a class="header-anchor" href="#_5、客户端2并发修改。带版本号2。"><span>5、客户端2并发修改。带版本号2。</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/4?version=2</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl2&quot;</span>
<span class="line">}</span>
<span class="line">es7</span>
<span class="line">PUT /test_index/_doc/5?if_seq_no=22&amp;if_primary_term=1</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl2&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改成功。</p><h3 id="十一、演示自己手动控制版本号-external-version" tabindex="-1"><a class="header-anchor" href="#十一、演示自己手动控制版本号-external-version"><span>十一、演示自己手动控制版本号 external version</span></a></h3><p>背景：已有数据是在数据库中，有自己手动维护的版本号的情况下，可以使用external version控制。hbase。</p><p>要求：修改时external version要大于当前文档的_version</p><p>对比：基于_version时，修改的文档version等于当前文档的版本号。</p><p>使用?version=1&amp;version_type=external</p><h4 id="_1、新建文档-1" tabindex="-1"><a class="header-anchor" href="#_1、新建文档-1"><span>1、新建文档</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/4</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新文档：</p><h4 id="_2、客户端1修改文档" tabindex="-1"><a class="header-anchor" href="#_2、客户端1修改文档"><span>2、客户端1修改文档</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/4?version=2&amp;version_type=external</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl1&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、客户端2同时修改" tabindex="-1"><a class="header-anchor" href="#_3、客户端2同时修改"><span>3、客户端2同时修改</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/4?version=2&amp;version_type=external</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl2&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;error&quot;: {</span>
<span class="line">    &quot;root_cause&quot;: [</span>
<span class="line">      {</span>
<span class="line">        &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span>
<span class="line">        &quot;reason&quot;: &quot;[4]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;,</span>
<span class="line">        &quot;index_uuid&quot;: &quot;-rqYZ2EcSPqL6pu8Gi35jw&quot;,</span>
<span class="line">        &quot;shard&quot;: &quot;1&quot;,</span>
<span class="line">        &quot;index&quot;: &quot;test_index&quot;</span>
<span class="line">      }</span>
<span class="line">    ],</span>
<span class="line">    &quot;type&quot;: &quot;version_conflict_engine_exception&quot;,</span>
<span class="line">    &quot;reason&quot;: &quot;[4]: version conflict, current version [2] is higher or equal to the one provided [2]&quot;,</span>
<span class="line">    &quot;index_uuid&quot;: &quot;-rqYZ2EcSPqL6pu8Gi35jw&quot;,</span>
<span class="line">    &quot;shard&quot;: &quot;1&quot;,</span>
<span class="line">    &quot;index&quot;: &quot;test_index&quot;</span>
<span class="line">  },</span>
<span class="line">  &quot;status&quot;: 409</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、客户端2重新查询数据" tabindex="-1"><a class="header-anchor" href="#_4、客户端2重新查询数据"><span>4、客户端2重新查询数据</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /test_index/_doc/4</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_5、客户端2重新修改数据" tabindex="-1"><a class="header-anchor" href="#_5、客户端2重新修改数据"><span>5、客户端2重新修改数据</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/4?version=3&amp;version_type=external</span>
<span class="line">{</span>
<span class="line">  &quot;test_field&quot;: &quot;ydl2&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="十二、更新时-retry-on-conflict-参数" tabindex="-1"><a class="header-anchor" href="#十二、更新时-retry-on-conflict-参数"><span>十二、更新时 retry_on_conflict 参数</span></a></h3><h4 id="_1、retry-on-conflict" tabindex="-1"><a class="header-anchor" href="#_1、retry-on-conflict"><span>1、retry_on_conflict</span></a></h4><p>指定重试次数</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">POST /test_index/_doc/5/_update?retry_on_conflict=3</span>
<span class="line">{</span>
<span class="line">  &quot;doc&quot;: {</span>
<span class="line">    &quot;test_field&quot;: &quot;ydl1&quot;</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、与-version结合使用" tabindex="-1"><a class="header-anchor" href="#_2、与-version结合使用"><span>2、与 _version结合使用</span></a></h4><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /test_index/_doc/<span class="token number">5</span>/_update?retry_on_conflict=<span class="token number">3</span>&amp;version=<span class="token number">22</span>&amp;version_type=external</span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;doc&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token property">&quot;test_field&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ydl1&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="十三、-批量查询-mget" tabindex="-1"><a class="header-anchor" href="#十三、-批量查询-mget"><span>十三、 批量查询 mget</span></a></h3><p>单条查询 GET /test_index/_doc/1，如果查询多个id的文档一条一条查询，网络开销太大。</p><h4 id="_1、mget-批量查询" tabindex="-1"><a class="header-anchor" href="#_1、mget-批量查询"><span>1、mget 批量查询：</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /_mget</span>
<span class="line">{</span>
<span class="line">   &quot;docs&quot; : [</span>
<span class="line">      {</span>
<span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">         &quot;_type&quot; :  &quot;_doc&quot;,</span>
<span class="line">         &quot;_id&quot; :    1</span>
<span class="line">      },</span>
<span class="line">      {</span>
<span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">         &quot;_type&quot; :  &quot;_doc&quot;,</span>
<span class="line">         &quot;_id&quot; :    7</span>
<span class="line">      }</span>
<span class="line">   ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;docs&quot; : [</span>
<span class="line">    {</span>
<span class="line">      &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span>
<span class="line">      &quot;_id&quot; : &quot;2&quot;,</span>
<span class="line">      &quot;_version&quot; : 6,</span>
<span class="line">      &quot;_seq_no&quot; : 12,</span>
<span class="line">      &quot;_primary_term&quot; : 1,</span>
<span class="line">      &quot;found&quot; : true,</span>
<span class="line">      &quot;_source&quot; : {</span>
<span class="line">        &quot;test_field&quot; : &quot;test12333123321321&quot;</span>
<span class="line">      }</span>
<span class="line">    },</span>
<span class="line">    {</span>
<span class="line">      &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">      &quot;_type&quot; : &quot;_doc&quot;,</span>
<span class="line">      &quot;_id&quot; : &quot;3&quot;,</span>
<span class="line">      &quot;_version&quot; : 6,</span>
<span class="line">      &quot;_seq_no&quot; : 18,</span>
<span class="line">      &quot;_primary_term&quot; : 1,</span>
<span class="line">      &quot;found&quot; : true,</span>
<span class="line">      &quot;_source&quot; : {</span>
<span class="line">        &quot;test_field&quot; : &quot;test3213&quot;</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>提示去掉type</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /_mget</span>
<span class="line">{</span>
<span class="line">   &quot;docs&quot; : [</span>
<span class="line">      {</span>
<span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">         &quot;_id&quot; :    2</span>
<span class="line">      },</span>
<span class="line">      {</span>
<span class="line">         &quot;_index&quot; : &quot;test_index&quot;,</span>
<span class="line">         &quot;_id&quot; :    3</span>
<span class="line">      }</span>
<span class="line">   ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="同一索引下批量查询" tabindex="-1"><a class="header-anchor" href="#同一索引下批量查询"><span>同一索引下批量查询：</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /test_index/_mget</span>
<span class="line">{</span>
<span class="line">   &quot;docs&quot; : [</span>
<span class="line">      {</span>
<span class="line">         &quot;_id&quot; :    2</span>
<span class="line">      },</span>
<span class="line">      {</span>
<span class="line">         &quot;_id&quot; :    3</span>
<span class="line">      }</span>
<span class="line">   ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第三种写法-搜索写法" tabindex="-1"><a class="header-anchor" href="#第三种写法-搜索写法"><span>第三种写法：搜索写法</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">post /test_index/_doc/_search</span>
<span class="line">{</span>
<span class="line">    &quot;query&quot;: {</span>
<span class="line">        &quot;ids&quot; : {</span>
<span class="line">            &quot;values&quot; : [&quot;1&quot;, &quot;7&quot;]</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="十四、批量增删改-bulk" tabindex="-1"><a class="header-anchor" href="#十四、批量增删改-bulk"><span>十四、批量增删改 bulk</span></a></h3><p>Bulk 操作解释将文档的增删改查一些列操作，通过一次请求全都做完。减少网络传输次数。</p><p>语法：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">POST /_bulk</span>
<span class="line">{&quot;action&quot;: {&quot;metadata&quot;}}</span>
<span class="line">{&quot;data&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如下操作，删除5，新增14，修改2。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">POST /_bulk</span>
<span class="line">{ &quot;delete&quot;: { &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;5&quot; }} </span>
<span class="line">{ &quot;create&quot;: { &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;14&quot; }}</span>
<span class="line">{ &quot;test_field&quot;: &quot;test14&quot; }</span>
<span class="line">{ &quot;update&quot;: { &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;2&quot;} }</span>
<span class="line">{ &quot;doc&quot; : {&quot;test_field&quot; : &quot;bulk test&quot;} }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结：</p><p>1功能：</p><ul><li>delete：删除一个文档，只要1个json串就可以了</li><li>create：相当于强制创建 PUT /index/type/id/_create</li><li>index：普通的put操作，可以是创建文档，也可以是全量替换文档</li><li>update：执行的是局部更新partial update操作</li></ul><p>2格式：每个json不能换行。相邻json必须换行。</p><p>3隔离：每个操作互不影响。操作失败的行会返回其失败信息。</p><p>4实际用法：bulk请求一次不要太大，否则一下积压到内存中，性能会下降。所以，一次请求几千个操作、大小在几M正好。</p><h3 id="十五、-文档概念学习总结" tabindex="-1"><a class="header-anchor" href="#十五、-文档概念学习总结"><span>十五、 文档概念学习总结</span></a></h3><p><strong>章节回顾</strong></p><p>1文档的增删改查</p><p>2文档字段解析</p><p>3内部锁机制</p><p>4批量查询修改</p><p><strong>es是什么</strong></p><p>一个分布式的文档数据存储系统distributed document store。es看做一个分布式nosql数据库。如redis\\mongoDB\\hbase。</p><p>文档数据：es可以存储和操作json文档类型的数据，而且这也是es的核心数据结构。 存储系统：es可以对json文档类型的数据进行存储，查询，创建，更新，删除，等等操作。</p><p><strong>应用场景</strong></p><ul><li>大数据。es的分布式特点，水平扩容承载大数据。</li><li>数据结构灵活。列随时变化。使用关系型数据库将会建立大量的关联表，增加系统复杂度。</li><li>数据操作简单。就是查询，不涉及事务。</li></ul><p><strong>举例</strong></p><p>电商页面、传统论坛页面等。面向的对象比较复杂，但是作为终端，没有太复杂的功能（事务），只涉及简单的增删改查crud。</p><p>这个时候选用ES这种NoSQL型的数据存储，比传统的复杂的事务强大的关系型数据库，更加合适一些。无论是性能，还是吞吐量，可能都会更好。</p><h2 id="第七章-java-api-实现文档管理" tabindex="-1"><a class="header-anchor" href="#第七章-java-api-实现文档管理"><span>第七章 Java api 实现文档管理</span></a></h2><h3 id="一、es技术特点" tabindex="-1"><a class="header-anchor" href="#一、es技术特点"><span>一、es技术特点</span></a></h3><p>1es技术比较特殊，不像其他分布式、大数据课程，haddop、spark、hbase。es代码层面很好写，难的是概念的理解。</p><p>2es最重要的是他的rest api。跨语言的。在真实生产中，探查数据、分析数据，使用rest更方便。</p><p>3本课程将会大量讲解内部原理及rest api。java代码会在重要的api后学习。</p><h3 id="二、-java-客户端简单获取数据" tabindex="-1"><a class="header-anchor" href="#二、-java-客户端简单获取数据"><span>二、 java 客户端简单获取数据</span></a></h3><p>java api 文档 https://www.elastic.co/guide/en/elasticsearch/client/java-rest/7.3/java-rest-overview.html</p><p>low : 偏向底层。</p><p>high：高级封装。足够。</p><p>1导包</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch.client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch-rest-high-level-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>elasticsearch<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>7.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2代码</p><p>步骤</p><p>1 获取连接客户端</p><p>2构建请求</p><p>3执行</p><p>4获取结果</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">    <span class="token comment">//获取连接客户端</span></span>
<span class="line">    <span class="token class-name">RestHighLevelClient</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestHighLevelClient</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token class-name">RestClient</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span></span>
<span class="line">                    <span class="token keyword">new</span> <span class="token class-name">HttpHost</span><span class="token punctuation">(</span><span class="token string">&quot;localhost&quot;</span><span class="token punctuation">,</span> <span class="token number">9200</span><span class="token punctuation">,</span> <span class="token string">&quot;http&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//构建请求</span></span>
<span class="line">    <span class="token class-name">GetRequest</span> getRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">&quot;book&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 执行</span></span>
<span class="line">    <span class="token class-name">GetResponse</span> getResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 获取结果</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>getResponse<span class="token punctuation">.</span><span class="token function">isExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">long</span> version <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> sourceAsString <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检索文档(String形式)</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceAsString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、结合spring-boot-test测试文档查询" tabindex="-1"><a class="header-anchor" href="#三、结合spring-boot-test测试文档查询"><span>三、结合spring-boot-test测试文档查询</span></a></h3><p>0为什么使用spring boot test</p><ul><li>当今趋势</li><li>方便开发</li><li>创建连接交由spring容器，避免每次请求的网络开销。</li></ul><p>1导包</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.0.6.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2配置 application.yml</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml" data-title="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">application</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> service<span class="token punctuation">-</span>search</span>
<span class="line"><span class="token key atrule">heima</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">elasticsearch</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">hostlist</span><span class="token punctuation">:</span> 127.0.0.1<span class="token punctuation">:</span><span class="token number">9200</span> <span class="token comment">#多个结点中间用逗号分隔</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3代码</p><p>主类</p><p>配置类</p><p>测试类</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@SpringBootTest</span></span>
<span class="line"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//查询文档</span></span>
<span class="line">       <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">//构建请求</span></span>
<span class="line">        <span class="token class-name">GetRequest</span> getRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetRequest</span><span class="token punctuation">(</span><span class="token string">&quot;test_post&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//========================可选参数 start======================</span></span>
<span class="line">        <span class="token comment">//为特定字段配置_source_include</span></span>
<span class="line"><span class="token comment">//        String[] includes = new String[]{&quot;user&quot;, &quot;message&quot;};</span></span>
<span class="line"><span class="token comment">//        String[] excludes = Strings.EMPTY_ARRAY;</span></span>
<span class="line"><span class="token comment">//        FetchSourceContext fetchSourceContext = new FetchSourceContext(true, includes, excludes);</span></span>
<span class="line"><span class="token comment">//        getRequest.fetchSourceContext(fetchSourceContext);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//为特定字段配置_source_excludes</span></span>
<span class="line"><span class="token comment">//        String[] includes1 = new String[]{&quot;user&quot;, &quot;message&quot;};</span></span>
<span class="line"><span class="token comment">//        String[] excludes1 = Strings.EMPTY_ARRAY;</span></span>
<span class="line"><span class="token comment">//        FetchSourceContext fetchSourceContext1 = new FetchSourceContext(true, includes1, excludes1);</span></span>
<span class="line"><span class="token comment">//        getRequest.fetchSourceContext(fetchSourceContext1);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//设置路由</span></span>
<span class="line"><span class="token comment">//        getRequest.routing(&quot;routing&quot;);</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// ========================可选参数 end=====================</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//查询 同步查询</span></span>
<span class="line">      <span class="token class-name">GetResponse</span> getResponse <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>getRequest<span class="token punctuation">,</span> <span class="token class-name">RequestOptions</span><span class="token punctuation">.</span><span class="token constant">DEFAULT</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//异步查询</span></span>
<span class="line"><span class="token comment">//        ActionListener&lt;GetResponse&gt; listener = new ActionListener&lt;GetResponse&gt;() {</span></span>
<span class="line"><span class="token comment">//            //查询成功时的立马执行的方法</span></span>
<span class="line"><span class="token comment">//            @Override</span></span>
<span class="line"><span class="token comment">//            public void onResponse(GetResponse getResponse) {</span></span>
<span class="line"><span class="token comment">//                long version = getResponse.getVersion();</span></span>
<span class="line"><span class="token comment">//                String sourceAsString = getResponse.getSourceAsString();//检索文档(String形式)</span></span>
<span class="line"><span class="token comment">//                System.out.println(sourceAsString);</span></span>
<span class="line"><span class="token comment">//            }</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">//            //查询失败时的立马执行的方法</span></span>
<span class="line"><span class="token comment">//            @Override</span></span>
<span class="line"><span class="token comment">//            public void onFailure(Exception e) {</span></span>
<span class="line"><span class="token comment">//                e.printStackTrace();</span></span>
<span class="line"><span class="token comment">//            }</span></span>
<span class="line"><span class="token comment">//        };</span></span>
<span class="line"><span class="token comment">//        //执行异步请求</span></span>
<span class="line"><span class="token comment">//        client.getAsync(getRequest, RequestOptions.DEFAULT, listener);</span></span>
<span class="line"><span class="token comment">//        try {</span></span>
<span class="line"><span class="token comment">//            Thread.sleep(5000);</span></span>
<span class="line"><span class="token comment">//        } catch (InterruptedException e) {</span></span>
<span class="line"><span class="token comment">//            e.printStackTrace();</span></span>
<span class="line"><span class="token comment">//        }</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">// 获取结果</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>getResponse<span class="token punctuation">.</span><span class="token function">isExists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">long</span> version <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">String</span> sourceAsString <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getSourceAsString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//检索文档(String形式)</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceAsString<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sourceAsBytes <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getSourceAsBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//以字节接受</span></span>
<span class="line">            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> sourceAsMap <span class="token operator">=</span> getResponse<span class="token punctuation">.</span><span class="token function">getSourceAsMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sourceAsMap<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、结合spring-boot-test测试文档新增" tabindex="-1"><a class="header-anchor" href="#四、结合spring-boot-test测试文档新增"><span>四、结合spring-boot-test测试文档新增</span></a></h3><p>rest api</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT test_post/_doc/2</span>
<span class="line">{</span>
<span class="line">  &quot;user&quot;:&quot;tomas&quot;,</span>
<span class="line">  &quot;postDate&quot;:&quot;2019-07-18&quot;,</span>
<span class="line">  &quot;message&quot;:&quot;trying out es1&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">@Test</span>
<span class="line">    public void testAdd() throws IOException {</span>
<span class="line">//        1构建请求</span>
<span class="line">        IndexRequest request=new IndexRequest(&quot;test_posts&quot;);</span>
<span class="line">        request.id(&quot;3&quot;);</span>
<span class="line">//        =======================构建文档============================</span>
<span class="line">//        构建方法1</span>
<span class="line">        String jsonString=&quot;{\\n&quot; +</span>
<span class="line">                &quot;  \\&quot;user\\&quot;:\\&quot;tomas J\\&quot;,\\n&quot; +</span>
<span class="line">                &quot;  \\&quot;postDate\\&quot;:\\&quot;2019-07-18\\&quot;,\\n&quot; +</span>
<span class="line">                &quot;  \\&quot;message\\&quot;:\\&quot;trying out es3\\&quot;\\n&quot; +</span>
<span class="line">                &quot;}&quot;;</span>
<span class="line">        request.source(jsonString, XContentType.JSON);</span>
<span class="line"></span>
<span class="line">//        构建方法2</span>
<span class="line">//        Map&lt;String,Object&gt; jsonMap=new HashMap&lt;&gt;();</span>
<span class="line">//        jsonMap.put(&quot;user&quot;, &quot;tomas&quot;);</span>
<span class="line">//        jsonMap.put(&quot;postDate&quot;, &quot;2019-07-18&quot;);</span>
<span class="line">//        jsonMap.put(&quot;message&quot;, &quot;trying out es2&quot;);</span>
<span class="line">//        request.source(jsonMap);</span>
<span class="line"></span>
<span class="line">//        构建方法3</span>
<span class="line">//        XContentBuilder builder= XContentFactory.jsonBuilder();</span>
<span class="line">//        builder.startObject();</span>
<span class="line">//        {</span>
<span class="line">//            builder.field(&quot;user&quot;, &quot;tomas&quot;);</span>
<span class="line">//            builder.timeField(&quot;postDate&quot;, new Date());</span>
<span class="line">//            builder.field(&quot;message&quot;, &quot;trying out es2&quot;);</span>
<span class="line">//        }</span>
<span class="line">//        builder.endObject();</span>
<span class="line">//        request.source(builder);</span>
<span class="line">//        构建方法4</span>
<span class="line">//        request.source(&quot;user&quot;,&quot;tomas&quot;,</span>
<span class="line">//                    &quot;postDate&quot;,new Date(),</span>
<span class="line">//                &quot;message&quot;,&quot;trying out es2&quot;);</span>
<span class="line">//</span>
<span class="line">//        ========================可选参数===================================</span>
<span class="line">        //设置超时时间</span>
<span class="line">        request.timeout(TimeValue.timeValueSeconds(1));</span>
<span class="line">        request.timeout(&quot;1s&quot;);</span>
<span class="line"></span>
<span class="line">        //自己维护版本号</span>
<span class="line">//        request.version(2);</span>
<span class="line">//        request.versionType(VersionType.EXTERNAL);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">//        2执行</span>
<span class="line">        //同步</span>
<span class="line">        IndexResponse indexResponse = client.index(request, RequestOptions.DEFAULT);</span>
<span class="line">        //异步</span>
<span class="line">//        ActionListener&lt;IndexResponse&gt; listener=new ActionListener&lt;IndexResponse&gt;() {</span>
<span class="line">//            @Override</span>
<span class="line">//            public void onResponse(IndexResponse indexResponse) {</span>
<span class="line">//</span>
<span class="line">//            }</span>
<span class="line">//</span>
<span class="line">//            @Override</span>
<span class="line">//            public void onFailure(Exception e) {</span>
<span class="line">//</span>
<span class="line">//            }</span>
<span class="line">//        };</span>
<span class="line">//        client.indexAsync(request,RequestOptions.DEFAULT, listener );</span>
<span class="line">//        try {</span>
<span class="line">//            Thread.sleep(5000);</span>
<span class="line">//        } catch (InterruptedException e) {</span>
<span class="line">//            e.printStackTrace();</span>
<span class="line">//        }</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">//        3获取结果</span>
<span class="line">        String index = indexResponse.getIndex();</span>
<span class="line">        String id = indexResponse.getId();</span>
<span class="line">        //获取插入的类型</span>
<span class="line">        if(indexResponse.getResult()== DocWriteResponse.Result.CREATED){</span>
<span class="line">            DocWriteResponse.Result result=indexResponse.getResult();</span>
<span class="line">            System.out.println(&quot;CREATED:&quot;+result);</span>
<span class="line">        }else if(indexResponse.getResult()== DocWriteResponse.Result.UPDATED){</span>
<span class="line">            DocWriteResponse.Result result=indexResponse.getResult();</span>
<span class="line">            System.out.println(&quot;UPDATED:&quot;+result);</span>
<span class="line">        }</span>
<span class="line"></span>
<span class="line">        ReplicationResponse.ShardInfo shardInfo = indexResponse.getShardInfo();</span>
<span class="line">        if(shardInfo.getTotal()!=shardInfo.getSuccessful()){</span>
<span class="line">            System.out.println(&quot;处理成功的分片数少于总分片！&quot;);</span>
<span class="line">        }</span>
<span class="line">        if(shardInfo.getFailed()&gt;0){</span>
<span class="line">           for (ReplicationResponse.ShardInfo.Failure failure:shardInfo.getFailures()) {</span>
<span class="line">               String reason = failure.reason();//处理潜在的失败原因</span>
<span class="line">               System.out.println(reason);</span>
<span class="line">           }</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、结合spring-boot-test测试文档修改" tabindex="-1"><a class="header-anchor" href="#五、结合spring-boot-test测试文档修改"><span>五、结合spring-boot-test测试文档修改</span></a></h3><p>rest api</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">post /test_posts/_doc/3/_update </span>
<span class="line">{</span>
<span class="line">   &quot;doc&quot;: {</span>
<span class="line">      &quot;user&quot;：&quot;tomas J&quot;</span>
<span class="line">   }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">  @Test</span>
<span class="line">    public void testUpdate() throws IOException {</span>
<span class="line">//        1构建请求</span>
<span class="line">        UpdateRequest request = new UpdateRequest(&quot;test_posts&quot;, &quot;3&quot;);</span>
<span class="line">        Map&lt;String, Object&gt; jsonMap = new HashMap&lt;&gt;();</span>
<span class="line">        jsonMap.put(&quot;user&quot;, &quot;tomas JJ&quot;);</span>
<span class="line">        request.doc(jsonMap);</span>
<span class="line">//===============================可选参数==========================================</span>
<span class="line">        request.timeout(&quot;1s&quot;);//超时时间</span>
<span class="line"></span>
<span class="line">        //重试次数</span>
<span class="line">        request.retryOnConflict(3);</span>
<span class="line"></span>
<span class="line">        //设置在继续更新之前，必须激活的分片数</span>
<span class="line">//        request.waitForActiveShards(2);</span>
<span class="line">        //所有分片都是active状态，才更新</span>
<span class="line">//        request.waitForActiveShards(ActiveShardCount.ALL);</span>
<span class="line"></span>
<span class="line">//        2执行</span>
<span class="line">//        同步</span>
<span class="line">        UpdateResponse updateResponse = client.update(request, RequestOptions.DEFAULT);</span>
<span class="line">//        异步</span>
<span class="line"></span>
<span class="line">//        3获取数据</span>
<span class="line">        updateResponse.getId();</span>
<span class="line">        updateResponse.getIndex();</span>
<span class="line"></span>
<span class="line">        //判断结果</span>
<span class="line">        if (updateResponse.getResult() == DocWriteResponse.Result.CREATED) {</span>
<span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span>
<span class="line">            System.out.println(&quot;CREATED:&quot; + result);</span>
<span class="line">        } else if (updateResponse.getResult() == DocWriteResponse.Result.UPDATED) {</span>
<span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span>
<span class="line">            System.out.println(&quot;UPDATED:&quot; + result);</span>
<span class="line">        }else if(updateResponse.getResult() == DocWriteResponse.Result.DELETED){</span>
<span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span>
<span class="line">            System.out.println(&quot;DELETED:&quot; + result);</span>
<span class="line">        }else if (updateResponse.getResult() == DocWriteResponse.Result.NOOP){</span>
<span class="line">            //没有操作</span>
<span class="line">            DocWriteResponse.Result result = updateResponse.getResult();</span>
<span class="line">            System.out.println(&quot;NOOP:&quot; + result);</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="六、结合spring-boot-test测试文档删除" tabindex="-1"><a class="header-anchor" href="#六、结合spring-boot-test测试文档删除"><span>六、结合spring-boot-test测试文档删除</span></a></h3><p>rest api</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">DELETE /test_posts/_doc/3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>代码</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> @Test</span>
<span class="line">    public void testDelete() throws IOException {</span>
<span class="line">//        1构建请求</span>
<span class="line">        DeleteRequest request =new DeleteRequest(&quot;test_posts&quot;,&quot;3&quot;);</span>
<span class="line">        //可选参数</span>
<span class="line">//        2执行</span>
<span class="line">        DeleteResponse deleteResponse = client.delete(request, RequestOptions.DEFAULT);</span>
<span class="line"></span>
<span class="line"></span>
<span class="line">//        3获取数据</span>
<span class="line">        deleteResponse.getId();</span>
<span class="line">        deleteResponse.getIndex();</span>
<span class="line"></span>
<span class="line">        DocWriteResponse.Result result = deleteResponse.getResult();</span>
<span class="line">        System.out.println(result);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="七、结合spring-boot-test测试文档bulk" tabindex="-1"><a class="header-anchor" href="#七、结合spring-boot-test测试文档bulk"><span>七、结合spring-boot-test测试文档bulk</span></a></h3><p>rest api</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">POST /_bulk</span>
<span class="line">{&quot;action&quot;: {&quot;metadata&quot;}}</span>
<span class="line">{&quot;data&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">@Test</span>
<span class="line">    public void testBulk() throws IOException {</span>
<span class="line">//        1创建请求</span>
<span class="line">        BulkRequest request = new BulkRequest();</span>
<span class="line">//        request.add(new IndexRequest(&quot;post&quot;).id(&quot;1&quot;).source(XContentType.JSON, &quot;field&quot;, &quot;1&quot;));</span>
<span class="line">//        request.add(new IndexRequest(&quot;post&quot;).id(&quot;2&quot;).source(XContentType.JSON, &quot;field&quot;, &quot;2&quot;));</span>
<span class="line"></span>
<span class="line">        request.add(new UpdateRequest(&quot;post&quot;,&quot;2&quot;).doc(XContentType.JSON, &quot;field&quot;, &quot;3&quot;));</span>
<span class="line">        request.add(new DeleteRequest(&quot;post&quot;).id(&quot;1&quot;));</span>
<span class="line"></span>
<span class="line">//        2执行</span>
<span class="line">        BulkResponse bulkResponse = client.bulk(request, RequestOptions.DEFAULT);</span>
<span class="line"></span>
<span class="line">        for (BulkItemResponse itemResponse : bulkResponse) {</span>
<span class="line">            DocWriteResponse itemResponseResponse = itemResponse.getResponse();</span>
<span class="line"></span>
<span class="line">            switch (itemResponse.getOpType()) {</span>
<span class="line">                case INDEX:</span>
<span class="line">                case CREATE:</span>
<span class="line">                    IndexResponse indexResponse = (IndexResponse) itemResponseResponse;</span>
<span class="line">                    indexResponse.getId();</span>
<span class="line">                    System.out.println(indexResponse.getResult());</span>
<span class="line">                    break;</span>
<span class="line">                case UPDATE:</span>
<span class="line">                    UpdateResponse updateResponse = (UpdateResponse) itemResponseResponse;</span>
<span class="line">                    updateResponse.getIndex();</span>
<span class="line">                    System.out.println(updateResponse.getResult());</span>
<span class="line">                    break;</span>
<span class="line">                case DELETE:</span>
<span class="line">                    DeleteResponse deleteResponse = (DeleteResponse) itemResponseResponse;</span>
<span class="line">                    System.out.println(deleteResponse.getResult());</span>
<span class="line">                    break;</span>
<span class="line">            }</span>
<span class="line">        }</span>
<span class="line">    }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第八章-图解es内部机制" tabindex="-1"><a class="header-anchor" href="#第八章-图解es内部机制"><span>第八章 图解es内部机制</span></a></h2><h3 id="一、图解es分布式基础" tabindex="-1"><a class="header-anchor" href="#一、图解es分布式基础"><span>一、图解es分布式基础</span></a></h3><h4 id="_1、es对复杂分布式机制的透明隐藏特性" tabindex="-1"><a class="header-anchor" href="#_1、es对复杂分布式机制的透明隐藏特性"><span>1、es对复杂分布式机制的透明隐藏特性</span></a></h4><ul><li>分布式机制：分布式数据存储及共享。</li><li>分片机制：数据存储到哪个分片，副本数据写入。</li><li>集群发现机制：cluster discovery。新启动es实例，自动加入集群。</li><li>shard负载均衡：大量数据写入及查询，es会将数据平均分配。</li><li>shard副本：新增副本数，分片重分配。</li></ul><h4 id="_2、elasticsearch的垂直扩容与水平扩容" tabindex="-1"><a class="header-anchor" href="#_2、elasticsearch的垂直扩容与水平扩容"><span>2、Elasticsearch的垂直扩容与水平扩容</span></a></h4><p>垂直扩容：使用更加强大的服务器替代老服务器。但单机存储及运算能力有上线。且成本直线上升。如10t服务器1万。单个10T服务器可能20万。</p><p>水平扩容：采购更多服务器，加入集群。大数据。</p><h4 id="_3、增减或减少节点时的数据rebalance" tabindex="-1"><a class="header-anchor" href="#_3、增减或减少节点时的数据rebalance"><span>3、增减或减少节点时的数据rebalance</span></a></h4><p>新增或减少es实例时，es集群会将数据重新分配。</p><h4 id="_4、master节点" tabindex="-1"><a class="header-anchor" href="#_4、master节点"><span>4、master节点</span></a></h4><p>功能：</p><ul><li>创建删除节点</li><li>创建删除索引</li></ul><h4 id="_5、节点对等的分布式架构" tabindex="-1"><a class="header-anchor" href="#_5、节点对等的分布式架构"><span>5、节点对等的分布式架构</span></a></h4><ul><li>节点对等，每个节点都能接收所有的请求</li><li>自动请求路由</li><li>响应收集</li></ul><h3 id="二、图解分片shard、副本replica机制" tabindex="-1"><a class="header-anchor" href="#二、图解分片shard、副本replica机制"><span>二、图解分片shard、副本replica机制</span></a></h3><h4 id="_1、shard-replica机制" tabindex="-1"><a class="header-anchor" href="#_1、shard-replica机制"><span>1、shard&amp;replica机制</span></a></h4><p>（1）每个index包含一个或多个shard</p><p>（2）每个shard都是一个最小工作单元，承载部分数据，lucene实例，完整的建立索引和处理请求的能力</p><p>（3）增减节点时，shard会自动在nodes中负载均衡</p><p>（4）primary shard和replica shard，每个document肯定只存在于某一个primary shard以及其对应的replica shard中，不可能存在于多个primary shard</p><p>（5）replica shard是primary shard的副本，负责容错，以及承担读请求负载</p><p>（6）primary shard的数量在创建索引的时候就固定了，replica shard的数量可以随时修改</p><p>（7）primary shard的默认数量是1，replica默认是1，默认共有2个shard，1个primary shard，1个replica shard</p><p>注意：es7以前primary shard的默认数量是5，replica默认是1，默认有10个shard，5个primary shard，5个replica shard</p><p>（8）primary shard不能和自己的replica shard放在同一个节点上（否则节点宕机，primary shard和副本都丢失，起不到容错的作用），但是可以和其他primary shard的replica shard放在同一个节点上</p><h4 id="_2、图解单node环境下创建index是什么样子的" tabindex="-1"><a class="header-anchor" href="#_2、图解单node环境下创建index是什么样子的"><span>2、图解单node环境下创建index是什么样子的</span></a></h4><p>（1）单node环境下，创建一个index，有3个primary shard，3个replica shard （2）集群status是yellow （3）这个时候，只会将3个primary shard分配到仅有的一个node上去，另外3个replica shard是无法分配的 （4）集群可以正常工作，但是一旦出现节点宕机，数据全部丢失，而且集群不可用，无法承接任何请求</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index1</span>
<span class="line">{</span>
<span class="line">   &quot;settings&quot; : {</span>
<span class="line">      &quot;number_of_shards&quot; : 3,</span>
<span class="line">      &quot;number_of_replicas&quot; : 1</span>
<span class="line">   }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、图解2个node环境下replica-shard是如何分配的" tabindex="-1"><a class="header-anchor" href="#_3、图解2个node环境下replica-shard是如何分配的"><span>3、图解2个node环境下replica shard是如何分配的</span></a></h4><p>（1）replica shard分配：3个primary shard，3个replica shard，1 node （2）primary ---&gt; replica同步 （3）读请求：primary/replica</p><h4 id="_4、图解横向扩容" tabindex="-1"><a class="header-anchor" href="#_4、图解横向扩容"><span>4、图解横向扩容</span></a></h4><ul><li>分片自动负载均衡，分片向空闲机器转移。</li><li>每个节点存储更少分片，系统资源给与每个分片的资源更多，整体集群性能提高。</li><li>扩容极限：节点数大于整体分片数，则必有空闲机器。</li><li>超出扩容极限时，可以增加副本数，如设置副本数为2，总共3*3=9个分片。9台机器同时运行，存储和搜索性能更强。容错性更好。</li><li>容错性：只要一个索引的所有主分片在，集群就就可以运行。</li></ul><h4 id="_5、-图解es容错机制-master选举-replica容错-数据恢复" tabindex="-1"><a class="header-anchor" href="#_5、-图解es容错机制-master选举-replica容错-数据恢复"><span>5、 图解es容错机制 master选举，replica容错，数据恢复</span></a></h4><p>以3分片，2副本数，3节点为例介绍。</p><ul><li>master node宕机，自动master选举，集群为red</li><li>replica容错：新master将replica提升为primary shard，yellow</li><li>重启宕机node，master copy replica到该node，使用原有的shard并同步宕机后的修改，green</li></ul><h2 id="第九章-图解文档存储机制" tabindex="-1"><a class="header-anchor" href="#第九章-图解文档存储机制"><span>第九章 图解文档存储机制</span></a></h2><h3 id="一、数据路由" tabindex="-1"><a class="header-anchor" href="#一、数据路由"><span>一、数据路由</span></a></h3><h4 id="_1、文档存储如何路由到相应分片" tabindex="-1"><a class="header-anchor" href="#_1、文档存储如何路由到相应分片"><span>1、文档存储如何路由到相应分片</span></a></h4><p>一个文档，最终会落在主分片的一个分片上，到底应该在哪一个分片？这就是数据路由。</p><h4 id="_2、路由算法" tabindex="-1"><a class="header-anchor" href="#_2、路由算法"><span>2、路由算法</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">shard = hash(routing) % number_of_primary_shards</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>哈希值对主分片数取模。</p><p>举例：</p><p>对一个文档经行crud时，都会带一个路由值 routing number。默认为文档_id（可能是手动指定，也可能是自动生成）。</p><p>存储1号文档，经过哈希计算，哈希值为2,此索引有3个主分片，那么计算2%3=2，就算出此文档在P2分片上。</p><p>决定一个document在哪个shard上，最重要的一个值就是routing值，默认是_id，也可以手动指定，相同的routing值，每次过来，从hash函数中，产出的hash值一定是相同的</p><p>无论hash值是几，无论是什么数字，对number_of_primary_shards求余数，结果一定是在0~number_of_primary_shards-1之间这个范围内的。0,1,2。</p><h4 id="_3、手动指定-routing-number" tabindex="-1"><a class="header-anchor" href="#_3、手动指定-routing-number"><span>3、手动指定 routing number</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /test_index/_doc/15?routing=num</span>
<span class="line">{</span>
<span class="line">  &quot;num&quot;: 0,</span>
<span class="line">  &quot;tags&quot;: []</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>场景：在程序中，架构师可以手动指定已有数据的一个属性为路由值，好处是可以定制一类文档数据存储到一个分片中。缺点是设计不好，会造成数据倾斜。</p><p>所以，不同文档尽量放到不同的索引中。剩下的事情交给es集群自己处理。</p><h4 id="_4、主分片数量不可变" tabindex="-1"><a class="header-anchor" href="#_4、主分片数量不可变"><span>4、主分片数量不可变</span></a></h4><p>涉及到以往数据的查询搜索，所以一旦建立索引，主分片数不可变。</p><h3 id="二、-图解文档的增删改内部机制" tabindex="-1"><a class="header-anchor" href="#二、-图解文档的增删改内部机制"><span>二、 图解文档的增删改内部机制</span></a></h3><p>增删改可以看做update,都是对数据的改动。一个改动请求发送到es集群，经历以下四个步骤：</p><p>（1）客户端选择一个node发送请求过去，这个node就是coordinating node（协调节点）</p><p>（2）coordinating node，对document进行路由，将请求转发给对应的node（有primary shard）</p><p>（3）实际的node上的primary shard处理请求，然后将数据同步到replica node。</p><p>（4）coordinating node，如果发现primary node和所有replica node都搞定之后，就返回响应结果给客户端。</p><h3 id="三、图解文档的查询内部机制" tabindex="-1"><a class="header-anchor" href="#三、图解文档的查询内部机制"><span>三、图解文档的查询内部机制</span></a></h3><p>1、客户端发送请求到任意一个node，成为coordinate node</p><p>2、coordinate node对document进行路由，将请求转发到对应的node，此时会使用round-robin随机轮询算法，在primary shard以及其所有replica中随机选择一个，让读请求负载均衡</p><p>3、接收请求的node返回document给coordinate node</p><p>4、coordinate node返回document给客户端</p><p>5、特殊情况：document如果还在建立索引过程中，可能只有primary shard有，任何一个replica shard都没有，此时可能会导致无法读取到document，但是document完成索引建立之后，primary shard和replica shard就都有了。</p><h3 id="四、bulk-api奇特的json格式" tabindex="-1"><a class="header-anchor" href="#四、bulk-api奇特的json格式"><span>四、bulk api奇特的json格式</span></a></h3><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line">POST /_bulk</span>
<span class="line"><span class="token punctuation">{</span><span class="token property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;meta&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\\n</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">}</span>\\n</span>
<span class="line"><span class="token punctuation">{</span><span class="token property">&quot;action&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token string">&quot;meta&quot;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>\\n</span>
<span class="line"><span class="token punctuation">{</span><span class="token string">&quot;data&quot;</span><span class="token punctuation">}</span>\\n</span>
<span class="line"></span>
<span class="line"><span class="token punctuation">[</span></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;action&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;method&quot;</span><span class="token operator">:</span><span class="token string">&quot;create&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;data&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;field1&quot;</span><span class="token operator">:</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;field1&quot;</span><span class="token operator">:</span><span class="token string">&quot;spring&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span></span>
<span class="line">        <span class="token property">&quot;action&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;method&quot;</span><span class="token operator">:</span><span class="token string">&quot;create&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token property">&quot;data&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;field1&quot;</span><span class="token operator">:</span><span class="token string">&quot;java&quot;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token property">&quot;field1&quot;</span><span class="token operator">:</span><span class="token string">&quot;spring&quot;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span>       </span>
<span class="line"><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1、bulk中的每个操作都可能要转发到不同的node的shard去执行</p><p>2、如果采用比较良好的json数组格式</p><p>允许任意的换行，整个可读性非常棒，读起来很爽，es拿到那种标准格式的json串以后，要按照下述流程去进行处理</p><p>（1）将json数组解析为JSONArray对象，这个时候，整个数据，就会在内存中出现一份一模一样的拷贝，一份数据是json文本，一份数据是JSONArray对象</p><p>（2）解析json数组里的每个json，对每个请求中的document进行路由</p><p>（3）为路由到同一个shard上的多个请求，创建一个请求数组。100请求中有10个是到P1.</p><p>（4）将这个请求数组序列化</p><p>（5）将序列化后的请求数组发送到对应的节点上去</p><p>3、耗费更多内存，更多的jvm gc开销</p><p>我们之前提到过bulk size最佳大小的那个问题，一般建议说在几千条那样，然后大小在10MB左右，所以说，可怕的事情来了。假设说现在100个bulk请求发送到了一个节点上去，然后每个请求是10MB，100个请求，就是1000MB = 1GB，然后每个请求的json都copy一份为jsonarray对象，此时内存中的占用就会翻倍，就会占用2GB的内存，甚至还不止。因为弄成jsonarray之后，还可能会多搞一些其他的数据结构，2GB+的内存占用。</p><p>占用更多的内存可能就会积压其他请求的内存使用量，比如说最重要的搜索请求，分析请求，等等，此时就可能会导致其他请求的性能急速下降。</p><p>另外的话，占用内存更多，就会导致java虚拟机的垃圾回收次数更多，跟频繁，每次要回收的垃圾对象更多，耗费的时间更多，导致es的java虚拟机停止工作线程的时间更多。</p><p>4、现在的奇特格式</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">POST /_bulk</span>
<span class="line">{ &quot;delete&quot;: { &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;5&quot; }} \\n</span>
<span class="line">{ &quot;create&quot;: { &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;14&quot; }}\\n</span>
<span class="line">{ &quot;test_field&quot;: &quot;test14&quot; }\\n</span>
<span class="line">{ &quot;update&quot;: { &quot;_index&quot;: &quot;test_index&quot;,  &quot;_id&quot;: &quot;2&quot;} }\\n</span>
<span class="line">{ &quot;doc&quot; : {&quot;test_field&quot; : &quot;bulk test&quot;} }\\n</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1 2 3 4 5 6</p><p>（1）不用将其转换为json对象，不会出现内存中的相同数据的拷贝，直接按照换行符切割json</p><p>（2）对每两个一组的json，读取meta，进行document路由</p><p>（3）直接将对应的json发送到node上去</p><p>5、最大的优势在于，不需要将json数组解析为一个JSONArray对象，形成一份大数据的拷贝，浪费内存空间，尽可能地保证性能。</p><h2 id="第十章-mapping映射入门" tabindex="-1"><a class="header-anchor" href="#第十章-mapping映射入门"><span>第十章 Mapping映射入门</span></a></h2><h3 id="一、-什么是mapping映射" tabindex="-1"><a class="header-anchor" href="#一、-什么是mapping映射"><span>一、 什么是mapping映射</span></a></h3><p>概念：自动或手动为index中的_doc建立的一种数据结构和相关配置，简称为mapping映射。</p><p>插入几条数据，让es自动为我们建立一个索引</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /website/_doc/1</span>
<span class="line">{</span>
<span class="line">  &quot;post_date&quot;: &quot;2019-01-01&quot;,</span>
<span class="line">  &quot;title&quot;: &quot;my first article&quot;,</span>
<span class="line">  &quot;content&quot;: &quot;this is my first article in this website&quot;,</span>
<span class="line">  &quot;author_id&quot;: 11400</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">PUT /website/_doc/2</span>
<span class="line">{</span>
<span class="line">  &quot;post_date&quot;: &quot;2019-01-02&quot;,</span>
<span class="line">  &quot;title&quot;: &quot;my second article&quot;,</span>
<span class="line">  &quot;content&quot;: &quot;this is my second article in this website&quot;,</span>
<span class="line">  &quot;author_id&quot;: 11400</span>
<span class="line">}</span>
<span class="line"> </span>
<span class="line">PUT /website/_doc/3</span>
<span class="line">{</span>
<span class="line">  &quot;post_date&quot;: &quot;2019-01-03&quot;,</span>
<span class="line">  &quot;title&quot;: &quot;my third article&quot;,</span>
<span class="line">  &quot;content&quot;: &quot;this is my third article in this website&quot;,</span>
<span class="line">  &quot;author_id&quot;: 11400</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对比数据库建表语句</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">create table website(</span>
<span class="line">     post_date date,</span>
<span class="line">     title varchar(50),     </span>
<span class="line">     content varchar(100),</span>
<span class="line">     author_id int(11) </span>
<span class="line"> );</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1 2 3 4 5 6</p><p>动态映射：dynamic mapping，自动为我们建立index，以及对应的mapping，mapping中包含了每个field对应的数据类型，以及如何分词等设置。</p><p>重点：我们当然，后面会讲解，也可以手动在创建数据之前，先创建index，以及对应的mapping</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET  /website/_mapping/</span>
<span class="line">{</span>
<span class="line">  &quot;website&quot; : {</span>
<span class="line">    &quot;mappings&quot; : {</span>
<span class="line">      &quot;properties&quot; : {</span>
<span class="line">        &quot;author_id&quot; : {</span>
<span class="line">          &quot;type&quot; : &quot;long&quot;</span>
<span class="line">        },</span>
<span class="line">        &quot;content&quot; : {</span>
<span class="line">          &quot;type&quot; : &quot;text&quot;,</span>
<span class="line">          &quot;fields&quot; : {</span>
<span class="line">            &quot;keyword&quot; : {</span>
<span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span>
<span class="line">              &quot;ignore_above&quot; : 256</span>
<span class="line">            }</span>
<span class="line">          }</span>
<span class="line">        },</span>
<span class="line">        &quot;post_date&quot; : {</span>
<span class="line">          &quot;type&quot; : &quot;date&quot;</span>
<span class="line">        },</span>
<span class="line">        &quot;title&quot; : {</span>
<span class="line">          &quot;type&quot; : &quot;text&quot;,</span>
<span class="line">          &quot;fields&quot; : {</span>
<span class="line">            &quot;keyword&quot; : {</span>
<span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span>
<span class="line">              &quot;ignore_above&quot; : 256</span>
<span class="line">            }</span>
<span class="line">          }</span>
<span class="line">        }</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>尝试各种搜索</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /website/_search?q=2019        0条结果             </span>
<span class="line">GET /website/_search?q=2019-01-01           1条结果</span>
<span class="line">GET /website/_search?q=post_date:2019-01-01     1条结果</span>
<span class="line">GET /website/_search?q=post_date:2019          0 条结果</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1 2 3 4</p><p>搜索结果为什么不一致，因为es自动建立mapping的时候，设置了不同的field不同的data type。不同的data type的分词、搜索等行为是不一样的。所以出现了_all field和post_date field的搜索表现完全不一样。</p><h3 id="二、精确匹配与全文搜索的对比分析" tabindex="-1"><a class="header-anchor" href="#二、精确匹配与全文搜索的对比分析"><span>二、精确匹配与全文搜索的对比分析</span></a></h3><h4 id="_1、exact-value-精确匹配" tabindex="-1"><a class="header-anchor" href="#_1、exact-value-精确匹配"><span>1、exact value 精确匹配</span></a></h4><p>2019-01-01，exact value，搜索的时候，必须输入2019-01-01，才能搜索出来</p><p>如果你输入一个01，是搜索不出来的</p><p>select * from book where name= &#39;java&#39;</p><h4 id="_2、full-text-全文检索" tabindex="-1"><a class="header-anchor" href="#_2、full-text-全文检索"><span>2、full text 全文检索</span></a></h4><p>搜“笔记电脑”，笔记本电脑词条会不会出现。</p><p>select * from book where name like &#39;%java%&#39;</p><p>（1）缩写 vs. 全称：cn vs. china</p><p>（2）格式转化：like liked likes</p><p>（3）大小写：Tom vs tom</p><p>（4）同义词：like vs love</p><p>2019-01-01，2019 01 01，搜索2019，或者01，都可以搜索出来</p><p>china，搜索cn，也可以将china搜索出来</p><p>likes，搜索like，也可以将likes搜索出来</p><p>Tom，搜索tom，也可以将Tom搜索出来</p><p>like，搜索love，同义词，也可以将like搜索出来</p><p>就不是说单纯的只是匹配完整的一个值，而是可以对值进行拆分词语后（分词）进行匹配，也可以通过缩写、时态、大小写、同义词等进行匹配。深入 NPL,自然语义处理。</p><h3 id="三、全文检索下倒排索引核心原理快速揭秘" tabindex="-1"><a class="header-anchor" href="#三、全文检索下倒排索引核心原理快速揭秘"><span>三、全文检索下倒排索引核心原理快速揭秘</span></a></h3><p>doc1：I really liked my small dogs, and I think my mom also liked them.</p><p>doc2：He never liked any dogs, so I hope that my mom will not expect me to liked him.</p><h4 id="分词-初步的倒排索引的建立" tabindex="-1"><a class="header-anchor" href="#分词-初步的倒排索引的建立"><span>分词，初步的倒排索引的建立</span></a></h4><table><thead><tr><th>term</th><th><strong>doc1</strong></th><th><strong>doc2</strong></th></tr></thead><tbody><tr><td><strong>I</strong></td><td>*</td><td>*</td></tr><tr><td><strong>really</strong></td><td>*</td><td></td></tr><tr><td><strong>liked</strong></td><td>*</td><td>*</td></tr><tr><td><strong>my</strong></td><td>*</td><td>*</td></tr><tr><td><strong>small</strong></td><td>*</td><td></td></tr><tr><td><strong>dogs</strong></td><td>*</td><td></td></tr><tr><td><strong>and</strong></td><td>*</td><td></td></tr><tr><td><strong>think</strong></td><td>*</td><td></td></tr><tr><td><strong>mom</strong></td><td>*</td><td>*</td></tr><tr><td><strong>also</strong></td><td>*</td><td></td></tr><tr><td><strong>them</strong></td><td>*</td><td></td></tr><tr><td><strong>He</strong></td><td></td><td>*</td></tr><tr><td><strong>never</strong></td><td></td><td>*</td></tr><tr><td><strong>any</strong></td><td></td><td>*</td></tr><tr><td><strong>so</strong></td><td></td><td>*</td></tr><tr><td><strong>hope</strong></td><td></td><td>*</td></tr><tr><td><strong>that</strong></td><td></td><td>*</td></tr><tr><td><strong>will</strong></td><td></td><td>*</td></tr><tr><td><strong>not</strong></td><td></td><td>*</td></tr><tr><td><strong>expect</strong></td><td></td><td>*</td></tr><tr><td><strong>me</strong></td><td></td><td>*</td></tr><tr><td><strong>to</strong></td><td></td><td>*</td></tr><tr><td><strong>him</strong></td><td></td><td>*</td></tr></tbody></table><p>演示了一下倒排索引最简单的建立的一个过程</p><h4 id="搜索" tabindex="-1"><a class="header-anchor" href="#搜索"><span>搜索</span></a></h4><p>mother like little dog，不可能有任何结果</p><p>mother</p><p>like</p><p>little</p><p>dog</p><p>这不是我们想要的结果。同义词mom\\mother在我们人类看来是一样。想进行标准化操作。</p><h4 id="重建倒排索引" tabindex="-1"><a class="header-anchor" href="#重建倒排索引"><span>重建倒排索引</span></a></h4><p>normalization正规化，建立倒排索引的时候，会执行一个操作，也就是说对拆分出的各个单词进行相应的处理，以提升后面搜索的时候能够搜索到相关联的文档的概率</p><p>时态的转换，单复数的转换，同义词的转换，大小写的转换</p><p>mom ―&gt; mother</p><p>liked ―&gt; like</p><p>small ―&gt; little</p><p>dogs ―&gt; dog</p><p>重新建立倒排索引，加入normalization，再次用mother liked little dog搜索，就可以搜索到了</p><table><thead><tr><th><strong>word</strong></th><th><strong>doc1</strong></th><th><strong>doc2</strong></th><th><strong>normalization</strong></th></tr></thead><tbody><tr><td><strong>I</strong></td><td>*</td><td>*</td><td></td></tr><tr><td><strong>really</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>like</strong></td><td>*</td><td>*</td><td>liked ―&gt; like</td></tr><tr><td><strong>my</strong></td><td>*</td><td>*</td><td></td></tr><tr><td><strong>little</strong></td><td>*</td><td></td><td>small ―&gt; little</td></tr><tr><td><strong>dog</strong></td><td>*</td><td></td><td>dogs ―&gt; dog</td></tr><tr><td><strong>and</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>think</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>mother</strong></td><td>*</td><td>*</td><td>mom ―&gt; mother</td></tr><tr><td><strong>also</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>them</strong></td><td>*</td><td></td><td></td></tr><tr><td><strong>He</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>never</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>any</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>so</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>hope</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>that</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>will</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>not</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>expect</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>me</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>to</strong></td><td></td><td>*</td><td></td></tr><tr><td><strong>him</strong></td><td></td><td>*</td><td></td></tr></tbody></table><h4 id="重新搜索" tabindex="-1"><a class="header-anchor" href="#重新搜索"><span>重新搜索</span></a></h4><p>搜索：mother liked little dog，</p><p>对搜索条件经行分词 normalization</p><p>mother</p><p>liked -》like</p><p>little</p><p>dog</p><p>doc1和doc2都会搜索出来</p><h3 id="四、分词器-analyzer" tabindex="-1"><a class="header-anchor" href="#四、分词器-analyzer"><span>四、分词器 analyzer</span></a></h3><h4 id="_1、什么是分词器-analyzer" tabindex="-1"><a class="header-anchor" href="#_1、什么是分词器-analyzer"><span>1、什么是分词器 analyzer</span></a></h4><p>作用：切分词语，normalization（提升recall召回率）</p><p>给你一段句子，然后将这段句子拆分成一个一个的单个的单词，同时对每个单词进行normalization（时态转换，单复数转换）</p><p>recall，召回率：搜索的时候，增加能够搜索到的结果的数量</p><p>analyzer 组成部分：</p><p>1、character filter：在一段文本进行分词之前，先进行预处理，比如说最常见的就是，过滤html标签（<code>&lt;span&gt;hello&lt;span&gt;</code> --&gt; hello），&amp; --&gt; and（I&amp;you --&gt; I and you）</p><p>2、tokenizer：分词，hello you and me --&gt; hello, you, and, me</p><p>3、token filter：lowercase，stop word，synonymom，dogs --&gt; dog，liked --&gt; like，Tom --&gt; tom，a/the/an --&gt; 干掉，mother --&gt; mom，small --&gt; little</p><p>stop word 停用词： 了 的 呢。</p><p>一个分词器，很重要，将一段文本进行各种处理，最后处理好的结果才会拿去建立倒排索引。</p><h4 id="_2、内置分词器的介绍" tabindex="-1"><a class="header-anchor" href="#_2、内置分词器的介绍"><span>2、内置分词器的介绍</span></a></h4><p>例句：Set the shape to semi-transparent by calling set_trans(5)</p><p>standard analyzer标准分词器：set, the, shape, to, semi, transparent, by, calling, set_trans, 5（默认的是standard）</p><p>simple analyzer简单分词器：set, the, shape, to, semi, transparent, by, calling, set, trans</p><p>whitespace analyzer：Set, the, shape, to, semi-transparent, by, calling, set_trans(5)</p><p>language analyzer（特定的语言的分词器，比如说，english，英语分词器）：set, shape, semi, transpar, call, set_tran, 5</p><p>官方文档：</p><p>https://www.elastic.co/guide/en/elasticsearch/reference/7.4/analysis-analyzers.html</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568978200919.6658d049.png" alt="1568978200919"></p><h3 id="五、query-string根据字段分词策略" tabindex="-1"><a class="header-anchor" href="#五、query-string根据字段分词策略"><span>五、query string根据字段分词策略</span></a></h3><h4 id="_1、query-string分词" tabindex="-1"><a class="header-anchor" href="#_1、query-string分词"><span>1、query string分词</span></a></h4><p>query string必须以和index建立时相同的analyzer进行分词</p><p>query string对exact value和full text的区别对待</p><p>如： date：exact value 精确匹配</p><p>text: full text 全文检索</p><h4 id="_2、测试分词器" tabindex="-1"><a class="header-anchor" href="#_2、测试分词器"><span>2、测试分词器</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /_analyze</span>
<span class="line">{</span>
<span class="line">  &quot;analyzer&quot;: &quot;standard&quot;,</span>
<span class="line">  &quot;text&quot;: &quot;Text to analyze 80&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回值：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;tokens&quot; : [</span>
<span class="line">    {</span>
<span class="line">      &quot;token&quot; : &quot;text&quot;,</span>
<span class="line">      &quot;start_offset&quot; : 0,</span>
<span class="line">      &quot;end_offset&quot; : 4,</span>
<span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span>
<span class="line">      &quot;position&quot; : 0</span>
<span class="line">    },</span>
<span class="line">    {</span>
<span class="line">      &quot;token&quot; : &quot;to&quot;,</span>
<span class="line">      &quot;start_offset&quot; : 5,</span>
<span class="line">      &quot;end_offset&quot; : 7,</span>
<span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span>
<span class="line">      &quot;position&quot; : 1</span>
<span class="line">    },</span>
<span class="line">    {</span>
<span class="line">      &quot;token&quot; : &quot;analyze&quot;,</span>
<span class="line">      &quot;start_offset&quot; : 8,</span>
<span class="line">      &quot;end_offset&quot; : 15,</span>
<span class="line">      &quot;type&quot; : &quot;&lt;ALPHANUM&gt;&quot;,</span>
<span class="line">      &quot;position&quot; : 2</span>
<span class="line">    },</span>
<span class="line">    {</span>
<span class="line">      &quot;token&quot; : &quot;80&quot;,</span>
<span class="line">      &quot;start_offset&quot; : 16,</span>
<span class="line">      &quot;end_offset&quot; : 18,</span>
<span class="line">      &quot;type&quot; : &quot;&lt;NUM&gt;&quot;,</span>
<span class="line">      &quot;position&quot; : 3</span>
<span class="line">    }</span>
<span class="line">  ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>token 实际存储的term 关键字</p><p>position 在此词条在原文本中的位置</p><p>start_offset/end_offset字符在原始字符串中的位置</p><h3 id="六、mapping回顾总结" tabindex="-1"><a class="header-anchor" href="#六、mapping回顾总结"><span>六、mapping回顾总结</span></a></h3><p>（1）往es里面直接插入数据，es会自动建立索引，同时建立对应的mapping。(dynamic mapping)</p><p>（2）mapping中就自动定义了每个field的数据类型</p><p>（3）不同的数据类型（比如说text和date），可能有的是exact value，有的是full text</p><p>（4）exact value，在建立倒排索引的时候，分词的时候，是将整个值一起作为一个关键词建立到倒排索引中的；full text，会经历各种各样的处理，分词，normaliztion（时态转换，同义词转换，大小写转换），才会建立到倒排索引中。</p><p>（5）同时呢，exact value和full text类型的field就决定了，在一个搜索过来的时候，对exact value field或者是full text field进行搜索的行为也是不一样的，会跟建立倒排索引的行为保持一致；比如说exact value搜索的时候，就是直接按照整个值进行匹配，full text query string，也会进行分词和normalization再去倒排索引中去搜索</p><p>（6）可以用es的dynamic mapping，让其自动建立mapping，包括自动设置数据类型；也可以提前手动创建index和tmapping，自己对各个field进行设置，包括数据类型，包括索引行为，包括分词器，等。</p><h3 id="七、mapping的核心数据类型以及dynamic-mapping" tabindex="-1"><a class="header-anchor" href="#七、mapping的核心数据类型以及dynamic-mapping"><span>七、mapping的核心数据类型以及dynamic mapping</span></a></h3><h4 id="_1、核心的数据类型" tabindex="-1"><a class="header-anchor" href="#_1、核心的数据类型"><span>1、核心的数据类型</span></a></h4><p>string :text and keyword</p><p>byte，short，integer，long,float，double</p><p>boolean</p><p>date</p><p>详见：https://www.elastic.co/guide/en/elasticsearch/reference/7.3/mapping-types.html</p><p>下图是ES7.3核心的字段类型如下：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568989192034.ed74ef78.png" alt="1568989192034"></p><h4 id="_2、dynamic-mapping-推测规则" tabindex="-1"><a class="header-anchor" href="#_2、dynamic-mapping-推测规则"><span>2、dynamic mapping 推测规则</span></a></h4><p>true or false --&gt; boolean</p><p>123 --&gt; long</p><p>123.45 --&gt; double</p><p>2019-01-01 --&gt; date</p><p>&quot;hello world&quot; --&gt; text/keywod</p><h4 id="_3、查看mapping" tabindex="-1"><a class="header-anchor" href="#_3、查看mapping"><span>3、查看mapping</span></a></h4><p>GET /index/_mapping/</p><h3 id="八、手动管理mapping" tabindex="-1"><a class="header-anchor" href="#八、手动管理mapping"><span>八、手动管理mapping</span></a></h3><h4 id="_1、查询所有索引的映射" tabindex="-1"><a class="header-anchor" href="#_1、查询所有索引的映射"><span>1、查询所有索引的映射</span></a></h4><p>GET /_mapping</p><h4 id="_2、创建映射" tabindex="-1"><a class="header-anchor" href="#_2、创建映射"><span>2、创建映射 ！！</span></a></h4><p>创建索引后，应该立即手动创建映射</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT book/_mapping</span>
<span class="line">{</span>
<span class="line">	&quot;properties&quot;: {</span>
<span class="line">           &quot;name&quot;: {</span>
<span class="line">                  &quot;type&quot;: &quot;text&quot;</span>
<span class="line">            },</span>
<span class="line">           &quot;description&quot;: {</span>
<span class="line">              &quot;type&quot;: &quot;text&quot;,</span>
<span class="line">              &quot;analyzer&quot;:&quot;english&quot;,</span>
<span class="line">              &quot;search_analyzer&quot;:&quot;english&quot;</span>
<span class="line">           },</span>
<span class="line">           &quot;pic&quot;:{</span>
<span class="line">             &quot;type&quot;:&quot;text&quot;,</span>
<span class="line">             &quot;index&quot;:false</span>
<span class="line">           },</span>
<span class="line">           &quot;studymodel&quot;:{</span>
<span class="line">             &quot;type&quot;:&quot;text&quot;</span>
<span class="line">           }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="text-文本类型" tabindex="-1"><a class="header-anchor" href="#text-文本类型"><span>Text 文本类型</span></a></h4><p>1）analyzer</p><p>通过analyzer属性指定分词器。</p><p>上边指定了analyzer是指在索引和搜索都使用english，如果单独想定义搜索时使用的分词器则可以通过search_analyzer属性。</p><p>2）index</p><p>index属性指定是否索引。</p><p>默认为index=true，即要进行索引，只有进行索引才可以从索引库搜索到。</p><p>但是也有一些内容不需要索引，比如：商品图片地址只被用来展示图片，不进行搜索图片，此时可以将index设置为false。</p><p>删除索引，重新创建映射，将pic的index设置为false，尝试根据pic去搜索，结果搜索不到数据。</p><p>3）store</p><p>是否在source之外存储，每个文档索引后会在 ES中保存一份原始文档，存放在&quot;_source&quot;中，一般情况下不需要设置store为true，因为在_source中已经有一份原始文档了。</p><p>测试</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT book/_mapping</span>
<span class="line">{</span>
<span class="line">		&quot;properties&quot;: {</span>
<span class="line">           &quot;name&quot;: {</span>
<span class="line">                  &quot;type&quot;: &quot;text&quot;</span>
<span class="line">            },</span>
<span class="line">           &quot;description&quot;: {</span>
<span class="line">              &quot;type&quot;: &quot;text&quot;,</span>
<span class="line">              &quot;analyzer&quot;:&quot;english&quot;,</span>
<span class="line">              &quot;search_analyzer&quot;:&quot;english&quot;</span>
<span class="line">           },</span>
<span class="line">           &quot;pic&quot;:{</span>
<span class="line">             &quot;type&quot;:&quot;text&quot;,</span>
<span class="line">             &quot;index&quot;:false</span>
<span class="line">           },</span>
<span class="line">           &quot;studymodel&quot;:{</span>
<span class="line">             &quot;type&quot;:&quot;text&quot;</span>
<span class="line">           }</span>
<span class="line">    }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>插入文档：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /book/_doc/1</span>
<span class="line">{</span>
<span class="line">  &quot;name&quot;:&quot;Bootstrap开发框架&quot;,</span>
<span class="line">  &quot;description&quot;:&quot;Bootstrap是由Twitter推出的一个前台页面开发框架，在行业之中使用较为广泛。此开发框架包含了大量的CSS、JS程序代码，可以帮助开发者（尤其是不擅长页面开发的程序人员）轻松的实现一个不受浏览器限制的精美界面效果。&quot;,</span>
<span class="line">  &quot;pic&quot;:&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;,</span>
<span class="line">  &quot;studymodel&quot;:&quot;201002&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Get /book/_search?q=name:开发</p><p>Get /book/_search?q=description:开发</p><p>Get /book/_search?q=pic:group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg</p><p>Get /book/_search?q=studymodel:201002</p><p>通过测试发现：name和description都支持全文检索，pic不可作为查询条件。</p><h4 id="keyword关键字字段" tabindex="-1"><a class="header-anchor" href="#keyword关键字字段"><span>keyword关键字字段</span></a></h4><p>目前已经取代了&quot;index&quot;: false。上边介绍的text文本字段在映射时要设置分词器，keyword字段为关键字字段，通常搜索keyword是按照整体搜索，所以创建keyword字段的索引时是不进行分词的，比如：邮政编码、手机号码、身份证等。keyword字段通常用于过虑、排序、聚合等。</p><h4 id="date日期类型" tabindex="-1"><a class="header-anchor" href="#date日期类型"><span>date日期类型</span></a></h4><p>日期类型不用设置分词器。</p><p>通常日期类型的字段用于排序。</p><p>format</p><p>通过format设置日期格式</p><p>例子：</p><p>下边的设置允许date字段存储年月日时分秒、年月日及毫秒三种格式。</p><p>{</p><p>&quot;properties&quot;: {</p><p>&quot;timestamp&quot;: {</p><p>&quot;type&quot;: &quot;date&quot;,</p><p>&quot;format&quot;: &quot;yyyy-MM-dd HH:mm:ss||yyyy-MM-dd&quot;</p><p>}</p><p>}</p><p>}</p><p>插入文档：</p><p>Post book/doc/3</p><p>{</p><p>&quot;name&quot;: &quot;spring开发基础&quot;,</p><p>&quot;description&quot;: &quot;spring 在java领域非常流行，java程序员都在用。&quot;,</p><p>&quot;studymodel&quot;: &quot;201001&quot;,</p><p>&quot;pic&quot;:&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;,</p><p>&quot;timestamp&quot;:&quot;2018-07-04 18:28:58&quot;</p><p>}</p><h4 id="数值类型" tabindex="-1"><a class="header-anchor" href="#数值类型"><span>数值类型</span></a></h4><p>下边是ES支持的数值类型</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1568990520717.e0fae2ce.png" alt="1568990520717"></p><p>1、尽量选择范围小的类型，提高搜索效率</p><p>2、对于浮点数尽量用比例因子，比如一个价格字段，单位为元，我们将比例因子设置为100这在ES中会按 分 存储，映射如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&quot;price&quot;: {</span>
<span class="line">        &quot;type&quot;: &quot;scaled_float&quot;,</span>
<span class="line">        &quot;scaling_factor&quot;: 100</span>
<span class="line">  },</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于比例因子为100，如果我们输入的价格是23.45则ES中会将23.45乘以100存储在ES中。</p><p>如果输入的价格是23.456，ES会将23.456乘以100再取一个接近原始值的数，得出2346。</p><p>使用比例因子的好处是整型比浮点型更易压缩，节省磁盘空间。</p><p>如果比例因子不适合，则从下表选择范围小的去用：</p><p>更新已有映射，并插入文档：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT book/doc/3</span>
<span class="line">{</span>
<span class="line">&quot;name&quot;: &quot;spring开发基础&quot;,</span>
<span class="line">&quot;description&quot;: &quot;spring 在java领域非常流行，java程序员都在用。&quot;,</span>
<span class="line">&quot;studymodel&quot;: &quot;201001&quot;,</span>
<span class="line"> &quot;pic&quot;:&quot;group1/M00/00/01/wKhlQFqO4MmAOP53AAAcwDwm6SU490.jpg&quot;,</span>
<span class="line"> &quot;timestamp&quot;:&quot;2018-07-04 18:28:58&quot;,</span>
<span class="line"> &quot;price&quot;:38.6</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、修改映射" tabindex="-1"><a class="header-anchor" href="#_3、修改映射"><span>3、修改映射</span></a></h4><p>只能创建index时手动建立mapping，或者新增field mapping，但是不能update field mapping。</p><p>因为已有数据按照映射早已分词存储好。如果修改，那这些存量数据怎么办。</p><p>新增一个字段mapping</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /book/_mapping/</span>
<span class="line">{</span>
<span class="line">  &quot;properties&quot; : {</span>
<span class="line">    &quot;new_field&quot; : {</span>
<span class="line">      &quot;type&quot; :    &quot;text&quot;,</span>
<span class="line">     &quot;index&quot;:    &quot;false&quot;</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果修改mapping,会报错</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /book/_mapping/</span>
<span class="line">{</span>
<span class="line">  &quot;properties&quot; : {</span>
<span class="line">    &quot;studymodel&quot; : {</span>
<span class="line">     &quot;type&quot; :    &quot;keyword&quot;</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>返回：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;error&quot;: {</span>
<span class="line">    &quot;root_cause&quot;: [</span>
<span class="line">      {</span>
<span class="line">        &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span>
<span class="line">        &quot;reason&quot;: &quot;mapper [studymodel] of different type, current_type [text], merged_type [keyword]&quot;</span>
<span class="line">      }</span>
<span class="line">    ],</span>
<span class="line">    &quot;type&quot;: &quot;illegal_argument_exception&quot;,</span>
<span class="line">    &quot;reason&quot;: &quot;mapper [studymodel] of different type, current_type [text], merged_type [keyword]&quot;</span>
<span class="line">  },</span>
<span class="line">  &quot;status&quot;: 400</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、删除映射" tabindex="-1"><a class="header-anchor" href="#_4、删除映射"><span>4、删除映射</span></a></h4><p>通过删除索引来删除映射。</p><h3 id="九、-复杂数据类型" tabindex="-1"><a class="header-anchor" href="#九、-复杂数据类型"><span>九、 复杂数据类型</span></a></h3><h4 id="_1、multivalue-field" tabindex="-1"><a class="header-anchor" href="#_1、multivalue-field"><span>1、multivalue field</span></a></h4><p>{ &quot;tags&quot;: [ &quot;tag1&quot;, &quot;tag2&quot; ]}</p><p>建立索引时与string是一样的，数据类型不能混</p><h4 id="_2、empty-field" tabindex="-1"><a class="header-anchor" href="#_2、empty-field"><span>2、empty field</span></a></h4><p>null，[]，[null]</p><h4 id="_3、object-field" tabindex="-1"><a class="header-anchor" href="#_3、object-field"><span>3、object field</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">PUT /company/_doc/1</span>
<span class="line">{</span>
<span class="line">  &quot;address&quot;: {</span>
<span class="line">    &quot;country&quot;: &quot;china&quot;,</span>
<span class="line">    &quot;province&quot;: &quot;guangdong&quot;,</span>
<span class="line">    &quot;city&quot;: &quot;guangzhou&quot;</span>
<span class="line">  },</span>
<span class="line">  &quot;name&quot;: &quot;jack&quot;,</span>
<span class="line">  &quot;age&quot;: 27,</span>
<span class="line">  &quot;join_date&quot;: &quot;2019-01-01&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>address：object类型</p><p>查询映射</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">GET /company/_mapping</span>
<span class="line">{</span>
<span class="line">  &quot;company&quot; : {</span>
<span class="line">    &quot;mappings&quot; : {</span>
<span class="line">      &quot;properties&quot; : {</span>
<span class="line">        &quot;address&quot; : {</span>
<span class="line">          &quot;properties&quot; : {</span>
<span class="line">            &quot;city&quot; : {</span>
<span class="line">              &quot;type&quot; : &quot;text&quot;,</span>
<span class="line">              &quot;fields&quot; : {</span>
<span class="line">                &quot;keyword&quot; : {</span>
<span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span>
<span class="line">                  &quot;ignore_above&quot; : 256</span>
<span class="line">                }</span>
<span class="line">              }</span>
<span class="line">            },</span>
<span class="line">            &quot;country&quot; : {</span>
<span class="line">              &quot;type&quot; : &quot;text&quot;,</span>
<span class="line">              &quot;fields&quot; : {</span>
<span class="line">                &quot;keyword&quot; : {</span>
<span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span>
<span class="line">                  &quot;ignore_above&quot; : 256</span>
<span class="line">                }</span>
<span class="line">              }</span>
<span class="line">            },</span>
<span class="line">            &quot;province&quot; : {</span>
<span class="line">              &quot;type&quot; : &quot;text&quot;,</span>
<span class="line">              &quot;fields&quot; : {</span>
<span class="line">                &quot;keyword&quot; : {</span>
<span class="line">                  &quot;type&quot; : &quot;keyword&quot;,</span>
<span class="line">                  &quot;ignore_above&quot; : 256</span>
<span class="line">                }</span>
<span class="line">              }</span>
<span class="line">            }</span>
<span class="line">          }</span>
<span class="line">        },</span>
<span class="line">        &quot;age&quot; : {</span>
<span class="line">          &quot;type&quot; : &quot;long&quot;</span>
<span class="line">        },</span>
<span class="line">        &quot;join_date&quot; : {</span>
<span class="line">          &quot;type&quot; : &quot;date&quot;</span>
<span class="line">        },</span>
<span class="line">        &quot;name&quot; : {</span>
<span class="line">          &quot;type&quot; : &quot;text&quot;,</span>
<span class="line">          &quot;fields&quot; : {</span>
<span class="line">            &quot;keyword&quot; : {</span>
<span class="line">              &quot;type&quot; : &quot;keyword&quot;,</span>
<span class="line">              &quot;ignore_above&quot; : 256</span>
<span class="line">            }</span>
<span class="line">          }</span>
<span class="line">        }</span>
<span class="line">      }</span>
<span class="line">    }</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>object</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">  &quot;address&quot;: {</span>
<span class="line">    &quot;country&quot;: &quot;china&quot;,</span>
<span class="line">    &quot;province&quot;: &quot;guangdong&quot;,</span>
<span class="line">    &quot;city&quot;: &quot;guangzhou&quot;</span>
<span class="line">  },</span>
<span class="line">  &quot;name&quot;: &quot;jack&quot;,</span>
<span class="line">  &quot;age&quot;: 27,</span>
<span class="line">  &quot;join_date&quot;: &quot;2017-01-01&quot;</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>底层存储格式</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;name&quot;:            [jack],</span>
<span class="line">    &quot;age&quot;:          [27],</span>
<span class="line">    &quot;join_date&quot;:      [2017-01-01],</span>
<span class="line">    &quot;address.country&quot;:         [china],</span>
<span class="line">    &quot;address.province&quot;:   [guangdong],</span>
<span class="line">    &quot;address.city&quot;:  [guangzhou]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象数组：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;authors&quot;: [</span>
<span class="line">        { &quot;age&quot;: 26, &quot;name&quot;: &quot;Jack White&quot;},</span>
<span class="line">        { &quot;age&quot;: 55, &quot;name&quot;: &quot;Tom Jones&quot;},</span>
<span class="line">        { &quot;age&quot;: 39, &quot;name&quot;: &quot;Kitty Smith&quot;}</span>
<span class="line">    ]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>存储格式：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">{</span>
<span class="line">    &quot;authors.age&quot;:    [26, 55, 39],</span>
<span class="line">    &quot;authors.name&quot;:   [jack, white, tom, jones, kitty, smith]</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,823),i=[l];function p(o,c){return a(),n("div",null,i)}const r=s(t,[["render",p],["__file","index.html.vue"]]),u=JSON.parse('{"path":"/elk1/","title":"ELK搜索高级课程","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"第一章 课程简介","slug":"第一章-课程简介","link":"#第一章-课程简介","children":[{"level":3,"title":"一、课程内容","slug":"一、课程内容","link":"#一、课程内容","children":[]},{"level":3,"title":"二、面向人员","slug":"二、面向人员","link":"#二、面向人员","children":[]},{"level":3,"title":"三、课程优势","slug":"三、课程优势","link":"#三、课程优势","children":[]},{"level":3,"title":"四、学习路径","slug":"四、学习路径","link":"#四、学习路径","children":[]}]},{"level":2,"title":"第二章 Elastic Stack简介","slug":"第二章-elastic-stack简介","link":"#第二章-elastic-stack简介","children":[{"level":3,"title":"一、简介","slug":"一、简介","link":"#一、简介","children":[]},{"level":3,"title":"二、特色","slug":"二、特色","link":"#二、特色","children":[]},{"level":3,"title":"三、组件介绍","slug":"三、组件介绍","link":"#三、组件介绍","children":[]}]},{"level":2,"title":"第三章 Elasticsearch是什么","slug":"第三章-elasticsearch是什么","link":"#第三章-elasticsearch是什么","children":[{"level":3,"title":"一、搜索是什么","slug":"一、搜索是什么","link":"#一、搜索是什么","children":[]},{"level":3,"title":"二、数据库做搜索弊端","slug":"二、数据库做搜索弊端","link":"#二、数据库做搜索弊端","children":[]},{"level":3,"title":"三、全文检索、倒排索引和Lucene","slug":"三、全文检索、倒排索引和lucene","link":"#三、全文检索、倒排索引和lucene","children":[]},{"level":3,"title":"四、什么是Elasticsearch","slug":"四、什么是elasticsearch","link":"#四、什么是elasticsearch","children":[]},{"level":3,"title":"五、elasticsearch核心概念","slug":"五、elasticsearch核心概念","link":"#五、elasticsearch核心概念","children":[]}]},{"level":2,"title":"第四章 Elasticsearch相关软件安装","slug":"第四章-elasticsearch相关软件安装","link":"#第四章-elasticsearch相关软件安装","children":[{"level":3,"title":"一、Windows安装elasticsearch","slug":"一、windows安装elasticsearch","link":"#一、windows安装elasticsearch","children":[]},{"level":3,"title":"二、 Windows安装Kibana","slug":"二、-windows安装kibana","link":"#二、-windows安装kibana","children":[]},{"level":3,"title":"三、 Windows安装postman","slug":"三、-windows安装postman","link":"#三、-windows安装postman","children":[]},{"level":3,"title":"四、Windows安装head插件","slug":"四、windows安装head插件","link":"#四、windows安装head插件","children":[]}]},{"level":2,"title":"第五章 es快速入门","slug":"第五章-es快速入门","link":"#第五章-es快速入门","children":[{"level":3,"title":"一、文档（document）的数据格式","slug":"一、文档-document-的数据格式","link":"#一、文档-document-的数据格式","children":[]},{"level":3,"title":"二、图书网站商品管理案例：背景介绍","slug":"二、图书网站商品管理案例-背景介绍","link":"#二、图书网站商品管理案例-背景介绍","children":[]},{"level":3,"title":"三、简单的集群管理","slug":"三、简单的集群管理","link":"#三、简单的集群管理","children":[]}]},{"level":2,"title":"第六章 文档document入门","slug":"第六章-文档document入门","link":"#第六章-文档document入门","children":[{"level":3,"title":"一、 默认自带字段解析","slug":"一、-默认自带字段解析","link":"#一、-默认自带字段解析","children":[]},{"level":3,"title":"二、生成文档id","slug":"二、生成文档id","link":"#二、生成文档id","children":[]},{"level":3,"title":"三、 _source 字段","slug":"三、-source-字段","link":"#三、-source-字段","children":[]},{"level":3,"title":"四、文档的替换与删除","slug":"四、文档的替换与删除","link":"#四、文档的替换与删除","children":[]},{"level":3,"title":"五、局部替换 partial update","slug":"五、局部替换-partial-update","link":"#五、局部替换-partial-update","children":[]},{"level":3,"title":"六、 使用脚本更新","slug":"六、-使用脚本更新","link":"#六、-使用脚本更新","children":[]},{"level":3,"title":"七、 图解es的并发问题","slug":"七、-图解es的并发问题","link":"#七、-图解es的并发问题","children":[]},{"level":3,"title":"八、 图解悲观锁与乐观锁机制","slug":"八、-图解悲观锁与乐观锁机制","link":"#八、-图解悲观锁与乐观锁机制","children":[]},{"level":3,"title":"九、图解es内部基于_version乐观锁控制","slug":"九、图解es内部基于-version乐观锁控制","link":"#九、图解es内部基于-version乐观锁控制","children":[]},{"level":3,"title":"十、演示客户端程序基于_version并发操作流程","slug":"十、演示客户端程序基于-version并发操作流程","link":"#十、演示客户端程序基于-version并发操作流程","children":[]},{"level":3,"title":"十一、演示自己手动控制版本号 external version","slug":"十一、演示自己手动控制版本号-external-version","link":"#十一、演示自己手动控制版本号-external-version","children":[]},{"level":3,"title":"十二、更新时 retry_on_conflict 参数","slug":"十二、更新时-retry-on-conflict-参数","link":"#十二、更新时-retry-on-conflict-参数","children":[]},{"level":3,"title":"十三、 批量查询 mget","slug":"十三、-批量查询-mget","link":"#十三、-批量查询-mget","children":[]},{"level":3,"title":"十四、批量增删改 bulk","slug":"十四、批量增删改-bulk","link":"#十四、批量增删改-bulk","children":[]},{"level":3,"title":"十五、 文档概念学习总结","slug":"十五、-文档概念学习总结","link":"#十五、-文档概念学习总结","children":[]}]},{"level":2,"title":"第七章 Java api 实现文档管理","slug":"第七章-java-api-实现文档管理","link":"#第七章-java-api-实现文档管理","children":[{"level":3,"title":"一、es技术特点","slug":"一、es技术特点","link":"#一、es技术特点","children":[]},{"level":3,"title":"二、 java 客户端简单获取数据","slug":"二、-java-客户端简单获取数据","link":"#二、-java-客户端简单获取数据","children":[]},{"level":3,"title":"三、结合spring-boot-test测试文档查询","slug":"三、结合spring-boot-test测试文档查询","link":"#三、结合spring-boot-test测试文档查询","children":[]},{"level":3,"title":"四、结合spring-boot-test测试文档新增","slug":"四、结合spring-boot-test测试文档新增","link":"#四、结合spring-boot-test测试文档新增","children":[]},{"level":3,"title":"五、结合spring-boot-test测试文档修改","slug":"五、结合spring-boot-test测试文档修改","link":"#五、结合spring-boot-test测试文档修改","children":[]},{"level":3,"title":"六、结合spring-boot-test测试文档删除","slug":"六、结合spring-boot-test测试文档删除","link":"#六、结合spring-boot-test测试文档删除","children":[]},{"level":3,"title":"七、结合spring-boot-test测试文档bulk","slug":"七、结合spring-boot-test测试文档bulk","link":"#七、结合spring-boot-test测试文档bulk","children":[]}]},{"level":2,"title":"第八章 图解es内部机制","slug":"第八章-图解es内部机制","link":"#第八章-图解es内部机制","children":[{"level":3,"title":"一、图解es分布式基础","slug":"一、图解es分布式基础","link":"#一、图解es分布式基础","children":[]},{"level":3,"title":"二、图解分片shard、副本replica机制","slug":"二、图解分片shard、副本replica机制","link":"#二、图解分片shard、副本replica机制","children":[]}]},{"level":2,"title":"第九章 图解文档存储机制","slug":"第九章-图解文档存储机制","link":"#第九章-图解文档存储机制","children":[{"level":3,"title":"一、数据路由","slug":"一、数据路由","link":"#一、数据路由","children":[]},{"level":3,"title":"二、 图解文档的增删改内部机制","slug":"二、-图解文档的增删改内部机制","link":"#二、-图解文档的增删改内部机制","children":[]},{"level":3,"title":"三、图解文档的查询内部机制","slug":"三、图解文档的查询内部机制","link":"#三、图解文档的查询内部机制","children":[]},{"level":3,"title":"四、bulk api奇特的json格式","slug":"四、bulk-api奇特的json格式","link":"#四、bulk-api奇特的json格式","children":[]}]},{"level":2,"title":"第十章 Mapping映射入门","slug":"第十章-mapping映射入门","link":"#第十章-mapping映射入门","children":[{"level":3,"title":"一、 什么是mapping映射","slug":"一、-什么是mapping映射","link":"#一、-什么是mapping映射","children":[]},{"level":3,"title":"二、精确匹配与全文搜索的对比分析","slug":"二、精确匹配与全文搜索的对比分析","link":"#二、精确匹配与全文搜索的对比分析","children":[]},{"level":3,"title":"三、全文检索下倒排索引核心原理快速揭秘","slug":"三、全文检索下倒排索引核心原理快速揭秘","link":"#三、全文检索下倒排索引核心原理快速揭秘","children":[]},{"level":3,"title":"四、分词器 analyzer","slug":"四、分词器-analyzer","link":"#四、分词器-analyzer","children":[]},{"level":3,"title":"五、query string根据字段分词策略","slug":"五、query-string根据字段分词策略","link":"#五、query-string根据字段分词策略","children":[]},{"level":3,"title":"六、mapping回顾总结","slug":"六、mapping回顾总结","link":"#六、mapping回顾总结","children":[]},{"level":3,"title":"七、mapping的核心数据类型以及dynamic mapping","slug":"七、mapping的核心数据类型以及dynamic-mapping","link":"#七、mapping的核心数据类型以及dynamic-mapping","children":[]},{"level":3,"title":"八、手动管理mapping","slug":"八、手动管理mapping","link":"#八、手动管理mapping","children":[]},{"level":3,"title":"九、 复杂数据类型","slug":"九、-复杂数据类型","link":"#九、-复杂数据类型","children":[]}]}],"git":{"updatedTime":1723726527000,"contributors":[{"name":"zqb","email":"2506956864@qq.com","commits":1}]},"filePathRelative":"elk1/README.md","excerpt":"\\n<h2>第一章 课程简介</h2>\\n<h3>一、课程内容</h3>\\n<p>ELK是包含但不限于Elasticsearch（简称es）、Logstash、Kibana 三个开源软件的组成的一个整体，分别取其首字母组成ELK。ELK是用于数据抽取（Logstash）、搜索分析（Elasticsearch）、数据展现（Kibana）的一整套解决方案，所以也称作ELK stack。</p>\\n<p>本课程分别对三个组件进行详细介绍，尤其是Elasticsearch，因为它是ELK的核心。Elasticsearch会对底层的文档、索引、搜索、聚合、集群进行介绍，从搜索和聚合分析实例来展现它的魅力。Logstash会从内部如何采集数据到指定地方来展现它数据采集的功能。Kibana则从数据绘图来展现它数据可视化的能力。</p>"}');export{r as comp,u as data};
