import{_ as s,c as n,o as a,a as p}from"./app-CiSBoDQ3.js";const e={},l=p(`<h1 id="面向对象的其他知识" tabindex="-1"><a class="header-anchor" href="#面向对象的其他知识"><span>面向对象的其他知识</span></a></h1><h2 id="_1、代码块" tabindex="-1"><a class="header-anchor" href="#_1、代码块"><span>1、代码块</span></a></h2><p>代码块又称初始化块，属于类中的成员，它是讲逻辑语句封装在方法体中，通过{} 包裹。代码块没有方法名，没有参数，没有返回值，只有方法体，而且不通过对象或类进行显示的调用，他会在类加载，或者创建对象时主动的隐式调用。</p><h3 id="_1-静态代码块" tabindex="-1"><a class="header-anchor" href="#_1-静态代码块"><span>（1）静态代码块</span></a></h3><p>一个类被加载时会被主动调用一次，常用在需要做一些全局初始化的工作。会从磁盘中加载到内存</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-实例代码块" tabindex="-1"><a class="header-anchor" href="#_2-实例代码块"><span>（2）实例代码块</span></a></h3><p>每次创建实例，都会被调用一次。其实用的很少</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>举个例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am a static code  block!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;I am a instance code block!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">结果：</span>
<span class="line"><span class="token class-name">I</span> am a <span class="token keyword">static</span> code  block<span class="token operator">!</span></span>
<span class="line"><span class="token class-name">I</span> am a instance code block<span class="token operator">!</span></span>
<span class="line"><span class="token class-name">I</span> am a instance code block<span class="token operator">!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-字节码分析" tabindex="-1"><a class="header-anchor" href="#_3-字节码分析"><span>（3）字节码分析</span></a></h3><p>我们简单分析一下字节码：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">D</span><span class="token operator">:</span>\\code&#39;<span class="token operator">&gt;</span>javap <span class="token operator">-</span>v <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line"><span class="token class-name">Classfile</span> <span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token operator">/</span>code&#39;<span class="token operator">/</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line">  <span class="token class-name">Last</span> modified <span class="token number">2021</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">;</span> size <span class="token number">556</span> bytes</span>
<span class="line">  <span class="token constant">MD5</span> checksum <span class="token number">10</span>a166e49910fafcc02f1bc4ea28e055</span>
<span class="line">  <span class="token class-name">Compiled</span> from <span class="token string">&quot;User.java&quot;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span></span>
<span class="line">  minor version<span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  major version<span class="token operator">:</span> <span class="token number">52</span></span>
<span class="line">  flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span></span>
<span class="line"><span class="token class-name">Constant</span> pool<span class="token operator">:</span></span>
<span class="line">   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">8.</span>#<span class="token number">18</span>         <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">19.</span>#<span class="token number">20</span>        <span class="token comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">String</span>             #<span class="token number">21</span>            <span class="token comment">// I am a instance code block!</span></span>
<span class="line">   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">22.</span>#<span class="token number">23</span>        <span class="token comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">24</span>            <span class="token comment">// User</span></span>
<span class="line">   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">5.</span>#<span class="token number">18</span>         <span class="token comment">// User.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">String</span>             #<span class="token number">25</span>            <span class="token comment">// I am a static code  block!</span></span>
<span class="line">   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">26</span>            <span class="token comment">// java/lang/Object</span></span>
<span class="line">   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span></span>
<span class="line">  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span></span>
<span class="line">  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span></span>
<span class="line">  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               main</span>
<span class="line">  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span></span>
<span class="line">  #<span class="token number">16</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span></span>
<span class="line">  #<span class="token number">17</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">User</span><span class="token punctuation">.</span>java</span>
<span class="line">  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">9</span><span class="token operator">:</span>#<span class="token number">10</span>         <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">27</span>            <span class="token comment">// java/lang/System</span></span>
<span class="line">  #<span class="token number">20</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">28</span><span class="token operator">:</span>#<span class="token number">29</span>        <span class="token comment">// out:Ljava/io/PrintStream;</span></span>
<span class="line">  #<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">I</span> am a instance code block<span class="token operator">!</span></span>
<span class="line">  #<span class="token number">22</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">30</span>            <span class="token comment">// java/io/PrintStream</span></span>
<span class="line">  #<span class="token number">23</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">31</span><span class="token operator">:</span>#<span class="token number">32</span>        <span class="token comment">// println:(Ljava/lang/String;)V</span></span>
<span class="line">  #<span class="token number">24</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">User</span></span>
<span class="line">  #<span class="token number">25</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">I</span> am a <span class="token keyword">static</span> code  block<span class="token operator">!</span></span>
<span class="line">  #<span class="token number">26</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span></span>
<span class="line">  #<span class="token number">27</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span></span>
<span class="line">  #<span class="token number">28</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               out</span>
<span class="line">  #<span class="token number">29</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Ljava</span><span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">;</span></span>
<span class="line">  #<span class="token number">30</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span></span>
<span class="line">  #<span class="token number">31</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               println</span>
<span class="line">  #<span class="token number">32</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token comment">// 我们发现构造器内出现了实例代码块的内容，</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> aload_0</span>
<span class="line">         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">         <span class="token number">7</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String I am a instance code block!</span></span>
<span class="line">         <span class="token number">9</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">        <span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">4</span></span>
<span class="line">        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">12</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">5</span>                  <span class="token comment">// class User</span></span>
<span class="line">         <span class="token number">3</span><span class="token operator">:</span> dup</span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">6</span>                  <span class="token comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">         <span class="token number">7</span><span class="token operator">:</span> pop</span>
<span class="line">         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">5</span>                  <span class="token comment">// class User</span></span>
<span class="line">        <span class="token number">11</span><span class="token operator">:</span> dup</span>
<span class="line">        <span class="token number">12</span><span class="token operator">:</span> invokespecial #<span class="token number">6</span>                  <span class="token comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">        <span class="token number">15</span><span class="token operator">:</span> pop</span>
<span class="line">        <span class="token number">16</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">8</span></span>
<span class="line">        line <span class="token number">14</span><span class="token operator">:</span> <span class="token number">16</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// static会在一个类加载到内存的时候调用</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">         <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">7</span>                  <span class="token comment">// String I am a static code  block!</span></span>
<span class="line">         <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">5</span><span class="token operator">:</span> <span class="token number">8</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">&quot;User.java&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-执行顺序" tabindex="-1"><a class="header-anchor" href="#_4-执行顺序"><span>（4）执行顺序</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是父类的构造器！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是父类的实例代码快！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是父类的静态代码快！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Son</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是子类的构造器！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是子类的实例代码快！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;这是子类的静态代码快！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结果：记住</p><ol><li>这是父类的静态代码块！</li><li>这是子类的静态代码块！</li><li>这是父类的实例代码块！</li><li>这是父类的构造器！</li><li>这是子类的实例代码块！</li><li>这是子类的构造器！</li></ol><p>还是分析字节码：</p><p>我们直接看Son类就可以了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">D</span><span class="token operator">:</span>\\code\\test\\out\\production\\test\\aaa<span class="token operator">&gt;</span>javap <span class="token operator">-</span>v <span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line"><span class="token class-name">Classfile</span> <span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token operator">/</span>code<span class="token operator">/</span>test<span class="token operator">/</span>out<span class="token operator">/</span>production<span class="token operator">/</span>test<span class="token operator">/</span>aaa<span class="token operator">/</span><span class="token class-name">Son</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line">  <span class="token class-name">Last</span> modified <span class="token number">2021</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">;</span> size <span class="token number">703</span> bytes</span>
<span class="line">  <span class="token constant">MD5</span> checksum ec5d9dd441d9b44af4f8ae995810196c</span>
<span class="line">  <span class="token class-name">Compiled</span> from <span class="token string">&quot;Son.java&quot;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">aaa<span class="token punctuation">.</span></span>Son</span> <span class="token keyword">extends</span> <span class="token class-name"><span class="token namespace">aaa<span class="token punctuation">.</span></span>Father</span></span>
<span class="line">  minor version<span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  major version<span class="token operator">:</span> <span class="token number">52</span></span>
<span class="line">  flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span></span>
<span class="line"><span class="token class-name">Constant</span> pool<span class="token operator">:</span></span>
<span class="line">   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">9.</span>#<span class="token number">24</span>         <span class="token comment">// aaa/Father.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">  <span class="token comment">// 中间的省略了......</span></span>
<span class="line">  #<span class="token number">39</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">aaa<span class="token punctuation">.</span></span>Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> aload_0</span>
<span class="line">         <span class="token comment">// 子类的构造器会首先调用父类的构造器</span></span>
<span class="line">         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method aaa/Father.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">         <span class="token comment">// 从这个字节码中我们就能看出，实例代码快在子类构造器器中的代码之前    </span></span>
<span class="line">         <span class="token number">7</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String 这是子类的实例代码快！</span></span>
<span class="line">         <span class="token number">9</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">        <span class="token number">12</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">        <span class="token number">15</span><span class="token operator">:</span> ldc           #<span class="token number">5</span>                  <span class="token comment">// String 这是子类的构造器！</span></span>
<span class="line">        <span class="token number">17</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">        <span class="token number">20</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">4</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">9</span><span class="token operator">:</span> <span class="token number">4</span></span>
<span class="line">        line <span class="token number">5</span><span class="token operator">:</span> <span class="token number">12</span></span>
<span class="line">        line <span class="token number">6</span><span class="token operator">:</span> <span class="token number">20</span></span>
<span class="line">      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span></span>
<span class="line">        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span></span>
<span class="line">            <span class="token number">0</span>      <span class="token number">21</span>     <span class="token number">0</span>  <span class="token keyword">this</span>   <span class="token class-name">Laaa</span><span class="token operator">/</span><span class="token class-name">Son</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">6</span>                  <span class="token comment">// class aaa/Son</span></span>
<span class="line">         <span class="token number">3</span><span class="token operator">:</span> dup</span>
<span class="line">         <span class="token comment">// 调用子类构造器</span></span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> invokespecial #<span class="token number">7</span>                  <span class="token comment">// Method &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">         <span class="token number">7</span><span class="token operator">:</span> pop</span>
<span class="line">         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">17</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">18</span><span class="token operator">:</span> <span class="token number">8</span></span>
<span class="line">      <span class="token class-name">LocalVariableTable</span><span class="token operator">:</span></span>
<span class="line">        <span class="token class-name">Start</span>  <span class="token class-name">Length</span>  <span class="token class-name">Slot</span>  <span class="token class-name">Name</span>   <span class="token class-name">Signature</span></span>
<span class="line">            <span class="token number">0</span>       <span class="token number">9</span>     <span class="token number">0</span>  args   <span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">2</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">         <span class="token comment">// 加载后会调用静态代码块                            </span></span>
<span class="line">         <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">8</span>                  <span class="token comment">// String 这是子类的静态代码快！</span></span>
<span class="line">         <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">4</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">14</span><span class="token operator">:</span> <span class="token number">8</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">&quot;Son.java&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作业：有兴趣的同学可以在父子类中加上几个重载的方法，看看具体的调用顺序，其实这个还是挺重要的。</p><h2 id="_2、静态方法和静态变量" tabindex="-1"><a class="header-anchor" href="#_2、静态方法和静态变量"><span>2、静态方法和静态变量</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name1 <span class="token operator">=</span> <span class="token string">&quot;ydlclass&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> name2 <span class="token operator">=</span> <span class="token string">&quot;ydlclass&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">D</span><span class="token operator">:</span>\\code&#39;<span class="token operator">&gt;</span>javap <span class="token operator">-</span>v <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line"><span class="token class-name">Classfile</span> <span class="token operator">/</span><span class="token class-name">D</span><span class="token operator">:</span><span class="token operator">/</span>code&#39;<span class="token operator">/</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span></span>
<span class="line">  <span class="token class-name">Last</span> modified <span class="token number">2021</span><span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">;</span> size <span class="token number">636</span> bytes</span>
<span class="line">  <span class="token constant">MD5</span> checksum e0b2ffbf845e63ade74452ac4d383a9e</span>
<span class="line">  <span class="token class-name">Compiled</span> from <span class="token string">&quot;User.java&quot;</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span></span>
<span class="line">  minor version<span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">  major version<span class="token operator">:</span> <span class="token number">52</span></span>
<span class="line">  flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_SUPER</span></span>
<span class="line"><span class="token class-name">Constant</span> pool<span class="token operator">:</span></span>
<span class="line">   #<span class="token number">1</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">10.</span>#<span class="token number">24</span>        <span class="token comment">// java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">   #<span class="token number">2</span> <span class="token operator">=</span> <span class="token class-name">String</span>             #<span class="token number">25</span>            <span class="token comment">// ydlclass</span></span>
<span class="line">   #<span class="token number">3</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">9.</span>#<span class="token number">26</span>         <span class="token comment">// User.name2:Ljava/lang/String;</span></span>
<span class="line">   #<span class="token number">4</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">27.</span>#<span class="token number">28</span>        <span class="token comment">// java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">   #<span class="token number">5</span> <span class="token operator">=</span> <span class="token class-name">String</span>             #<span class="token number">29</span>            <span class="token comment">// hello</span></span>
<span class="line">   #<span class="token number">6</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">30.</span>#<span class="token number">31</span>        <span class="token comment">// java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">   #<span class="token number">7</span> <span class="token operator">=</span> <span class="token class-name">Fieldref</span>           #<span class="token number">9.</span>#<span class="token number">32</span>         <span class="token comment">// User.name1:Ljava/lang/String;</span></span>
<span class="line">   #<span class="token number">8</span> <span class="token operator">=</span> <span class="token class-name">Methodref</span>          #<span class="token number">9.</span>#<span class="token number">33</span>         <span class="token comment">// User.print:()V</span></span>
<span class="line">   #<span class="token number">9</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">34</span>            <span class="token comment">// User</span></span>
<span class="line">  #<span class="token number">10</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">35</span>            <span class="token comment">// java/lang/Object</span></span>
<span class="line">  #<span class="token number">11</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               name1</span>
<span class="line">  #<span class="token number">12</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line">  #<span class="token number">13</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               name2</span>
<span class="line">  #<span class="token number">14</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>init<span class="token punctuation">&gt;</span></span></span>
<span class="line">  #<span class="token number">15</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">  #<span class="token number">16</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Code</span></span>
<span class="line">  #<span class="token number">17</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">LineNumberTable</span></span>
<span class="line">  #<span class="token number">18</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               print</span>
<span class="line">  #<span class="token number">19</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               main</span>
<span class="line">  #<span class="token number">20</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">  #<span class="token number">21</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token generics"><span class="token punctuation">&lt;</span>clinit<span class="token punctuation">&gt;</span></span></span>
<span class="line">  #<span class="token number">22</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">SourceFile</span></span>
<span class="line">  #<span class="token number">23</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">User</span><span class="token punctuation">.</span>java</span>
<span class="line">  #<span class="token number">24</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">14</span><span class="token operator">:</span>#<span class="token number">15</span>        <span class="token comment">// &quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">  #<span class="token number">25</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               ydlclass</span>
<span class="line">  #<span class="token number">26</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">13</span><span class="token operator">:</span>#<span class="token number">12</span>        <span class="token comment">// name2:Ljava/lang/String;</span></span>
<span class="line">  #<span class="token number">27</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">36</span>            <span class="token comment">// java/lang/System</span></span>
<span class="line">  #<span class="token number">28</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">37</span><span class="token operator">:</span>#<span class="token number">38</span>        <span class="token comment">// out:Ljava/io/PrintStream;</span></span>
<span class="line">  #<span class="token number">29</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               hello</span>
<span class="line">  #<span class="token number">30</span> <span class="token operator">=</span> <span class="token class-name">Class</span>              #<span class="token number">39</span>            <span class="token comment">// java/io/PrintStream</span></span>
<span class="line">  #<span class="token number">31</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">40</span><span class="token operator">:</span>#<span class="token number">41</span>        <span class="token comment">// println:(Ljava/lang/String;)V</span></span>
<span class="line">  #<span class="token number">32</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">11</span><span class="token operator">:</span>#<span class="token number">12</span>        <span class="token comment">// name1:Ljava/lang/String;</span></span>
<span class="line">  #<span class="token number">33</span> <span class="token operator">=</span> <span class="token class-name">NameAndType</span>        #<span class="token number">18</span><span class="token operator">:</span>#<span class="token number">15</span>        <span class="token comment">// print:()V</span></span>
<span class="line">  #<span class="token number">34</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">User</span></span>
<span class="line">  #<span class="token number">35</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">Object</span></span>
<span class="line">  #<span class="token number">36</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">System</span></span>
<span class="line">  #<span class="token number">37</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               out</span>
<span class="line">  #<span class="token number">38</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token class-name">Ljava</span><span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span><span class="token punctuation">;</span></span>
<span class="line">  #<span class="token number">39</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               java<span class="token operator">/</span>io<span class="token operator">/</span><span class="token class-name">PrintStream</span></span>
<span class="line">  #<span class="token number">40</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               println</span>
<span class="line">  #<span class="token number">41</span> <span class="token operator">=</span> <span class="token class-name">Utf8</span>               <span class="token punctuation">(</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> name1<span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span> name2<span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> aload_0</span>
<span class="line">         <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span></span>
<span class="line">         <span class="token number">4</span><span class="token operator">:</span> aload_0</span>
<span class="line">         <span class="token comment">// 把常量池中的项压入栈</span></span>
<span class="line">         <span class="token number">5</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String ydlclass</span></span>
<span class="line">         <span class="token comment">// 为指定的类的实例域赋值，很明显这里就是赋值的操作</span></span>
<span class="line">         <span class="token number">7</span><span class="token operator">:</span> putfield      #<span class="token number">3</span>                  <span class="token comment">// Field name2:Ljava/lang/String;</span></span>
<span class="line">        <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">1</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">4</span><span class="token operator">:</span> <span class="token number">4</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">4</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">         <span class="token number">3</span><span class="token operator">:</span> ldc           #<span class="token number">5</span>                  <span class="token comment">// String hello</span></span>
<span class="line">         <span class="token number">5</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">         <span class="token number">8</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">7</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">8</span><span class="token operator">:</span> <span class="token number">8</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">Ljava</span><span class="token operator">/</span>lang<span class="token operator">/</span><span class="token class-name">String</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">1</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">4</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span></span>
<span class="line">         <span class="token comment">// 获取一个静态的变量</span></span>
<span class="line">         <span class="token number">3</span><span class="token operator">:</span> getstatic     #<span class="token number">7</span>                  <span class="token comment">// Field name1:Ljava/lang/String;</span></span>
<span class="line">         <span class="token number">6</span><span class="token operator">:</span> invokevirtual #<span class="token number">6</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span></span>
<span class="line">         <span class="token number">9</span><span class="token operator">:</span> invokestatic  #<span class="token number">8</span>                  <span class="token comment">// Method print:()V</span></span>
<span class="line">        <span class="token number">12</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">11</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line">        line <span class="token number">12</span><span class="token operator">:</span> <span class="token number">9</span></span>
<span class="line">        line <span class="token number">13</span><span class="token operator">:</span> <span class="token number">12</span></span>
<span class="line">  <span class="token comment">// 像这种静态块，只会调用一次</span></span>
<span class="line">  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">    descriptor<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">V</span></span>
<span class="line">    flags<span class="token operator">:</span> <span class="token constant">ACC_STATIC</span></span>
<span class="line">    <span class="token class-name">Code</span><span class="token operator">:</span></span>
<span class="line">      stack<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> locals<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> args_size<span class="token operator">=</span><span class="token number">0</span></span>
<span class="line">         <span class="token comment">// 把常量池中的项压入栈</span></span>
<span class="line">         <span class="token number">0</span><span class="token operator">:</span> ldc           #<span class="token number">2</span>                  <span class="token comment">// String ydlclass</span></span>
<span class="line">         <span class="token comment">// 为指定的类的静态域赋值</span></span>
<span class="line">         <span class="token number">2</span><span class="token operator">:</span> putstatic     #<span class="token number">7</span>                  <span class="token comment">// Field name1:Ljava/lang/String;</span></span>
<span class="line">         <span class="token number">5</span><span class="token operator">:</span> <span class="token keyword">return</span></span>
<span class="line">      <span class="token class-name">LineNumberTable</span><span class="token operator">:</span></span>
<span class="line">        line <span class="token number">3</span><span class="token operator">:</span> <span class="token number">0</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">SourceFile</span><span class="token operator">:</span> <span class="token string">&quot;User.java&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其实，为什么要有构造方法，我觉得大家可以从这里看出来，即使我们的构造器是个空方法，经过编译也会将一部分对实例对象的初始化工作编译在我们的构造器中。</p><p>通过分析字节码，我们大概了解到：</p><p>1、静态的变量或者静态方法是存在方法区的，其他的方法也是在方法区（永久带，元空间）。</p><p>2、它们不属于实例对象，只是存在与方法区，调用要使用User. print()，也就是类名.方法的方式调用。</p><hr><p>实例方法和静态方法互相调用。</p><p>1、静态方法中可以直接调用实例方法吗？</p><p>2、实例方法中可以直接调用静态方法吗？</p><p>其实我们只要明白一个道理就行，</p><p>在java中调用实例方法，必须要有主体，方法不是一等公民，不能直接当参数，也不能直接调用：</p><p>在同一个类中直接调用时默认省略了this，而在静态方法中没有this，所以在静态方法中调用实例方法，必须new一个对象。</p><p>而静态方法无论在哪里都是 类名.方法名 调用，当然同一个类的静态方法之间调用可以省略类名，不过建议还是写上。</p><p>利用静态方法和静态变量的特点，在项目中我们一般会这样使用</p><ul><li><p>使用静态方法完成一些工具性质的类：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Computer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">minus</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> i <span class="token operator">-</span> j<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>怎么使用呢？</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Computer.plus(3,2);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>使用静态变量完成一些全局只有一份的常量类的定义，也叫静态常量。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constants</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * UTF-8 字符集</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">UTF8</span> <span class="token operator">=</span> <span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * GBK 字符集</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">GBK</span> <span class="token operator">=</span> <span class="token string">&quot;GBK&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 通用成功标识</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SUCCESS</span> <span class="token operator">=</span> <span class="token string">&quot;0&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 通用失败标识</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">FAIL</span> <span class="token operator">=</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 系统是</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">SYSTEM_IS</span> <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">    * 系统否</span>
<span class="line">    */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> <span class="token constant">SYSTEM_NO</span> <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们怎么使用呢？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">FAIL</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h2 id="_3、内部类" tabindex="-1"><a class="header-anchor" href="#_3、内部类"><span>3、内部类</span></a></h2><p><strong>内部类：</strong> 所谓内部类就是在一个类内部进行其他类结构的嵌套操作，什么情况下有这个需求呢，回顾我们的超级链表，Node这个节点类其实主要就是给，SuperLinked使用，所以我们可以把这个类定在定SuperLinked中就好了。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token class-name">SuperLinked</span><span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token class-name">Node</span> head <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">//...</span></span>
<span class="line">    <span class="token comment">//定义一个内部类</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>内部类一样可以被权限修饰符来修饰，如果一个类归属于一个工程，而一个内部类就归属于一个类：</p><p>在外部如何创建内部类：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;外部类被加载&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 不被static修饰就是属于实例对象</span></span>
<span class="line">    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;内部类被加载&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这个写法就离谱</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为一个类内部的属性方法不加static就是属于实例对象的。</p><p>如果我们想这样更友好的创建呢？你一定能想到静态：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;外部类被加载&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">static</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;内部类被加载&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">new</span> <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">外部类被加载</span>
<span class="line">内部类被加载</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这叫静态内部类，相比实例内部类，我们主要使用的是静态内部类。</p><p>当然如果我们不希望其他的类访问我们的内部类，加上private就好了。</p><h2 id="_4、单例设计模式" tabindex="-1"><a class="header-anchor" href="#_4、单例设计模式"><span>4、单例设计模式</span></a></h2><p>单例模式，是一种常用的软件设计模式。通过单例模式可以保证系统中，应用该模式的类一个类只有一个实例。即一个类只有一个对象实例。</p><p>具体的思路是：</p><p>（1）别人不能new实例，所以要将构造方法私有化，使其不能在类的外部通过new关键字实例化该类对象。</p><p>（2）在该类内部产生一个唯一的实例化对象，并且将其封装为private static类型。</p><p>（3）定义一个静态方法返回这个唯一对象。</p><h3 id="_1-饿汉式" tabindex="-1"><a class="header-anchor" href="#_1-饿汉式"><span>（1）饿汉式</span></a></h3><p>立即加载就是使用类的时候已经将对象创建完毕（不管以后会不会使用到该实例化对象，先创建了再说。很着急的样子，故又被称为“饿汉模式”），常见的实现办法就是直接new实例化。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将自身实例化对象设置为一个属性，并用static、final修饰</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 构造方法私有化</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 静态方法返回该实例</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-懒汉式" tabindex="-1"><a class="header-anchor" href="#_2-懒汉式"><span>（2）懒汉式</span></a></h3><p>延迟加载就是调用get()方法时实例才被创建（先不急着实例化出对象，等要用的时候才给你创建出来。不着急，故又称为“懒汉模式”），常见的实现方法就是在get方法中进行new实例化。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将自身实例化对象设置为一个属性，并用static修饰</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance<span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 构造方法私有化</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 静态方法返回该实例</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> instance<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种懒汉式在多线程环境中是完全错误的，根本不能保证单例的状态，我们目前先不用理解。后边会详细介绍。</p><h3 id="_3-内部类实现单例" tabindex="-1"><a class="header-anchor" href="#_3-内部类实现单例"><span>（3）内部类实现单例</span></a></h3><p>这种也是懒汉式的一种实现，而且使用这种懒汉式没有任何的线程问题，大家来思考，结合咱们上边的内容，只要不调用getInstance()方法，就不会使用内部类，内部类一旦被使用只会被初始化一次，以后一直用的就是静态常量 INSTANCE 了。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/** 私有化构造器 */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/** 对外提供公共的访问方法 */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span><span class="token constant">INSTANCE</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/** 写一个静态内部类，里面实例化外部类 */</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Singleton</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、匿名内部类" tabindex="-1"><a class="header-anchor" href="#_4、匿名内部类"><span>4、匿名内部类</span></a></h2><p>http://t.zoukankan.com/kaleidoscope-p-9494968.html</p><p>匿名内部类可以通过new的形式，来实现接口或者子类中的方法</p><p>匿名内部类没有名字，所以只能使用一次</p><blockquote><p>实现接口的匿名类</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">wolf<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;吃了&quot;</span> <span class="token operator">+</span> animal<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token string">&quot;pig&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之前的列子，常理中接口是不能直接new的。</p><blockquote><p>匿名子类（继承父类）</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">tiger<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Wolf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> <span class="token string">&quot;白狼王&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从以上两个实例中可知，匿名类表达式包含以下内部分：</p><ol><li>操作符：new；</li><li>一个要实现的接口或要继承的类，案例一中的匿名类实现了HellowWorld接口，案例二中的匿名内部类继承了Animal父类；</li><li>一对括号，如果是匿名子类，与实例化普通类的语法类似，如果有构造参数，要带上构造参数；如果是实现一个接口，只需要一对空括号即可；</li><li>一段被&quot;{}&quot;括起来类声明主体；</li><li>末尾的&quot;;&quot;号（因为匿名类的声明是一个表达式，是语句的一部分，因此要以分号结尾）。</li></ol><p>回头思考我们的策略设计模式中，就可以使用匿名内部类实现，直接在参数上<code>new Comparator(){}</code>就可以了。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">【内部类编译出来后是一个类还是两个呢？】</span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span>  <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;teddy&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        </span>
<span class="line">        <span class="token class-name">Animal</span> animal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;is eating!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 这里会报错</span></span>
<span class="line">                name <span class="token operator">=</span> <span class="token string">&quot;hashiqi&quot;</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span>animal<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先这个问题会出错。</p><h2 id="_5、箭头函数" tabindex="-1"><a class="header-anchor" href="#_5、箭头函数"><span>5、箭头函数</span></a></h2><p>如果一个接口只有一个抽象方法，那么这个接口也称之为函数式接口。可以使用@FunctionalInterface注解标识。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@FunctionalInterface</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用函数式接口去构造内部类时，我们很简单的表示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 这个类能计算加法</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">function</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Function</span> function<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>function<span class="token punctuation">.</span><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这里我们使用了内部类</span></span>
<span class="line">        <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> i <span class="token operator">+</span> j<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以对之进行简化，</p><p>1、类名方法名全不要，这个结构分为两部分，第一部分，小括号包裹形参，类型也不要、第二部分 【-&gt;】、第三部分是方法体：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> public static void main(String[] args) {</span>
<span class="line">        // 这里我们使用了内部类</span>
<span class="line">        test((i,j) -&gt; {return i + j;});</span>
<span class="line"></span>
<span class="line">    }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、方法体如果只用一行代码，大括号可以省略，如果一行代码是返回值，return可以省略。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> public static void main(String[] args) {</span>
<span class="line">        // 这里我们使用了内部类</span>
<span class="line">        test((i,j) -&gt; i + j);</span>
<span class="line"></span>
<span class="line">    }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的内容我们放在函数式编程中讲。</p><h2 id="_6、值传递和所谓的引用传递" tabindex="-1"><a class="header-anchor" href="#_6、值传递和所谓的引用传递"><span>6、值传递和所谓的引用传递</span></a></h2><p>本质上java只有值传递，所有的传递都是一次值的拷贝。引用类型拷贝的是引用地址，基础数据类型拷贝的是值，不会传入实例对象本身。</p><p>我们先用一个例子热热身，你觉得最后的结果是什么呢？</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">changeDog</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> dog<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;jerry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">changeDog</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;Dog{&quot;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;name=&#39;&quot;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token char">&#39;\\&#39;&#39;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token char">&#39;}&#39;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210825173007972.8e18ae23.png" alt="image-20210825173007972"></p><p>我们用下边三个例子，给大家详细的介绍一下我们遇到的各种值传递的问题：</p><p>1、对于基础数据类型，调用changeInt(i)，这个过程不是把【i】传入这个方法，而是将i的值也就是【5】拷贝一份，赋值给形参【j】，所以形参无论怎么操作，不会影响【i】</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token function">changeInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	j <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">changeInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">结果：</span>
<span class="line">    <span class="token number">5</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、对于引用数据类型，调用changeInt(dog)方法，也不是将【dog】传入方法，而是将dog的引用地址值（0x123FE222）拷贝一份赋值给形参【d】，名字一样不一样都无所谓，当<code>d = new Dog(&quot;tom&quot;);</code>执行时，形参会开辟新空间，指向新对象，外部的【dog】不受影响。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token function">changeInt</span><span class="token punctuation">(</span><span class="token class-name">Dog</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token string">&quot;jerry&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">changeInt</span><span class="token punctuation">(</span>dog<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">结果：</span>
<span class="line">jerry</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>3、下边这种情况是另外一种情况，调用changeInt(dog)方法，当然也不是将【dog】传入方法，而是将dog的引用地址值（0x123FE222）拷贝一份赋值给形参【d】，此时无论是【形参d】还是外部【引用dog】都指向同一个地址的实例对象，内部使用<code>d.setName(&quot;tom&quot;);</code>修改实例对象当然会印象dog所指向的实例，因为是同一个嘛。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">changeInt(Dog d){</span>
<span class="line">	d.setName(&quot;tom&quot;);</span>
<span class="line">}</span>
<span class="line"></span>
<span class="line">Dog dog = new Dog(&quot;jerry&quot;);</span>
<span class="line">changeInt(dog);</span>
<span class="line">System.out.println(dog.getName());</span>
<span class="line"></span>
<span class="line">结果：</span>
<span class="line">tom</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,104),t=[l];function c(o,i){return a(),n("div",null,t)}const u=s(e,[["render",c],["__file","other.html.vue"]]),k=JSON.parse('{"path":"/JavaSE1/other.html","title":"面向对象的其他知识","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"1、代码块","slug":"_1、代码块","link":"#_1、代码块","children":[{"level":3,"title":"（1）静态代码块","slug":"_1-静态代码块","link":"#_1-静态代码块","children":[]},{"level":3,"title":"（2）实例代码块","slug":"_2-实例代码块","link":"#_2-实例代码块","children":[]},{"level":3,"title":"（3）字节码分析","slug":"_3-字节码分析","link":"#_3-字节码分析","children":[]},{"level":3,"title":"（4）执行顺序","slug":"_4-执行顺序","link":"#_4-执行顺序","children":[]}]},{"level":2,"title":"2、静态方法和静态变量","slug":"_2、静态方法和静态变量","link":"#_2、静态方法和静态变量","children":[]},{"level":2,"title":"3、内部类","slug":"_3、内部类","link":"#_3、内部类","children":[]},{"level":2,"title":"4、单例设计模式","slug":"_4、单例设计模式","link":"#_4、单例设计模式","children":[{"level":3,"title":"（1）饿汉式","slug":"_1-饿汉式","link":"#_1-饿汉式","children":[]},{"level":3,"title":"（2）懒汉式","slug":"_2-懒汉式","link":"#_2-懒汉式","children":[]},{"level":3,"title":"（3）内部类实现单例","slug":"_3-内部类实现单例","link":"#_3-内部类实现单例","children":[]}]},{"level":2,"title":"4、匿名内部类","slug":"_4、匿名内部类","link":"#_4、匿名内部类","children":[]},{"level":2,"title":"5、箭头函数","slug":"_5、箭头函数","link":"#_5、箭头函数","children":[]},{"level":2,"title":"6、值传递和所谓的引用传递","slug":"_6、值传递和所谓的引用传递","link":"#_6、值传递和所谓的引用传递","children":[]}],"git":{},"filePathRelative":"JavaSE1/other.md","excerpt":"\\n<h2>1、代码块</h2>\\n<p>代码块又称初始化块，属于类中的成员，它是讲逻辑语句封装在方法体中，通过{} 包裹。代码块没有方法名，没有参数，没有返回值，只有方法体，而且不通过对象或类进行显示的调用，他会在类加载，或者创建对象时主动的隐式调用。</p>\\n<h3>（1）静态代码块</h3>\\n<p>一个类被加载时会被主动调用一次，常用在需要做一些全局初始化的工作。会从磁盘中加载到内存</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"prismjs\\" data-ext=\\"java\\" data-title=\\"java\\"><pre><code><span class=\\"line\\"><span class=\\"token keyword\\">static</span> <span class=\\"token punctuation\\">{</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span class=\\"token punctuation\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>"}');export{u as comp,k as data};
