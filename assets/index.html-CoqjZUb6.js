import{_ as n,c as s,o as a,a as t}from"./app-CcpQiU3r.js";const e={},p=t(`<h1 id="javaweb" tabindex="-1"><a class="header-anchor" href="#javaweb"><span>JavaWeb</span></a></h1><h2 id="第一章-前端和后端的链接" tabindex="-1"><a class="header-anchor" href="#第一章-前端和后端的链接"><span>第一章 前端和后端的链接</span></a></h2><h3 id="一、-web-概念" tabindex="-1"><a class="header-anchor" href="#一、-web-概念"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81-web-%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener noreferrer">#</a>一、 web 概念</span></a></h3><p>这是百度百科的解释：</p><p>web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和HTTP的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接将Internet上的信息节点组织成一个互为关联的网状结构。</p><p>万维网不等于互联网，万维网是互联网的一个应用，简单的理解万维网就是由大量的服务器，比如百度、比如淘宝、比如我们的元动力网站组成，用户可以通过在浏览器中使用网址（资源定位符）来获取网络资源。如果我们想开发一个web应用，就需要开发应用，并部署在服务器上，当然这个服务器可以被其他人访问。</p><h4 id="_1、软件架构" tabindex="-1"><a class="header-anchor" href="#_1、软件架构"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener noreferrer">#</a>1、软件架构</span></a></h4><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> C/S： 客户端/服务器端 ------------&gt; QQ , 360 ...	  client server</span>
<span class="line"> B/S： 浏览器/服务器端 ------------&gt; 京东， 网易 ， 淘宝   brower/server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、资源分类" tabindex="-1"><a class="header-anchor" href="#_2、资源分类"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81%E8%B5%84%E6%BA%90%E5%88%86%E7%B1%BB" target="_blank" rel="noopener noreferrer">#</a>2、资源分类</span></a></h4><ol><li><strong>静态资源：</strong> 所有用户访问后，得到的结果都是一样的，称为静态资源。静态资源可以直接被浏览器解析。如图片、视频等。</li><li><strong>动态资源:</strong> 每个用户访问相同资源后，得到的结果可能不一样 , 称为动态资源。动态资源被访问后，需要先转换为静态资源，再返回给浏览器，通过浏览器进行解析。比如我们之前写的登录，不同的人登录后显示的用户名并不相同。</li></ol><ul><li>如：servlet,jsp,php,asp....</li></ul><h4 id="_3、常见的web服务器" tabindex="-1"><a class="header-anchor" href="#_3、常见的web服务器"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E5%B8%B8%E8%A7%81%E7%9A%84web%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener noreferrer">#</a>3、常见的web服务器</span></a></h4><h5 id="_1-概念" tabindex="-1"><a class="header-anchor" href="#_1-概念"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener noreferrer">#</a>（1）概念</span></a></h5><ol><li>服务器：安装了服务器软件的计算机</li><li>服务器软件：接收用户的请求，处理请求，做出响应</li><li>web服务器软件：接收用户的请求，处理请求，做出响应。</li></ol><p>在web服务器软件中，可以部署web项目，让用户通过浏览器来访问这些项目</p><h5 id="_2-常见服务器软件" tabindex="-1"><a class="header-anchor" href="#_2-常见服务器软件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-%E5%B8%B8%E8%A7%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BD%AF%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>（2）常见服务器软件</span></a></h5><blockquote><p>动态服务器</p></blockquote><ul><li>webLogic：oracle公司，大型的JavaEE服务器，支持JavaEE规范，收费的。</li><li>webSphere：IBM公司，大型的JavaEE服务器，支持JavaEE规范，收费的。</li><li>JBOSS：JBOSS公司的，大型的JavaEE服务器，支持JavaEE规范，收费的。</li><li>Tomcat：Apache基金组织，中小型的JavaEE服务器，仅仅支持少量的JavaEE规范servlet/jsp。开源的，免费的。（300左右的并发）</li></ul><blockquote><p>静态的服务器</p></blockquote><ul><li>Nginx：（代理，反向代理等）极高的并发 Nginx处理静态文件、索引文件，自动索引的效率非常高。当然除了当做高性能的静态服务器，它还有很多强大的功能，我们后边会有专项课程学习。</li></ul><h3 id="二、hello-world" tabindex="-1"><a class="header-anchor" href="#二、hello-world"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81hello-world" target="_blank" rel="noopener noreferrer">#</a>二、Hello World</span></a></h3><p>我们已经学习了javase、mysql以及前端知识，jdbc负责java和持久层，那前端怎么和我们的java配合使用呢？</p><p>我们回想mysql的链接，不同的客户端通过url访问mysql，是通过套接字进行链接的：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210922095427403.e201c144.png" alt="image-20210922095427403"></p><p>与此同时，我们的浏览器也是使用url访问网站的啊，我们不妨尝试一下，建立一个服务器监听在8888端口，</p><p>很明显，我们启动的服务是基于TCP协议的套接字:</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 启动一个服务器</span></span>
<span class="line">        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Socket</span> accept <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 获得输入流</span></span>
<span class="line">        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> accept<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span></span>
<span class="line">        accept<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们打开一个浏览器，在浏览器中输入：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210922100403917.790dc4c4.png" alt="image-20210922100403917"></p><p>我们观察一下后台的输出：</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/</span> <span class="token http-version property">HTTP/1.1</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1:8888</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">keep-alive</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Cache-Control</span><span class="token punctuation">:</span> <span class="token header-value">max-age=0</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Sec-Fetch-User</span><span class="token punctuation">:</span> <span class="token header-value">?1</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span><span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Sec-Fetch-Site</span><span class="token punctuation">:</span> <span class="token header-value">none</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Sec-Fetch-Mode</span><span class="token punctuation">:</span> <span class="token header-value">navigate</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate, br</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.9</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们发现浏览器给我们发送了一系列的消息，当然我们现在可能看不懂。这其实就是一个报文，是浏览器传递给你的一些消息：比如这个\`User-Agent\`就是告诉服务器我是从什么样的客户端来的，Host就是这个消息的目标主机。</p><p>很明显，浏览器貌似也是通过socket和我们的服务器建立了TCP连接。</p><p>我们不妨把浏览器给我们发送的信息称之为<code>请求</code>，而这种请求的格式满足了http这样一个协议，在浏览器中我们打开百度后会显示对应的页面，是因为百度的服务器收到请求后会给浏览器响应，而我们刚才写的服务器，并没有对请求做出任何的响应。</p><p>这也就意味着，我们接收到http请求后，按照http协议的规范，书写http的响应，就能让浏览器做出相应的回应。</p><p>这里有一个最简单的响应报文：</p><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">39</span></span></span>
<span class="line"><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html;charset=UTF-8</span></span></span>
<span class="line"></span>
<span class="line">&lt;h1 style=\\&quot;color:red\\&quot;&gt;hello server!&lt;h1&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个报文的意图很明显：</p><ul><li>第一行：服务器告诉浏览器，我们这个请求成功了。</li><li>第二行和第三行：是服务器告诉浏览器，我们这个响应的类型是个网页，内容长度是39字符。</li><li>最后一行是具体的网页数据。</li></ul><p>所以，我们的Java代码可以这样去写：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建一个服务器监听在8888端口</span></span>
<span class="line">        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Socket</span> server <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 按照http协议的格式封装一个报文</span></span>
<span class="line">        <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token string">&quot;HTTP/1.1 200 OK\\r\\n&quot;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;Content-Length: 39\\r\\n&quot;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;Content-Type: text/html;charset=UTF-8\\r\\n\\r\\n&quot;</span> <span class="token operator">+</span></span>
<span class="line">                <span class="token string">&quot;&lt;h1 style=\\&quot;color:red\\&quot;&gt;hello server!&lt;h1&gt;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 将报文写出给浏览器</span></span>
<span class="line">        outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 这个输出流不要着急关，因为突然的关闭会导致浏览器和服务器的连接断开</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们再来从浏览器访问我们的服务器看看：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210922104653012.a4b3ac07.png" alt="image-20210922104653012"></p><p>发现红色的hello server已经在浏览器上了。</p><h3 id="三、深入http协议" tabindex="-1"><a class="header-anchor" href="#三、深入http协议"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%89%E3%80%81%E6%B7%B1%E5%85%A5http%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener noreferrer">#</a>三、深入HTTP协议</span></a></h3><h4 id="_1、http协议简介" tabindex="-1"><a class="header-anchor" href="#_1、http协议简介"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81http%E5%8D%8F%E8%AE%AE%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener noreferrer">#</a>1、HTTP协议简介</span></a></h4><p>超文本传输协议（英文：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol，缩写：HTTP）是一种用于分布式、协作式和超媒体信息系统的<strong>应用层协议</strong>。HTTP是万维网的数据通信的基础，它和TCP/IP协议簇的其他协议一样，也是用于客户端和服务端的通信。</p><p>HTTP的发展是由蒂姆·伯纳斯-李于1989年在欧洲核子研究组织（CERN）所发起。HTTP的标准制定由万维网协会（World Wide Web Consortium，W3C）和互联网工程任务组（Internet Engineering Task Force，IETF）进行协调，最终发布了一系列的RFC，其中最著名的是1999年6月公布的 RFC 2616，定义了HTTP协议中现今广泛使用的一个版本——HTTP 1.1。</p><p>2014年12月，互联网工程任务组（IETF）的Hypertext Transfer Protocol Bis（httpbis）工作小组将HTTP/2标准提议递交至IESG进行讨论，于2015年2月17日被批准。 HTTP/2标准于2015年5月以RFC 7540正式发表，取代HTTP 1.1成为HTTP的实现标准。</p><p>注：什么是超文本</p><p>在互联网早期，我们输入的信息只能保存在本地，信息都是以文本的形式存在，但随着计算机的发展，人们不再满足与两台电脑之间的文字传输，还想要传输图片、音频、视频，甚至点击文字能实现超链接跳转，此时文本的语义就被扩大了，这种扩大后的文本就称之为超文本。</p><h4 id="_2、http协议概述" tabindex="-1"><a class="header-anchor" href="#_2、http协议概述"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81http%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener noreferrer">#</a>2、HTTP协议概述</span></a></h4><p>HTTP是一个客户端终端（用户）和服务器端（网站）<strong>请求和应答</strong>的标准协议。我们通过使用网页浏览器或者其它的工具发起HTTP请求，这个客户端为我们称之为用户代理程序（user agent），服务器上存储着一些资源，比如HTML文件和图像。我们称这个应答服务器为源服务器（origin server）。</p><p>通常，由HTTP客户端发起一个请求，此时创建一个到服务器指定端口（默认是80端口）的tcp连接。HTTP服务器则在那个端口监听客户端的请求。一旦收到请求，服务器会向客户端返回一个状态，比如&quot;HTTP/1.1 200 OK&quot;，以及返回的内容，如请求的文件、错误消息、或者其它信息。</p><h4 id="_3、http工作原理" tabindex="-1"><a class="header-anchor" href="#_3、http工作原理"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81http%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86" target="_blank" rel="noopener noreferrer">#</a>3、HTTP工作原理</span></a></h4><p>以下是 HTTP 请求/响应的步骤：</p><ol><li>客户端连接到Web服务器。</li></ol><p>浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址，一个HTTP客户端，通常是浏览器，与 Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。</p><ol><li><p>发送HTTP请求。</p><p>通过【TCP套接字】，客户端向Web服务器发送一个文本的请求报文，一个请求报文由【请求行、请求头部、空行和请求数据】4部分组成。</p></li><li><p>服务器接受请求并返回HTTP响应</p><p>Web服务器【解析请求，定位请求资源】，然后将资源的复本写到TCP套接字，由客户端读取。一个响应由【状态行、响应头部、空行和响应数据】4部分组成。</p></li><li><p>服务器释放连接TCP连接。</p><p>若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接。</p><p>若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求。无论如何都会释放。</p></li><li><p>客户端浏览器解析HTML内容</p><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p></li></ol><p>从以上的内容我们大致可以总结出以下几点：</p><p>1、Http是基于请求和响应的。</p><p>2、需要依托TCP协议进行三次握手连接、传输数据。</p><p>3、 TCP的连接会被主动断开，并不是一直保持连接。</p><h4 id="_4、http报文格式" tabindex="-1"><a class="header-anchor" href="#_4、http报文格式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81http%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>4、HTTP报文格式</span></a></h4><p>一个完整的HTTP协议的报文主要由以下三个部分组成：</p><ol><li>起始行（请求行、响应行）：起始行 start line : 描述请求或响应的基本信息。</li><li>首部字段（请求头、响应头）：使用key-value的形式更加详细的说明报文。</li><li>消息正文（请求体、响应体）：实际的传输数据，不一定是文本，也有可能是图片、音频、视频等二进制数据。</li></ol><p>一个请求报文的格式如下：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210922135409188.f00c2289.png" alt="image-20210922135409188"></p><p>一个响应的报文格式如下：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926112949153.5d39d36e.png" alt="image-20210926112949153"></p><p>接下来我们一点一点拨开http的面纱。</p><h5 id="_1-http请求方法" tabindex="-1"><a class="header-anchor" href="#_1-http请求方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-http%E8%AF%B7%E6%B1%82%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>（1）HTTP请求方法</span></a></h5><p>HTTP/1.1协议中共定义了八种方法（也叫“动作”）来以不同方式操作指定的资源，我们目前最常见的有两种一种get，另外一种叫post。</p><p>请求的目的就是获取或操作资源，互联网的任何数据，我们都能称之为资源，数据库内的一条数据，一个网页，一个视频都是资源。请求的方法决定了我们怎么去操作这个资源。</p><blockquote><p>GET</p></blockquote><p>向指定的资源发出“显示”请求。使用GET方法应该只用在读取数据，而不应当被用于产生“副作用”的操作中，常用语查询数据的请求。</p><blockquote><p>POST</p></blockquote><p>向指定资源提交数据，请求服务器进行处理（例如提交表单或者上传文件）。数据被包含在请求本文中。这个请求可能会创建新的资源或修改现有资源，或二者皆有。常用于对数据的增删改操作。</p><blockquote><p>请求方式: get与post请求（通过form表单我们自己写写看）</p></blockquote><ul><li>GET提交的数据会放在URL之后，也就是请求行里面，以?分割URL和传输数据，参数之间以&amp;相连，如EditBook?name=test1&amp;id=123456.（请求头里面那个content-type做的这种参数形式，后面讲） POST方法是把提交的数据放在HTTP包的请求体中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li><li>GET与POST请求在服务端获取请求数据方式不同，就是我们自己在服务端取请求数据的时候的方式不同了，这句废话昂。</li></ul><h5 id="_2-uri" tabindex="-1"><a class="header-anchor" href="#_2-uri"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-uri" target="_blank" rel="noopener noreferrer">#</a>（2）URI</span></a></h5><p>URI叫统一资源标识符 Uniform Resource Identifier，这是一个比较广的概念。</p><p>目前，我们有几种方式来表示本机或者网络的一个资源：</p><ol><li>通过【定位】的方式来标识资源，这种方式叫【统一资源定位符】，也就是我们说的【URL】（Uniform Resource Locator）。这种方式下我们可以这样表示一个资源，【http://www.aaa.com/image/girl.png】。很明显URL和位置密切相关，一旦目标主机挂了，或者目标资源更换了位置，URL就失效了。</li><li>通过【命名】的方式来标识资源，这种方式叫【统一资源命名符】，也就是我们说的【URN】（Uniform Resource Name）。这种方式下每一个资源都有一个独立的资源名称，比如【DFAS12B12G3HJK1GHJ3G1HJG23G】，根据这个名字我们就能找到对应的资源，但是这种方式下，我们需要有一个解析器负责根据名字找到对应的资源位置，好处是不管资源怎么变动，我们都可以根据资源名字获取资源。</li></ol><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210924170901449.c68153c6.png" alt="image-20210924170901449"></p><p>但是事实上，理论上URN对我们更友好，但是互联网的资源这么多，专门为这么多资源搭建一个资源解析服务器也不太靠谱，所以我们见到的URI主要是以URL为主，可以说URL 约等于 URI。</p><p>我们不妨再回顾一下之前学过的URL格式：</p><p>超文本传输协议（HTTP）的统一资源定位符将从因特网获取信息的五个基本元素包括在一个简单的地址中：</p><ul><li>协议：一般为http或https。</li><li>URI：直接定位到对应的资源。</li><li>主机：通常为域名，有时为IP地址。</li><li>端口号：以数字方式表示，若为HTTP的默认值“:80”可省略，数字为0~65536。</li><li>uri：以“/”字符区别路径中的每一个目录名称，根路径为‘/’。</li><li>查询：GET模式的窗体参数，以“?”字符为起点，每个参数以“&amp;”隔开，再以“=”分开参数名称与数据，通常以UTF8的URL编码，避开字符冲突的问题。</li></ul><div class="language-http line-numbers-mode" data-highlighter="prismjs" data-ext="http" data-title="http"><pre><code><span class="line">以http://www.ydlclass.com:80/news/index.html?id=250&amp;age=1 为例, 其中：</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>【http】是协议；【www.xinzhi.com】是服务器； 【80】，是服务器上的默认网络端口号，默认不显示； 【/news/index.html】，是路径（URI：直接定位到对应的资源）； 【?id=250&amp;page=1】，是查询条件。 大多数网页浏览器不要求用户输入网页中“[http://”的部分，因为绝大多数网页内容是超文本传输协议文件。 “80”是超文本传输协议文件的常用默认端口号，因此一般也不必写明。一般来说用户只要键入统一资源定位符的一部分</p><h5 id="_3-响应码" tabindex="-1"><a class="header-anchor" href="#_3-响应码"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-%E5%93%8D%E5%BA%94%E7%A0%81" target="_blank" rel="noopener noreferrer">#</a>（3）响应码</span></a></h5><ul><li>1xx消息——请求已被服务器接收，继续处理</li><li>2xx成功——请求已成功被服务器接收、理解、并接受</li><li>3xx重定向——需要后续操作才能完成这一请求</li><li>4xx请求错误——请求含有词法错误或者无法被执行，客户端</li><li>5xx服务器错误——服务器在处理某个正确请求时发生错误，500</li></ul><p>一些常见的响应码</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>200</td><td>OK</td><td>从客户端发送的请求，服务端已经正常处理了。</td></tr><tr><td>204</td><td>No Content</td><td>服务端已经正常处理了,但是响应中没有实体，也不允许有实体。</td></tr><tr><td>301</td><td>Moved Permanently</td><td>永久性，重定向。表示请求的资源已经拥有了新的uri，需要重新访问。</td></tr><tr><td>302</td><td>Moved Temporarily</td><td>临时重定向。</td></tr><tr><td>400</td><td>Bad Request</td><td>请求报文中存在语法错去。</td></tr><tr><td>401</td><td>Unauthorized</td><td>请求需要有通过HTTP请求的认证信息。</td></tr><tr><td>403</td><td>Forbidden</td><td>请求被阻止，可能因为某些权限问题，比如访问的文件没有权限等。</td></tr><tr><td>404</td><td>Not Found</td><td>表示在服务器上没有你要找的资源</td></tr><tr><td>500</td><td>Internal server Error</td><td>服务器执行程序出现异常</td></tr></tbody></table><p>我们用一个简单的例子感受一下重定向：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server302</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建一个服务器监听在8888端口</span></span>
<span class="line">        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Socket</span> server <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 按照http协议的格式封装一个可以重定向的报文</span></span>
<span class="line">            <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token string">&quot;HTTP/1.1 302 Moved Temporarily\\r\\n&quot;</span> <span class="token operator">+</span></span>
<span class="line">                    <span class="token string">&quot;Location: https://www.baidu.com\\r\\n\\r\\n&quot;</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 将报文写出给浏览器</span></span>
<span class="line">            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            outputStream<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 这个输出流不要着急关，因为突然的关闭会导致浏览器和服务器的连接断开</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们访问 127.0.0.1:8888 时，发现网页居然打开了百度，就相当于自动给我们在浏览器输入http://www.baidu.com，并按下了回车。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926121342072.a1bc4abd.png" alt="image-20210926121342072"></p><h5 id="_3-http首部字段" tabindex="-1"><a class="header-anchor" href="#_3-http首部字段"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-http%E9%A6%96%E9%83%A8%E5%AD%97%E6%AE%B5" target="_blank" rel="noopener noreferrer">#</a>（3）http首部字段</span></a></h5><p>http首部字段是构成http报文的重要元素，它能起到传递额外重要信息的作用，首部信息一般会提供报文类型、编码和大小、认证信息，缓存策略等信息。</p><p>**不用记、不用记。**如果需要记忆和深入目前只有一个Content-Type</p><p>HTTP/1.1 规范定义了如下 47 种首部字段，分为四大类，我们大致预览一下，不能一一讲解，详情可以通过看书深入理解</p><p>1、通用首部字段 9个</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Cache-Control</td><td>控制缓存的行为</td></tr><tr><td>Connection</td><td>连接的管理</td></tr><tr><td>Date</td><td>创建报文的日期时间</td></tr><tr><td>Pragma</td><td>报文指令</td></tr><tr><td>Trailer</td><td>报文末端的首部一览</td></tr><tr><td>Transfer-Encoding</td><td>指定报文主体的传输编码方式</td></tr><tr><td>Upgrade</td><td>升级为其他协议</td></tr><tr><td>Via</td><td>代理服务器的相关信息</td></tr><tr><td>Warning</td><td>错误通知</td></tr></tbody></table><p>2、请求首部字段 共18个</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept</td><td>用户代理可处理的媒体类型</td></tr><tr><td>Accept-Charset</td><td>优先的字符集</td></tr><tr><td>Accept-Encoding</td><td>优先的内容编码</td></tr><tr><td>Accept-Language</td><td>优先的语言（自然语言）</td></tr><tr><td>AuthorizationWeb</td><td>认证信息</td></tr><tr><td>Expect</td><td>期待服务器的特定行为</td></tr><tr><td>From</td><td>用户的电子邮箱地址</td></tr><tr><td>Host</td><td>请求资源所在服务器</td></tr><tr><td>If-Match</td><td>比较实体标记（ETag）</td></tr><tr><td>If-Modified-Since</td><td>比较资源的更新时间</td></tr><tr><td>If-None-Match</td><td>比较实体标记（与 If-Match 相反）</td></tr><tr><td>If-Range</td><td>资源未更新时发送实体 Byte 的范围请求</td></tr><tr><td>If-Unmodified-Since</td><td>比较资源的更新时间（与If-Modified-Since相反）</td></tr><tr><td>Max-Forwards</td><td>最大传输逐跳数</td></tr><tr><td>Proxy-Authorization</td><td>代理服务器要求客户端的认证信息</td></tr><tr><td>Range</td><td>实体的字节范围请求</td></tr><tr><td>Referer</td><td>对请求中 URI 的原始获取方</td></tr><tr><td>TE</td><td>传输编码的优先级</td></tr><tr><td>User-Agent</td><td>客户端程序的信息</td></tr></tbody></table><p>3、响应首部字段 共9个</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Accept-Ranges</td><td>是否接受字节范围请求</td></tr><tr><td>Age</td><td>推算资源创建经过时间</td></tr><tr><td>ETag</td><td>资源的匹配信息</td></tr><tr><td>Location</td><td>令客户端重定向至指定URI</td></tr><tr><td>Proxy-Authenticate</td><td>代理服务器对客户端的认证信息</td></tr><tr><td>Retry-After</td><td>对再次发起请求的时机要求</td></tr><tr><td>Server</td><td>HTTP服务器的安装信息</td></tr><tr><td>Vary</td><td>代理服务器缓存的管理信息</td></tr><tr><td>WWW-Authenticate</td><td>服务器对客户端的认证信息</td></tr></tbody></table><p>4、实体首部字段 共10个</p><table><thead><tr><th>首部字段名</th><th>说明</th></tr></thead><tbody><tr><td>Allow</td><td>资源可支持的HTTP方法</td></tr><tr><td>Content-Encoding</td><td>实体主体适用的编码方式</td></tr><tr><td>Content-Language</td><td>实体主体的自然语言</td></tr><tr><td>Content-Length</td><td>实体主体的大小（单位：字节）</td></tr><tr><td>Content-Location</td><td>替代对应资源的URI</td></tr><tr><td>Content-MD5</td><td>实体主体的报文摘要</td></tr><tr><td>Content-Range</td><td>实体主体的位置范围</td></tr><tr><td>Content-Type</td><td>实体主体的媒体类型</td></tr><tr><td>Expires</td><td>实体主体过期的日期时间</td></tr><tr><td>Last-Modified</td><td>资源的最后修改日期时间</td></tr></tbody></table><h5 id="_4-http内容协商" tabindex="-1"><a class="header-anchor" href="#_4-http内容协商"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4-http%E5%86%85%E5%AE%B9%E5%8D%8F%E5%95%86" target="_blank" rel="noopener noreferrer">#</a>（4）http内容协商</span></a></h5><p>同一个web网页可能存在多个相同内容的网页，比如英文版和中文版，它们内容相同，语言却不同。当浏览器默认的语言不同，访问相同uri会出现不同结果，这种机制就是内容协商。</p><p>内容协商机制是指客户端和服务器就响应的资源内容进行协商交涉，然后提供给客户端最合适的资源。内容协商会以响应资源的语言、字符集、编码等方式作为判断的标准。</p><p>共有3种不同的方法可以决定服务器上哪个页面最适合客户端：<strong>让客户端来选择、服务器自动判定、让中间代理来选。这3种技术分别称为客户端驱动的协商、服务器驱动的协商以及透明协商。</strong></p><blockquote><p>客户端驱动</p></blockquote><p>客户端发起请求，服务器发送可选项列表，客户端作出选择后再发送第二次请求。</p><ul><li>优点：比较容易实现。</li><li>缺点：增加了时延，至少要发送两次请求，第一次请求获取资源列表，第二次获取选择的副本。</li></ul><blockquote><p>服务器驱动</p></blockquote><p>服务器检查客户端的请求首部集并决定提供哪个版本的页面。</p><ul><li>优点：比客户端驱动的协商要快。</li><li>缺点：首部集不匹配，服务器要做猜测。</li></ul><blockquote><p>透明协商</p></blockquote><p>某个中间设备（通常是缓存代理）代表客户端进行协商。</p><ul><li>优点：免除了web服务器的协商开销，比客户端驱动的协商要快。</li><li>缺点：HTTP并没有提供相应的规范。</li></ul><p>其中，服务器驱动的解决方案应用较为广泛。</p><blockquote><p>通用的内容协商首部集</p></blockquote><p>客户端可以用下面列出的HTTP首部集发送用户的偏好信息：</p><ul><li>Accept：告知服务器发送何种媒体类型；</li><li>Accept-Language：告知服务器发送何种语言；</li><li>Accept-Charset：告知服务器发送何种字符集；</li><li>Accept-Encoding：告知服务器采用何种编码。</li></ul><p>【媒体类型】</p><p>因特网上有数千种不同类型的数据，HTTP仔细地给每种要通过web传输的对象都打上了名为MIME类型（MIME type）的数据格式标签。最初设计MIME（Multipurpose Internet Mali Extension，多用途英特网邮件扩藏）是为了解决在不同的电子邮件系统之间搬移报文时存在的问题。MIME 在电子邮件系统中工作得非常好，因此 HTTP 也采纳了它，用它来描述并标记多媒体内容。</p><p>MIME 类型是一种文本标记，表示一种【主要的对象类型】和一个特定的【子类型】，中间由一条斜杠来分隔。</p><ul><li>HTML 格式的文本文档由【text/html】 类型来标记</li><li>普通的 ASCII 文本文档由 【text/plain】 类型来标</li><li>JPEG 版本的图片为 【image/jpeg】 类型</li><li>GIF 格式的图片为【image/gif】 类型</li><li>Apple 的 QuickTime 电影为【video/quicktime 】类型</li><li>微软的 PowerPoint 演示文件为【application/vnd.ms-powerpoint】类型</li></ul><p>当然还有很多很多.....</p><p>而我们以后见的最多的要数以下两种，这两种类型都是用来传递数据：</p><ul><li>application/json，学习了前端知识后，想必大家对json已经不再陌生了。</li><li>application/x-www-form-urlencoded，我们之前都学习过表单，urlencoded格式，又叫 <strong>form</strong> 格式，它是一种表单格式。它使用键值对的方式进行表示，键和值之间用=，多个键值对之间用&amp;</li></ul><p>比如我们想在客户端和服务之间传递信息：</p><p>可以是这样的</p><div class="language-url line-numbers-mode" data-highlighter="prismjs" data-ext="url" data-title="url"><pre><code><span class="line"><span class="token path">name=polo&amp;age=35&amp;smoke=false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>也可以是</p><div class="language-json line-numbers-mode" data-highlighter="prismjs" data-ext="json" data-title="json"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">  <span class="token property">&quot;name&quot;</span> <span class="token operator">:</span><span class="token string">&quot;polo&quot;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;age&quot;</span><span class="token operator">:</span><span class="token number">35</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token property">&quot;smoke&quot;</span><span class="token operator">:</span><span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更多的mimeType可以查看：https://www.w3school.com.cn/media/media_mimeref.asp</p><p>【注意】这些首部与实体首部非常类似。不过，这两种首部的用途截然不同。</p><p>实体首部集像运输标签，它们描述了把报文从服务器传输给客户端的过程中必须的各种报文主体属性。</p><p>而内容协商首部集是由客户端发送给服务器用于交换偏好信息的，以便服务器可以从文档的不同版本中选择出最符合客户端偏好的那个来提供服务。</p><p>服务器用下面列出的实体首部集来匹配客户端的Accept首部集：</p><table><thead><tr><th>Accept首部</th><th>实体首部</th></tr></thead><tbody><tr><td>Accept</td><td>Content-Type</td></tr><tr><td>Accept-Language</td><td>Content-Language</td></tr><tr><td>Accept-Charset</td><td>Content-Type</td></tr><tr><td>Accept-Encoding</td><td>Content-Encoding</td></tr></tbody></table><p>目前为止，关于http协议的基础知识我们讲的差不多了，更多的知识会在后期的学习中不断的深入，我们不妨先将我们的小项目完善一下吧。</p><h3 id="四、项目完善" tabindex="-1"><a class="header-anchor" href="#四、项目完善"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E5%9B%9B%E3%80%81%E9%A1%B9%E7%9B%AE%E5%AE%8C%E5%96%84" target="_blank" rel="noopener noreferrer">#</a>四、项目完善</span></a></h3><p>本次项目的目的是实现一个小程序，在浏览器中输入URL能够打开一个文件夹下的html页面。</p><p>我们不妨将请求和响应封装成两个对象，毕竟字符串的操作实在是痛苦：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 将接收的请求报文转化为请求对象</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Request</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> protocol<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 请求方式</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> type<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// uri</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> uri<span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 请求头</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 请求体</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> body<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> type<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">=</span> type<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> uri<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUri</span><span class="token punctuation">(</span><span class="token class-name">String</span> uri<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>uri <span class="token operator">=</span> uri<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> header<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeaders</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>header <span class="token operator">=</span> header<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> body<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> header<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> protocol<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProtocol</span><span class="token punctuation">(</span><span class="token class-name">String</span> protocol<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>protocol <span class="token operator">=</span> protocol<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 处理请求报文</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequestHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 将获取的请求报文封装成一个请求对象</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">requestMessage</span></span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Request</span> <span class="token function">hand</span><span class="token punctuation">(</span><span class="token class-name">String</span> requestMessage<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 通过大量的截串获取对应信息</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> headerAndBody <span class="token operator">=</span> requestMessage<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 判断有没有请求体</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>headerAndBody<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            request<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>headerAndBody<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// 将请求行和首部信息截取</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lineAndHeader <span class="token operator">=</span> headerAndBody<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> line <span class="token operator">=</span> lineAndHeader<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 使用空格截取请求行信息</span></span>
<span class="line">        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lines <span class="token operator">=</span> line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        request<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        request<span class="token punctuation">.</span><span class="token function">setUri</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        request<span class="token punctuation">.</span><span class="token function">setProtocol</span><span class="token punctuation">(</span>lines<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 遍历请求头</span></span>
<span class="line">        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lineAndHeader<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> lineAndHeader<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            request<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>split<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> request<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>响应：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 响应</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Response</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 协议</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> protocol <span class="token operator">=</span> <span class="token string">&quot;Http/1.1&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 响应码</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> code <span class="token operator">=</span> <span class="token string">&quot;200&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 信息</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 响应头</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> header <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token comment">// 响应体</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> body<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> protocol<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProtocol</span><span class="token punctuation">(</span><span class="token class-name">String</span> protocol<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>protocol <span class="token operator">=</span> protocol<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> message<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> header<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeaders</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> header<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>header <span class="token operator">=</span> header<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> header<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span><span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        header<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> body<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBody</span><span class="token punctuation">(</span><span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>body <span class="token operator">=</span> body<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> itnanls(私信联系)</span>
<span class="line"> * 处理响应的工具类</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ResponseHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义我们网站的根目录</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BASE_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;D:/www/&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 此方法用来生成一个响应的字符串</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">path</span></span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> htmlPath <span class="token operator">=</span> <span class="token constant">BASE_PATH</span> <span class="token operator">+</span> path<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span> <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>htmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 使用输入流读取文件的内容</span></span>
<span class="line">            <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> <span class="token function">build</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 将响应对象序列化成字符串报文</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot; &quot;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> response<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;: &quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;\\r\\n&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建一个IO工具类负责从流中读取数据：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IOUtils</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 读取流中的数据</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">readString</span><span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span>inputStream<span class="token punctuation">.</span><span class="token function">available</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * 每个客户端的请求使用独立的线程处理</span>
<span class="line"> * 当然你可以写成NIO的模式，只是比较复杂而已</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">UserThread</span><span class="token punctuation">(</span><span class="token class-name">Socket</span> socket<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> socket<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">             <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> requestMessage <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token class-name">RequestHandler</span><span class="token punctuation">.</span><span class="token function">hand</span><span class="token punctuation">(</span>requestMessage<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">String</span> uri <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 按照http协议的响应格式封装响应报文</span></span>
<span class="line">            <span class="token comment">// 浏览器除了发送我们的请求，还会发送/favicon.ico请求，用来获取网站图标</span></span>
<span class="line">            <span class="token comment">// 我们把它排除掉，不处理</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token string">&quot;/favicon.ico&quot;</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token comment">// 直接使用输出流输出到浏览器</span></span>
<span class="line">                <span class="token class-name">String</span> response <span class="token operator">=</span> <span class="token class-name">ResponseHandler</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span>uri<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 创建一个服务器监听在8888端口</span></span>
<span class="line">        <span class="token class-name">ServerSocket</span> serverSocket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ExecutorService</span> executorService <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Socket</span> server <span class="token operator">=</span> serverSocket<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            executorService<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserThread</span><span class="token punctuation">(</span>server<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、处理其他请求" tabindex="-1"><a class="header-anchor" href="#五、处理其他请求"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%94%E3%80%81%E5%A4%84%E7%90%86%E5%85%B6%E4%BB%96%E8%AF%B7%E6%B1%82" target="_blank" rel="noopener noreferrer">#</a>五、处理其他请求</span></a></h3><p>我们给项目做一个升级版本，做一个登录的功能，能和数据库交互。</p><p>我们在D:/www下新建一个登录的页面，如下：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/register.do<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>注册<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>   </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们首先拿个页面做注册，注册的本质就是插入一条数据，我们也是简单演示，其他额外的判断我们统统不做。</p><p>我们不妨先把数据层面的代码准备好：</p><p>首先，我们用最简单的方式搞一个获取连接的工具类，这里是为了简单的观察本质，所以我们也不用连接池，怎么简单怎么来。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCUtil</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Connection</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 1.数据库连接的4个基本要素：</span></span>
<span class="line">        <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">&quot;jdbc.properties&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token class-name">String</span> url <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;url&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> user <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> password <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//2.获取连接</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> user<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>User</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 省略其他</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注册的本质就是插入一条数据，登录的本质就是通过用户名获取用户比较密码，我们先将这两个方法准备好。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 插入一个用户</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;insert into user (username,password)values(?,?)&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            preparedStatement<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 根据用户名获取用户</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">findUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">&quot;select id,username,password from user where username = ?&quot;</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">Connection</span> connection <span class="token operator">=</span> <span class="token class-name">JDBCUtil</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">PreparedStatement</span> preparedStatement <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            preparedStatement<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">ResultSet</span> resultSet <span class="token operator">=</span> preparedStatement<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                user<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                user<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span> user<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>核心的问题来了，</p><p>当页面点击提交按钮实际上是发送一个post请求，从浏览器我们可以看得出来。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926153535717.32dfc7d2.png" alt="image-20210926153535717"></p><p>与此同时，后台也出现了问题：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926153624681.210a2524.png" alt="image-20210926153624681"></p><p>在处理注册信息的时候，还是以文件的方式去寻找了，但是我们不希望如此，</p><p>我们希望的是将来能有一个类去独立处理这个请求，那怎么办？</p><p>此时我们希望不同的请求能有不同的方式，</p><p>此时我们将响应的处理抽象成一个接口：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 这个方法专门用来处理请求和响应</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">request</span></span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">response</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span><span class="token class-name">Response</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将之前的RespsoneHandler改为HTMLRespsoneHandler，专门处理网页</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> itnanls(私信联系)</span>
<span class="line"> * 处理响应的工具类</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HTMLResponseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">HTMLResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">HTMLResponseHandler</span> htmlResponseHandler</span>
<span class="line">            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTMLResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HTMLResponseHandler</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> htmlResponseHandler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 定义我们网站的根目录</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BASE_PATH</span> <span class="token operator">=</span> <span class="token string">&quot;D:/www/&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 此方法用来生成一个响应的字符串</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">request</span></span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> htmlPath <span class="token operator">=</span> <span class="token constant">BASE_PATH</span> <span class="token operator">+</span> request<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">try</span> <span class="token punctuation">(</span> <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>htmlPath<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 使用输入流读取文件的内容</span></span>
<span class="line">            <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token class-name">IOUtils</span><span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">           </span>
<span class="line">            <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">buildMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于此同时，我们再创建一个：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> itnanls(私信联系)</span>
<span class="line"> * 处理响应的工具类</span>
<span class="line"> */</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoResponseHandler</span> <span class="token keyword">implements</span> <span class="token class-name">ResponseHandler</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">DoResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">DoResponseHandler</span> htmlResponseHandler</span>
<span class="line">            <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DoResponseHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">DoResponseHandler</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> htmlResponseHandler<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * 此方法用来生成一个响应的字符串</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">request</span></span>
<span class="line">     * <span class="token keyword">@return</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 我要根据不同的uri得到不同的处理结果</span></span>
<span class="line">        <span class="token comment">// 我们需要一个统一的出来请求响应的工具，不妨起个名字叫servlet</span></span>
<span class="line">        <span class="token class-name">Servlet</span> servlet <span class="token operator">=</span> <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token constant">ENV</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getUri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Response</span> response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">buildMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>于是我们可以根据不同的请求处理不同的响应了：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RegisterServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> password <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        userDao<span class="token punctuation">.</span><span class="token function">insertUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/plain;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来就是登录了：</p><p>我们写一个登录的servlet来处理这个uri</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">UserDao</span> userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> username <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">User</span> user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">findUserByUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 1、没有查询到用户</span></span>
<span class="line">        <span class="token comment">// 2、查询到用户，但是密码不对</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> user<span class="token punctuation">.</span><span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;登陆失败&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;登陆成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>并且注册进去</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ENV.put(&quot;/login.do&quot;,new LoginServlet());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>登录是成功了，但是登录没有状态，哪里能说明这个客户端登录成功了呢？</p><h3 id="六、状态的保存" tabindex="-1"><a class="header-anchor" href="#六、状态的保存"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E5%85%AD%E3%80%81%E7%8A%B6%E6%80%81%E7%9A%84%E4%BF%9D%E5%AD%98" target="_blank" rel="noopener noreferrer">#</a>六、状态的保存</span></a></h3><p>http本身是不保存状态的，啥意思？就是客户端到服务器的连接不是长时间保持的，一个连接断开后，下一个请求会建立新的tcp连接，服务器不会知道我们之前连接过，说的简单一点就是，你登录了但是服务器不知道。</p><p>所以推出了session和cookie机制</p><p>cookie是记录在浏览器端的一个字符串，是一段不超过4KB的小型文本数据，由一个名称（Name）、一个值（Value）和其它几个用于控制Cookie有效期、安全性、使用范围的可选属性组成，</p><p>session是保存在服务器端的一个对象，比如map。它们俩互相配合让服务器有了能识别客户端一些状态的能力，意思就是服务就能知道这个客户端有没有登录等。cookie就相当于通行证，session就是门房，进去时需要从门房识别一个身份。</p><blockquote><p>创建过程：</p></blockquote><ol><li>当浏览器第一次向客户端发送请求时，服务器会为它创建一个session，同时相应会加一个头（Set-Cookie: jsessionid=ewrwerwer123）</li><li>浏览器察觉到这个响应头之后会将信息保存在cookie当中，以后访问这个网站的时候就会一直带着这个cookie。</li><li>当下一个请求发起时，会带着这个cookie的信息，服务器通过查询id找的session，通过session内保存的信息，就能获得这个客户端的状态。</li></ol><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926164444025.146dbf13.png" alt="image-20210926164444025"></p><p>那我们继续改造：</p><p>我们先看看请求中有没有cookie</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926164635753.abeef933.png" alt="image-20210926164635753"></p><p>我们尝试给它加个cookie</p><p>目前代码多了，我们就在打开html的地方处理一下</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">response.addHeader(&quot;set-Cookie&quot;, &quot;jsessionid=&quot;+UUID.randomUUID());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>重新观察</p><p>一次访问没有：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926165159087.611d8ac1.png" alt="image-20210926165159087"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926165215513.7fe8e3eb.png" alt="image-20210926165215513"></p><p>二次访问已经有了：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210926165249712.7ba6ea1b.png" alt="image-20210926165249712"></p><p>当然我们只是想在没有Cookie的创建：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>cookie <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>cookie<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;jsessionid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;set-Cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jsessionid=&quot;</span><span class="token operator">+</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理请求和响应事实上是一个很麻烦的工作，我们确实需要一个工具帮我们方便的处理请求和响应。</p><p>这样有了id，我们还需要给每个客户端分配一个柜子：</p><p>先搞一个大柜子，每个session我们就用map处理，不就是存一点数据嘛！</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">public static final ConcurrentHashMap&lt;String, Map&lt;String,Object&gt;&gt; SESSIONS</span>
<span class="line">            = new ConcurrentHashMap&lt;&gt;(8);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>为每一个客户端分配一点点空间</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>cookie <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token operator">!</span>cookie<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">&quot;jsessionid&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> sessionId <span class="token operator">=</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;set-Cookie&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;jsessionid=&quot;</span><span class="token operator">+</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token constant">SESSIONS</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> id <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> session <span class="token operator">=</span> <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token constant">SESSIONS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>session <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token constant">SESSIONS</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>登录之后我们就能搞点事情了：</p><p>在登录servlet中添加：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> cookie <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>cookie <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">String</span> sessionId <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> session <span class="token operator">=</span> <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token constant">SESSIONS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    session<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>不妨我们再添加一个首页：</p><p>如果登录了就显示首页欢迎您：xxx，没有登录就显示首页两个字。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">Request</span> request<span class="token punctuation">,</span> <span class="token class-name">Response</span> response<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> cookie <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Cookie&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cookie <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> sessionId <span class="token operator">=</span> cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;=&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> session <span class="token operator">=</span> <span class="token class-name">Container</span><span class="token punctuation">.</span><span class="token constant">SESSIONS</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>  session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Object</span> user <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">User</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> user<span class="token punctuation">;</span></span>
<span class="line">                response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;首页，欢迎您：&quot;</span> <span class="token operator">+</span> u<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;首页&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;text/html;charset=UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">addHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Length&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">ENV.put(&quot;/index.do&quot;,new IndexServlet());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们的项目目前先到此为止，从这个项目中，我们体会了很多。</p><p>配置文件</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>data-source</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>url<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>jdbc:mysql://127.0.0.1:3306/ydlclass?characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>username<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>driverName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>com.mysql.cj.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>data-source</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    </span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlets</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>/user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.controller.UserServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>/login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.controller.LoginServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>/register<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.controller.RegisterServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">&gt;</span></span>/index<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.controller.IndexServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlets</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第二章-jakartaee历史" tabindex="-1"><a class="header-anchor" href="#第二章-jakartaee历史"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E4%BA%8C%E7%AB%A0-jakartaee%E5%8E%86%E5%8F%B2" target="_blank" rel="noopener noreferrer">#</a>第二章 JAKARTAEE历史</span></a></h2><h3 id="一、历史渊源" tabindex="-1"><a class="header-anchor" href="#一、历史渊源"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81%E5%8E%86%E5%8F%B2%E6%B8%8A%E6%BA%90" target="_blank" rel="noopener noreferrer">#</a>一、历史渊源</span></a></h3><h4 id="_1、javaee" tabindex="-1"><a class="header-anchor" href="#_1、javaee"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81javaee" target="_blank" rel="noopener noreferrer">#</a>1、JavaEE</span></a></h4><p>我们学习Java都知道Java是一门语言，它可以分为以下几个版本：</p><ul><li>JavaSE是指Java Standard Edition，Java标准版，就是一般Java程序的开发就可以(如桌面程序)，可以看作是JavaEE的子集。</li><li>JavaEE是指Java Enterprise Edition，Java企业版，多用于企业级开发，包括web开发等等。也叫J2EE。</li><li>JavaME是指Java Platform，Micro Edition。Java ME 为在移动设备和嵌入式设备（比如手机、PDA、电视机顶盒和打印机）上运行的应用程序提供一个健壮且灵活的环境。</li></ul><p>其实，怎么理解这个事情呢，用一个最简单的例子。</p><p>windows有基础的家庭版，是不是也有旗舰版，很明显旗舰版的功能要比家庭版强大，当然也更贵，你用盗版当我没说。当然它还有移动端的版本。</p><p>其实就是这个道理，windows就好比Java语言，家庭版就好比Javase，旗舰版就好比Javaee，移动版就好比Javame。</p><p>起初，SUN公司希望靠Javaee收版权费，但是受到Spring这些开源社区挑战之后，SUN公司又把它调整为一个半开源的版本，SUN公司找了一些联盟公司给它贡献组件，这个时期，SUN公司对外宣传Java EE是一套标准协议，他和他的联盟公司在这套协议下给大家贡献各种企业级框架。</p><p>这就好比，有很多人在家庭版上开发了很多免费的程序，我们只要装上，功能比旗舰版还要强大。</p><p>我们目前的理解就是Javaee是一个标准，定义了很多企业级开发的标准，说的简单一点就是，我写一些接口，大家可以按照我的规定写代码，这样我们的代码就能统一，扩展性就更好，但是标准是标准，做不做也是另一回事，我们不妨看几个Javeee的标准：</p><blockquote><p>我们在这里列举几个常见的Javaee规范</p></blockquote><ol><li>JDBC（Java data base connectivity）：JDBC对程序员来讲是API，对实现与数据库连接的服务提供商而言是接口模型。</li><li>Servlet：Servlet是小服务程序的意思，JavaServlet就是一种小型的Java程序，一个servlet就是Java编程语言中的一个类。servlet和用户的通信采用请求/响应模式，用于动态响应客户机请求形式扩展了web服务器的功能，servlet全部由Java写成并且生成html。servlet和jsp结合使用，能提供更为强大的服务器功能。</li><li>JSP（Java Service Pages）：JSP是一种服务器端的编程技术，创建动态的，与平台无关构建基于Web的应用程序，是为了提供一种声明性的、以表示为中心的开发Servlet方法而设计的。它也是可移植的独立于平台或应用程序的方法来提供动态内容的有效方式，提供了方法来为web客户生成动态内容。提供了开发基于Servlet的动态内容的简单方法，并带有分离内容和显示逻辑的优点。</li><li>XML（Extensible Markup Language）：可扩展标记语言，标准通用标记语言的子集。Java提供了极好的技术支持和丰富的库来解析，修改或查询XML文档。</li><li>JNDI（Java naming and directoryinterface Java命名和目录接口）：包含大量的命名和目录服务，使用通用接口来访问不同种类的服务。</li><li>EJB（ Enterprise JavaBean）：EJB是JavaEE的一部分，定义了一个用于开发基于组件的企业多重应用程序的标准。</li><li>RMI （Remote method invoke ）：RMI调用远程对象上的方法，使用了序列化方式在客户端和服务端传递数据。</li><li>JavaMail：提供了一组抽象类定义构成一个邮件系统的对象，这些抽象类和接口支持消息存储、格式和传输的许多不同的实现，它是阅读，撰写和发送电子信息的可选包。</li><li>JMS（ Java Message Service）：JMS是Java消息服务应用程序接口，是一个Java平台中关于面向消息中间件的API，用于在两个应用程序之间，或分布式系统中发布消息，进行异步通信。</li></ol><h4 id="_2、jakarta-ee" tabindex="-1"><a class="header-anchor" href="#_2、jakarta-ee"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81jakarta-ee" target="_blank" rel="noopener noreferrer">#</a>2、JAKARTA EE</span></a></h4><p>大名鼎鼎的Apache是Java开源组织的殿堂，现如今包含了350多个开源项目。当时Apache组织里面有很多C语言开发的项目，Java还是一门小众语言。为了发展Java Web项目，一群有志之士聚集在一起，启动了Jakarta项目。</p><p>后来，Java变得非常的火爆，以至于Jakarta项目囊括了众多基于Java语言的开源软件。最后，不得不把个别项目从Jakarta中独立出来，成为Apache软件基金会的顶级项目，例如：Struts，HttpClient，Tomcat，Ant，Maven，JMeter，Velocity，JMeter，Commons等。一直到2011年12月，在所有子项目都被迁移为独立项目后，Jakarta名称就不再使用了。</p><p>2017 年 8 月，Oracle（甲骨文）决定将 Java EE（Java Enterprise Edition）移交给开源组织，但是附加条件是：不允许开源组织用 Java 的名号。最终，Eclipse基金会接手了Java EE。但是，在给项目命名的时候，Eclipse基金会一筹莫展。为了起出合适的名字，Eclipse决定开始民意投票，并给出了 &quot;Jakarta EE&quot; 和 &quot;Enterprise Profile&quot; 两个备选名字。最后，Jakarta 以 64.4% 的票数获胜。从此之后，Java EE 正式更名为 Jakarta EE（雅加达）。从这个民意归属来看，再次证明了，Jakarta 的影响是及其深远的。</p><p>我们打开官网：https://jakarta.ee/zh/about/，他是这么形容JAKARTA EE的：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210927115207992.079e1571.png" alt="image-20210927115207992"></p><p>其实，Java EE在中国从来没有大规模的流行过，Java EE在Web的代表核心就是EJB，现在根本没人用这个了。但是在Javaee中流行起来的几个标准流行至今，需要我们重点学习一下。</p><p>更多的标准我们可以看这里：https://jakarta.ee/specifications/</p><h3 id="二、tomcat" tabindex="-1"><a class="header-anchor" href="#二、tomcat"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81tomcat" target="_blank" rel="noopener noreferrer">#</a>二、Tomcat</span></a></h3><h4 id="_1、简介" tabindex="-1"><a class="header-anchor" href="#_1、简介"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E7%AE%80%E4%BB%8B" target="_blank" rel="noopener noreferrer">#</a>1、简介</span></a></h4><p>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，由Apache、Sun 和其他一些公司及个人共同开发而成。由于有了Sun 的参与和支持，最新的【Servlet 和JSP 规范】总是能在Tomcat 中得到体现。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。</p><p>Tomcat最初是由Sun的<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84%E5%B8%88/3476994" target="_blank" rel="noopener noreferrer">软件架构师open in new window</a>詹姆斯·邓肯·戴维森开发的。后来他帮助将其变为开源项目，并由Sun贡献给<a href="https://baike.baidu.com/item/Apache%E8%BD%AF%E4%BB%B6%E5%9F%BA%E9%87%91%E4%BC%9A/2912769" target="_blank" rel="noopener noreferrer">Apache软件基金会open in new window</a>。由于大部分开源项目O&#39;Reilly都会出一本相关的书，并且将其封面设计成某个动物的素描，因此他希望将此项目以一个动物的名字命名。因为他希望这种动物能够自己照顾自己，最终，他将其命名为Tomcat（英语公猫或其他雄性猫科动物）。而O&#39;Reilly出版的介绍Tomcat的书籍（ISBN 0-596-00318-8）[1]的封面也被设计成了一个公猫的形象。而Tomcat的Logo兼吉祥物也被设计为一只公猫。</p><p>对于tomcat的版本和servlet和jsp标准，以及jdk的支持如下：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210927121652711.3c5e3df9.png" alt="image-20210927121652711"></p><p>所以我们要注意的是，引入的包一定要匹配</p><h4 id="_2、tomcat-安装" tabindex="-1"><a class="header-anchor" href="#_2、tomcat-安装"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81tomcat-%E5%AE%89%E8%A3%85" target="_blank" rel="noopener noreferrer">#</a>2、Tomcat 安装</span></a></h4><blockquote><p>下载</p></blockquote><p>我们这里下载一个10.0版本，我们依然可以使用java8。</p><p>https://tomcat.apache.org/download-10.cgi</p><blockquote><p>安装</p></blockquote><p>将下载的 .zip 压缩包 ， 解压到系统的目录（建议是没有中文不带空格的目录）下即可。</p><h4 id="_3、tomcat-目录结构" tabindex="-1"><a class="header-anchor" href="#_3、tomcat-目录结构"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81tomcat-%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84" target="_blank" rel="noopener noreferrer">#</a>3、Tomcat 目录结构</span></a></h4><p>Tomcat 的主要目录文件如下 ：</p><table><thead><tr><th><strong>目录</strong></th><th><strong>目录下文件</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>bin</strong></td><td>/</td><td>存放Tomcat的启动、停止等批处理脚本文件</td></tr><tr><td></td><td>startup.bat , startup.sh</td><td>用于在windows和linux下的启动脚本</td></tr><tr><td></td><td>shutdown.bat , shutdown.sh</td><td>用于在windows和linux下的停止脚本</td></tr><tr><td><strong>conf</strong></td><td>/</td><td>用于存放Tomcat的相关配置文件</td></tr><tr><td></td><td>Catalina</td><td>用于存储针对每个虚拟机的Context配置</td></tr><tr><td></td><td>context.xml</td><td>用于定义所有web应用均需加载的Context配置，如果web应用指定了自己的context.xml ，该文件将被覆盖</td></tr><tr><td></td><td>catalina.properties</td><td>Tomcat 的环境变量配置</td></tr><tr><td></td><td>catalina.policy</td><td>Tomcat 运行的安全策略配置</td></tr><tr><td></td><td>logging.properties</td><td>Tomcat 的日志配置文件， 可以通过该文件修改Tomcat 的日志级别及日志路径等</td></tr><tr><td></td><td>server.xml</td><td>Tomcat 服务器的核心配置文件</td></tr><tr><td></td><td>tomcat-users.xml</td><td>定义Tomcat默认的用户及角色映射信息配置</td></tr><tr><td></td><td>web.xml</td><td>Tomcat 中所有应用默认的部署描述文件， 主要定义了基础Servlet和MIME映射。</td></tr><tr><td><strong>lib</strong></td><td>/</td><td>Tomcat 服务器的依赖包</td></tr><tr><td><strong>logs</strong></td><td>/</td><td>Tomcat 默认的日志存放目录</td></tr><tr><td><strong>webapps</strong></td><td>/</td><td>Tomcat 默认的Web应用部署目录</td></tr><tr><td><strong>work</strong></td><td>/</td><td>Web 应用JSP代码生成和编译的临时目录</td></tr></tbody></table><h4 id="_4、tomcat-启动停止" tabindex="-1"><a class="header-anchor" href="#_4、tomcat-启动停止"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81tomcat-%E5%90%AF%E5%8A%A8%E5%81%9C%E6%AD%A2" target="_blank" rel="noopener noreferrer">#</a>4、Tomcat 启动停止</span></a></h4><p>启动</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">双击 bin/startup.bat 文件 ；</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>停止</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">双击 bin/shutdown.bat 文件 ；</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>访问</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">http://localhost:8080 </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果你能顺利打开这个页面就ok了：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210927151213751.5c0fb58b.png" alt="image-20210927151213751"></p><h2 id="第三章-web开发进阶" tabindex="-1"><a class="header-anchor" href="#第三章-web开发进阶"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E4%B8%89%E7%AB%A0-web%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6" target="_blank" rel="noopener noreferrer">#</a>第三章 Web开发进阶</span></a></h2><h3 id="一、tomcat-架构" tabindex="-1"><a class="header-anchor" href="#一、tomcat-架构"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81tomcat-%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener noreferrer">#</a>一、Tomcat 架构</span></a></h3><h4 id="_1、http服务器请求处理" tabindex="-1"><a class="header-anchor" href="#_1、http服务器请求处理"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81http%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86" target="_blank" rel="noopener noreferrer">#</a>1、Http服务器请求处理</span></a></h4><p>浏览器发给服务端的是一个HTTP格式的请求，HTTP服务器收到这个请求后，需要调用服务端程序来处理，所谓的服务端程序就是你写的Java类，一般来说不同的请求需要由不同的Java类来处理。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1560697061415.129ae086.png" alt="1560697061415"></p><p>HTTP服务器不直接调用业务类，而是把请求交给容器来处理，容器通过Servlet接口调用业务类。因此Servlet接口和Servlet容器的出现，达到了HTTP服务器与业务类解耦的目的。而Servlet接口和Servlet容器这一整套规范叫作Servlet规范。Tomcat按照Servlet规范的要求实现了Servlet容器，同时它们也具有HTTP服务器的功能。作为Java程序员，如果我们要实现新的业务功能，只需要实现一个Servlet，并把它注册到Tomcat（Servlet容器）中，剩下的事情就由Tomcat帮我们处理了。</p><h4 id="_2、servlet容器工作流程" tabindex="-1"><a class="header-anchor" href="#_2、servlet容器工作流程"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81servlet%E5%AE%B9%E5%99%A8%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B" target="_blank" rel="noopener noreferrer">#</a>2、Servlet容器工作流程</span></a></h4><p>为了解耦，HTTP服务器不直接调用Servlet，而是把请求交给Servlet容器来处理，那Servlet容器又是怎么工作的呢？</p><p>当客户请求某个资源时，HTTP服务器会用一个ServletRequest对象把客户的请求信息封装起来，然后调用Servlet容器的service方法，Servlet容器拿到请求后，根据请求的URL和Servlet的映射关系，找到相应的Servlet，如果Servlet还没有被加载，就用反射机制创建这个Servlet，并调用Servlet的init方法来完成初始化，接着调用Servlet的service方法来处理请求，把ServletResponse对象返回给HTTP服务器，HTTP服务器会把响应发送给客户端。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/1560833167711.51b62759.png" alt="1560833167711"></p><h3 id="二、tomcat架构和执行流程" tabindex="-1"><a class="header-anchor" href="#二、tomcat架构和执行流程"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81tomcat%E6%9E%B6%E6%9E%84%E5%92%8C%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B" target="_blank" rel="noopener noreferrer">#</a>二、Tomcat架构和执行流程</span></a></h3><h4 id="_1、首先介绍几个概念" tabindex="-1"><a class="header-anchor" href="#_1、首先介绍几个概念"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E9%A6%96%E5%85%88%E4%BB%8B%E7%BB%8D%E5%87%A0%E4%B8%AA%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener noreferrer">#</a>1、首先介绍几个概念</span></a></h4><p>Server：服务器，启动一个tomcat就是启动了一个服务器，一个Server可以有多个Service，一个Service可以有多个Connectior和Engine</p><p>Service：服务，一个server可以包含多个service 一个service维护多个Connector和一个Engine</p><p>Engine：叫引擎，也有资料叫Container，一个服务可以开一个引擎，就是一个公司可以有很多个门，不同身份的人从不同的门进，但是具体干活的就一个部门。引擎负责处理请求，不需要考虑请求链接，协议等。</p><p>Context：一个Context管理一个应用，其实就是我们写的程序。</p><p>Wrapper：每个都封装着一个Servlet（当然只局限于普通的Http请求）。</p><p>dns www.ydl.com ---&gt; 127.0.0.1,www.ydl2.com---&gt;127.0.0.1</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928105304421.7276e993.png" alt="image-20210928105304421"></p><h4 id="_2、tomcat运行流程" tabindex="-1"><a class="header-anchor" href="#_2、tomcat运行流程"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81tomcat%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B" target="_blank" rel="noopener noreferrer">#</a>2、Tomcat运行流程</span></a></h4><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928105441375.25b6e9d4.png" alt="image-20210928105441375"></p><p>客户发送一个请求：http://localhost:8080/test/index.html。请求被发送到本机端口8080后，执行流程如下：</p><ol><li>被在那里侦听的Coyote HTTP/1.1 Connector获得,然后引擎负责处理请求，不需要考虑请求链接，协议等。</li><li>Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的回应。</li><li>Engine获得请求localhost:8080/test/index.jsp，匹配它所有虚拟主机Host。</li><li>Engine匹配到名为localhost的Host(即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机)。</li><li>localhost Host获得请求/test/index.jsp，匹配它所拥有的所有Context。</li><li>Host匹配到路径为/test的Context(如果匹配不到就把该请求交给路径名为&quot;&quot;的Context去处理)。</li><li>path=&quot;/test&quot;的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet。</li><li>Context匹配到URL PATTERN为*.jsp的servlet，对应于JspServlet类，构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用JspServlet的doGet或doPost方法。</li><li>Context把执行完了之后的HttpServletResponse对象返回给Host。</li><li>Host把HttpServletResponse对象返回给Engine。</li><li>Engine把HttpServletResponse对象返回给Connector。</li><li>Connector把HttpServletResponse对象返回给客户browser。</li></ol><p>我们在使用tomcat的时候可以不理会中间的实现的任何过程，专心于我们的业务代码的编写，不停的写servlet就行了，极大的提升了写代码的效率。</p><h4 id="_3、tomcat-服务器配置" tabindex="-1"><a class="header-anchor" href="#_3、tomcat-服务器配置"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81tomcat-%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>3、Tomcat 服务器配置</span></a></h4><p>Tomcat 服务器的配置主要集中于 tomcat/conf 下的 catalina.policy、catalina.properties、context.xml、server.xml、tomcat-users.xml、web.xml 文件。</p><h5 id="_1-server-xml" tabindex="-1"><a class="header-anchor" href="#_1-server-xml"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-server-xml" target="_blank" rel="noopener noreferrer">#</a>（1）server.xml</span></a></h5><p>server.xml 是tomcat 服务器的核心配置文件，包含了Tomcat的 Servlet 容器（Catalina）的所有配置。由于配置的属性特别多，我们在这里主要讲解其中的一部分重要配置。</p><p>【Server】是server.xml的根元素，用于创建一个Server实例，默认使用的实现类是 org.apache.catalina.core.StandardServer。</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Server</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8005<span class="token punctuation">&quot;</span></span> <span class="token attr-name">shutdown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SHUTDOWN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">	...</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Server</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>port : Tomcat 监听的关闭服务器的端口。</p><p>shutdown： 关闭服务器的指令字符串。</p><p>【Connector】 用于创建链接器实例。默认情况下，server.xml 配置了两个链接器，一个支持HTTP协议，一个支持AJP协议。因此大多数情况下，我们并不需要新增链接器配置，只是根据需要对已有链接器进行优化。</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTP/1.1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span> <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>属性说明：</p><p>1） port： 端口号，Connector 用于创建服务端Socket 并进行监听， 以等待客户端请求链接。如果该属性设置为 0，Tomcat将会随机选择一个可用的端口号给当前Connector 使用。</p><p>2） protocol ： 当前Connector 支持的访问协议。 默认为 HTTP/1.1 。</p><p>3） connectionTimeOut : Connector 接收链接后的等待超时时间， 单位为 毫秒。 -1 表示不超时。</p><p>完整的配置如下：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Server</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8005<span class="token punctuation">&quot;</span></span> <span class="token attr-name">shutdown</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>SHUTDOWN<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.startup.VersionLoggerListener<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.core.AprLifecycleListener<span class="token punctuation">&quot;</span></span> <span class="token attr-name">SSLEngine</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>on<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.core.JreMemoryLeakPreventionListener<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.mbeans.GlobalResourcesLifecycleListener<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Listener</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.core.ThreadLocalLeakPreventionListener<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GlobalNamingResources</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resource</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserDatabase<span class="token punctuation">&quot;</span></span> <span class="token attr-name">auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Container<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.UserDatabase<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>User database that can be updated and saved<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">factory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.users.MemoryUserDatabaseFactory<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">pathname</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>conf/tomcat-users.xml<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>GlobalNamingResources</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Service</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Catalina<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTP/1.1<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Engine</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Catalina<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Realm</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.realm.LockOutRealm<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Realm</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.realm.UserDatabaseRealm<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">resourceName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UserDatabase<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Realm</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>webapps<span class="token punctuation">&quot;</span></span></span>
<span class="line">            <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Valve</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>org.apache.catalina.valves.AccessLogValve<span class="token punctuation">&quot;</span></span> <span class="token attr-name">directory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>logs<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost_access_log<span class="token punctuation">&quot;</span></span> <span class="token attr-name">suffix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>.txt<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>%h %l %u %t <span class="token entity named-entity" title="&quot;">&amp;quot;</span>%r<span class="token entity named-entity" title="&quot;">&amp;quot;</span> %s %b<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Engine</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Service</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Server</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们能得知的信息是：有个默认的服务是Catalina，这个服务默认开放了8080端口的连接器，默认的引擎也叫Catalina，它管理一个默认的主机localhost，localhost的根目录是webapp。</p><p>不妨我们打开webapp，我们能看到这里边已经有了几个项目了。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928153831460.04199b32.png" alt="image-20210928153831460"></p><p>这里边已经有了几个工程，这几个工程有管理工具，有例子程序，我们以后项目就可以放在这里。如果输入的后没有加项目名字，默认会进入ROOT，比如我们看到的首页就是ROOT中的工程。</p><p>我们不妨在webapp中新建，app文件</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928153802358.20893fc2.png" alt="image-20210928153802358"></p><p>重新启动tomcat，访问localhost:8080/app/index.html</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928154511505.06089c88.png" alt="image-20210928154511505"></p><p>结果如下。</p><p>给一个service增加监听端口：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Service</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Catalina<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8080<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTP/1.1<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>8443<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>9090<span class="token punctuation">&quot;</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>HTTP/1.1<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">connectionTimeout</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20000<span class="token punctuation">&quot;</span></span></span>
<span class="line">               <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>9443<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line">    ...</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Service</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>意思就是同时开了8080、9090以及8443和9443四个端口。这里只是测试，一般是没有必要的。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928155145556.957f66e2.png" alt="image-20210928155145556"></p><p>9090端口一样能打开，这就相当于给我们的服务开了好几个门，通过这几个门，数据都能进来。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928155208757.e414efa8.png" alt="image-20210928155208757"></p><p>比如我们可以这样去操作：</p><p>我们在hosts文件中再配置一个主机域名</p><p>路径是：C:\\Windows\\System32\\drivers\\etc</p><p>受用notepad++修改hosts文件：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928151854110.bbd257d5.png" alt="image-20210928151854110"></p><p>再给我们本机配置一个主机域名：这时不管是localhost还是www.ydl.com都会指向本机：</p><p>接着就该位置文件：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Engine</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Catalina<span class="token punctuation">&quot;</span></span> <span class="token attr-name">defaultHost</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">    <span class="token comment">&lt;!-- 配置一个新的host指向d盘的目录 --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>www.ydl.com<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>D:\\\\webapps<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- 原有的也是默认的host --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Host</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localhost<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">appBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>webapps<span class="token punctuation">&quot;</span></span></span>
<span class="line">          <span class="token attr-name">unpackWARs</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoDeploy</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        ...</span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Host</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Engine</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然我们在D盘下新建webapps，这只是个目录的名字，你可以在任何的地方，叫任何的名字：</p><p>我们新建目录app，并在app下新建index.html。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>www.ydl.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动tomcat，访问http://www.ydl.com:8080/app/index.html</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928152359863.882aa1c2.png" alt="image-20210928152359863"></p><p>成功了，这里我们验证了多了主机域名。</p><h4 id="_4、创建javaweb项目" tabindex="-1"><a class="header-anchor" href="#_4、创建javaweb项目"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81%E5%88%9B%E5%BB%BAjavaweb%E9%A1%B9%E7%9B%AE" target="_blank" rel="noopener noreferrer">#</a>4、创建Javaweb项目</span></a></h4><h5 id="_1-创建项目" tabindex="-1"><a class="header-anchor" href="#_1-创建项目"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE" target="_blank" rel="noopener noreferrer">#</a>（1）创建项目</span></a></h5><p>直接创建一个Java项目，我们自己尝试构建：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928160756575.a2569709.png" alt="image-20210928160756575"></p><h5 id="_2-创建名字" tabindex="-1"><a class="header-anchor" href="#_2-创建名字"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-%E5%88%9B%E5%BB%BA%E5%90%8D%E5%AD%97" target="_blank" rel="noopener noreferrer">#</a>（2）创建名字</span></a></h5><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928160820395.1b53ab53.png" alt="image-20210928160820395"></p><h5 id="_3-项目结构" tabindex="-1"><a class="header-anchor" href="#_3-项目结构"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener noreferrer">#</a>（3）项目结构</span></a></h5><p>按照我的项目结构创建目录。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928161419437.5256ac6c.png" alt="image-20210928161419437"></p><h5 id="_4-构建web项目" tabindex="-1"><a class="header-anchor" href="#_4-构建web项目"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4-%E6%9E%84%E5%BB%BAweb%E9%A1%B9%E7%9B%AE" target="_blank" rel="noopener noreferrer">#</a>（4）构建web项目</span></a></h5><p>进入项目构建的选项卡中：快捷键是 ctrl + shift + alt + s，也可以先点击file，再进入。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928161551043.c13c9f07.png" alt="image-20210928161551043"></p><p>在facets选项中给项目添加特性：</p><p>点击加号，选择web，点击OK</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928161920071.9946bf1f.png" alt="image-20210928161920071"></p><p>这个指的是我们的xml所在的位置，一定要修改正确</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928162013003.a5e23fe2.png" alt="image-20210928162013003"></p><p>很明显，我这个不对，如果不对，就点击减号删除掉，点击加新增一个。</p><p>修改后：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928162222154.028a6338.png" alt="image-20210928162222154"></p><p>保证路径正确就行了，这个路径也要正确，如果不正确自行修改</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928162302361.d73cf1ac.png" alt="image-20210928162302361"></p><p>添加一个artifacts，</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928162409501.5ae2cc76.png" alt="image-20210928162409501"></p><p>它会自动给你添加：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928162432965.bed05e6a.png" alt="image-20210928162432965"></p><p>点击确定，配置完成。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928162605055.64e388bc.png" alt="image-20210928162605055"></p><h5 id="_5-配置web服务器-tomcat" tabindex="-1"><a class="header-anchor" href="#_5-配置web服务器-tomcat"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_5-%E9%85%8D%E7%BD%AEweb%E6%9C%8D%E5%8A%A1%E5%99%A8-tomcat" target="_blank" rel="noopener noreferrer">#</a>（5）配置web服务器（tomcat）</span></a></h5><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928162630694.57d80507.png" alt="image-20210928162630694"></p><p>点击+ 选择 tomcat Server 选择local</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163357966.80eb5a5e.png" alt="image-20210928163357966"></p><p>选择我们的tomcat10</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163433832.566265c8.png" alt="image-20210928163433832"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163108843.b26803c4.png" alt="image-20210928163108843"></p><p>选择artfacts，讲我们的工程部署上去。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163157741.ac82c907.png" alt="image-20210928163157741"></p><p>点击确定</p><h4 id="_6-部署文件" tabindex="-1"><a class="header-anchor" href="#_6-部署文件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_6-%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>（6）部署文件</span></a></h4><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211014150953927.f9f381c9.png" alt="image-20211014150953927"></p><h4 id="_7-启动" tabindex="-1"><a class="header-anchor" href="#_7-启动"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_7-%E5%90%AF%E5%8A%A8" target="_blank" rel="noopener noreferrer">#</a>（7）启动</span></a></h4><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163225537.d39e6130.png" alt="image-20210928163225537"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163722095.fe8ecbcd.png" alt="image-20210928163722095"></p><p>乱码修改：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163804098.f502dc47.png" alt="image-20210928163804098"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163837584.bd5ee9e4.png" alt="image-20210928163837584"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163907614.f35cc82d.png" alt="image-20210928163907614"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210928163956981.a70798a1.png" alt="image-20210928163956981"></p><h2 id="第四章-servlet规范" tabindex="-1"><a class="header-anchor" href="#第四章-servlet规范"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E5%9B%9B%E7%AB%A0-servlet%E8%A7%84%E8%8C%83" target="_blank" rel="noopener noreferrer">#</a>第四章 Servlet规范</span></a></h2><h3 id="一、servlet概述" tabindex="-1"><a class="header-anchor" href="#一、servlet概述"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81servlet%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener noreferrer">#</a>一、Servlet概述</span></a></h3><h4 id="_1、-什么是-servlet" tabindex="-1"><a class="header-anchor" href="#_1、-什么是-servlet"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81-%E4%BB%80%E4%B9%88%E6%98%AF-servlet" target="_blank" rel="noopener noreferrer">#</a>1、 什么是 Servlet</span></a></h4><p>Servlet 是基于 Jakarta 技术的 Web 组件，由容器管理，可生成动态内容。与其他基于 Jakarta 技术的组件一样，servlet 是独立于平台的 Java 类，它们被编译为与平台无关的字节码，这些字节码可以动态加载到支持 Jakarta 技术的 Web 服务器中并由其运行。容器，有时也称为 servlet 引擎，是提供 servlet 功能的 Web 服务器扩展。Servlet 通过 servlet 容器实现的请求/响应范式与 Web 客户端交互。</p><h4 id="_2、-什么是-servlet-容器" tabindex="-1"><a class="header-anchor" href="#_2、-什么是-servlet-容器"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81-%E4%BB%80%E4%B9%88%E6%98%AF-servlet-%E5%AE%B9%E5%99%A8" target="_blank" rel="noopener noreferrer">#</a>2、 什么是 Servlet 容器</span></a></h4><p>Servlet 容器是 Web 服务器或应用程序服务器的一部分，它提供发送请求和响应的网络服务、解码基于 MIME 的请求以及格式化基于 MIME 的响应。Servlet 容器还通过其生命周期包含和管理 Servlet。</p><p>Servlet 容器可以内置到主机 Web 服务器中，也可以通过该服务器的本机扩展 API 作为附加组件安装到 Web 服务器。Servlet 容器也可以内置于或可能安装在支持 Web 的应用程序服务器中。</p><p>所有 Servlet 容器都必须支持 HTTP 作为请求和响应的协议，但可以支持其他基于请求/响应的协议，例如 HTTPS（基于 SSL 的 HTTP）。容器必须实现的 HTTP 规范的必需版本是 HTTP/1.1 和 HTTP/2。</p><p>Java SE 8 是必须用来构建 Servlet 容器的底层 Java 平台的最低版本。</p><h4 id="_3、-一个例子" tabindex="-1"><a class="header-anchor" href="#_3、-一个例子"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81-%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90" target="_blank" rel="noopener noreferrer">#</a>3、 一个例子</span></a></h4><p>以下是一个典型的事件序列：</p><ol><li>客户端（例如，Web 浏览器）访问 Web 服务器并发出 HTTP 请求。</li><li>请求由 Web 服务器接收并传递给 Servlet 容器。Servlet 容器可以在与主机 Web 服务器相同的进程中运行，也可以在同一主机上的不同进程中运行，或者在与其处理请求的 Web 服务器不同的主机上运行。</li><li>Servlet 容器根据其Servlet 的配置确定调用哪个 Servlet，并使用代表请求和响应的对象调用它。</li><li>Servlet 使用请求对象来找出远程用户是谁、<code>POST</code>作为此请求的一部分发送的HTTP参数以及其他相关数据。Servlet 执行它编程的任何逻辑，并生成数据发送回客户端。它通过响应对象将此数据发送回客户端。</li><li>Servlet 处理完请求后，Servlet 容器会确保正确刷新响应，并将控制权返回给主机 Web 服务器。</li></ol><h4 id="_4、servlet架构" tabindex="-1"><a class="header-anchor" href="#_4、servlet架构"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81servlet%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener noreferrer">#</a>4、Servlet架构</span></a></h4><p>下图展示了Servlet在Web应用程序中的位置：</p><p><img src="https://upload-images.jianshu.io/upload_images/16195800-4a4a95212f177d2f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1152/format/webp" alt="img"></p><h3 id="二、servlet核心技术" tabindex="-1"><a class="header-anchor" href="#二、servlet核心技术"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81servlet%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF" target="_blank" rel="noopener noreferrer">#</a>二、Servlet核心技术</span></a></h3><h4 id="_1、servlet加载时机" tabindex="-1"><a class="header-anchor" href="#_1、servlet加载时机"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81servlet%E5%8A%A0%E8%BD%BD%E6%97%B6%E6%9C%BA" target="_blank" rel="noopener noreferrer">#</a><strong>1、Servlet加载时机</strong></span></a></h4><p>在默认情况下，当Web客户<strong>第一次请求访问某个Servlet时，Web容器会创建这个Servlet的实例。</strong> 当设置了web.xml中的子元素后，Servlet容器在启动Web应用时，将按照指定顺序创建并初始化这个Servlet。设置的数值<strong>大于0</strong>即可。例如：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.servlet.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、servlet的生命周期" tabindex="-1"><a class="header-anchor" href="#_2、servlet的生命周期"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noopener noreferrer">#</a>2、Servlet的生命周期</span></a></h4><p>先看与Servlet生命周期有关的三个方法：init(), service(), destroy(). Servlet生命周期可被定义为从创建直到毁灭的整个过程。以下是三个方法分别对应的Servlet过程：</p><ul><li>init()：Servlet进行初始化；</li><li>service()：Servlet处理客户端的请求；</li><li>destroy()：Servlet结束，释放资源；</li></ul><p>在调用destroy()方法后，Servlet由JVM的垃圾回首器进行垃圾回收。</p><p>现在我们来详细讨论Servlet生命周期的方法：</p><blockquote><p>init()方法：</p></blockquote><p>Servlet被装载后，Servlet容器创建一个Servlet实例并且调用Servlet的init()方法进行初始化在Servlet生命周期中init()方法<strong>只被调用一次</strong>。</p><p>当用户调用一个Servlet时，Servlet容器就会创建一个Servlet实例，<strong>每一个用户请求都会产生一个新的线程</strong>，init()方法简单的创建或加载一些数据，这些数据将会被用在Servlet的整个生命周期。</p><p>init()方法的定义如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 初始化代码...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>service()方法：</p></blockquote><p>service()方法是执行实际任务的主要方法。Servlet 容器（即 Web 服务器）调用 service()方法来处理来自客户端（浏览器）的请求，并把格式化的响应写回给客户端。</p><p>每次服务器接收到一个 Servlet 请求时，服务器会产生一个新的线程并调用服务。service()方法检查 HTTP 请求类型（GET、POST、PUT、DELETE 等），并在适当的时候调用doGet()、doPost()等方法。</p><p>service()的定义如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> response<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span></span>
<span class="line"><span class="token comment">// service()代码...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>destroy()方法：</p></blockquote><p>destroy()方法只会被调用一次，在Servlet生命周期结束时被调用。destroy()方法可以让Servlet关闭数据库连接、停止后台、把cookie列表或点击计数器写入到磁盘，并执行其他类似的清理活动。 在调用destroy()方法之后，Servlet对象被标记为垃圾回收。</p><p>destroy()方法的定义如下所示：</p><div class="language-cpp line-numbers-mode" data-highlighter="prismjs" data-ext="cpp" data-title="cpp"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 终止化代码...</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>总结：</strong></p><ul><li>在首次访问某个Servlet时，init()方法会被执行，而且也会执行service()方法。</li><li>再次访问时，只会执行service()方法，不再执行init()方法。</li><li>在关闭Web容器时会调用destroy()方法。</li></ul><h4 id="_3、实现一个servlet" tabindex="-1"><a class="header-anchor" href="#_3、实现一个servlet"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAservlet" target="_blank" rel="noopener noreferrer">#</a>3、实现一个Servlet</span></a></h4><p>当服务器接收到一个请求，就要有一个Servlet去处理这个请求，所以完成一个Servlet通常需要两步走。一方面要写一个java程序定义一个Servlet，另一方面要配置一下Servlet确定这个Servlet要处理哪一个请求。</p><h5 id="_1-创建servlet的三种方式" tabindex="-1"><a class="header-anchor" href="#_1-创建servlet的三种方式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E5%88%9B%E5%BB%BAservlet%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a><strong>（1）创建Servlet的三种方式</strong></span></a></h5><ul><li>实现javax.servlet.Servlet接口。</li><li>继承javax.servlet.GenericServlet类。</li><li>继承javax.servlet.http.HttpServlet类。</li></ul><p>我们在日常开发中一般会使用第三种方法来进行Servlet的创建，前两种方法理解即可。</p><p>**注意：**创建Servlet文件后，需要在web.xml文件中完成Servlet配置，才可以使用。</p><p>通过实现Servlet接口，这个接口定义了servlet的生命周期，所有的方法需要我们实现。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> servletConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;hello servlet&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>GenericServlet</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">GenericServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span><span class="token punctuation">,</span> <span class="token class-name">ServletConfig</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token class-name">ServletConfig</span> config<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">GenericServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> var1<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> var2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>config<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">ServletRequest</span> servletRequest<span class="token punctuation">,</span> <span class="token class-name">ServletResponse</span> servletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        servletResponse<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;hello servlet&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Http只是会根据请求的类型进行特殊的调用</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//</span></span>
<span class="line"><span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span>
<span class="line"><span class="token comment">// (powered by Fernflower decompiler)</span></span>
<span class="line"><span class="token comment">//</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">package</span> <span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationTargetException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">MessageFormat</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Enumeration</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ResourceBundle</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">DispatcherType</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">GenericServlet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletOutputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletRequest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletResponse</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HttpServlet</span> <span class="token keyword">extends</span> <span class="token class-name">GenericServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> protocol <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> msg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;http.method_get_not_supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;1.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">405</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">getLastModified</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> protocol <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">String</span> msg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;http.method_post_not_supported&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>protocol<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">&quot;1.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">405</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	<span class="token comment">// 还是会调用它，只是会根据请求的类型进行特殊的调用</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> method <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">long</span> lastModified<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;GET&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            lastModified <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastModified <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">long</span> ifModifiedSince<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">                    ifModifiedSince <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getDateHeader</span><span class="token punctuation">(</span><span class="token string">&quot;If-Modified-Since&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> var9<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    ifModifiedSince <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>ifModifiedSince <span class="token operator">&lt;</span> lastModified <span class="token operator">/</span> <span class="token number">1000L</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                    resp<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">304</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;HEAD&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            lastModified <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getLastModified</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">maybeSetLastModified</span><span class="token punctuation">(</span>resp<span class="token punctuation">,</span> lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doHead</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPost</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;PUT&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doPut</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;DELETE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doDelete</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;OPTIONS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doOptions</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;TRACE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">doTrace</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> resp<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> errMsg <span class="token operator">=</span> lStrings<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">&quot;http.method_not_implemented&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> errArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>method<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">            errMsg <span class="token operator">=</span> <span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">,</span> errArgs<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            resp<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">501</span><span class="token punctuation">,</span> errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpServletRequest和ServletRequest都是接口</p><p>HttpServletRequest继承自ServletRequest</p><p>HttpServletRequest比ServletRequest多了一些针对于Http协议的方法。 例如：</p><p>getHeader()， getMethod() ， getSession()</p><h3 id="三、servlet的匹配规则" tabindex="-1"><a class="header-anchor" href="#三、servlet的匹配规则"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%89%E3%80%81servlet%E7%9A%84%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99" target="_blank" rel="noopener noreferrer">#</a>三、Servlet的匹配规则</span></a></h3><h4 id="_1、四种匹配规则" tabindex="-1"><a class="header-anchor" href="#_1、四种匹配规则"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E5%9B%9B%E7%A7%8D%E5%8C%B9%E9%85%8D%E8%A7%84%E5%88%99" target="_blank" rel="noopener noreferrer">#</a>1、四种匹配规则</span></a></h4><h5 id="_1-精确匹配" tabindex="-1"><a class="header-anchor" href="#_1-精确匹配"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E7%B2%BE%E7%A1%AE%E5%8C%B9%E9%85%8D" target="_blank" rel="noopener noreferrer">#</a>（1） <strong>精确匹配</strong></span></a></h5><p>&lt;url-pattern&gt;中配置的项必须与url完全精确匹配。</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user/users.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/index.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user/addUser<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当在浏览器中输入如下几种url时，都会被匹配到该servlet 　　http://localhost:8080/appDemo/user/users.html 　　http://localhost:8080/appDemo/index.html 　　http://localhost:8080/appDemo/user/addUser</p><p>注意：</p><p>http://localhost:8080/appDemo/user/addUser?username=Tom&amp;age=23 会被匹配到MyServlet。</p><h5 id="_2-路径匹配" tabindex="-1"><a class="header-anchor" href="#_2-路径匹配"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-%E8%B7%AF%E5%BE%84%E5%8C%B9%E9%85%8D" target="_blank" rel="noopener noreferrer">#</a>（2） 路径匹配</span></a></h5><p><strong>以“/”字符开头，并以“/*”结尾的字符串用于路径匹配</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/user/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路径以/user/开始，后面的路径可以任意。比如下面的url都会被匹配。</p><ul><li>http://localhost:8080/appDemo/user/users.html</li><li>http://localhost:8080/appDemo/user/addUser</li><li>http://localhost:8080/appDemo/user/bb//sdf/sdf/sdf/updateUser</li></ul><h5 id="_3-扩展名匹配" tabindex="-1"><a class="header-anchor" href="#_3-扩展名匹配"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-%E6%89%A9%E5%B1%95%E5%90%8D%E5%8C%B9%E9%85%8D" target="_blank" rel="noopener noreferrer">#</a>（3）扩展名匹配</span></a></h5><p><strong>以“*.”开头的字符串被用于扩展名匹配</strong></p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.do<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>则任何扩展名为jsp或action的url请求都会匹配，比如下面的url都会被匹配</p><ul><li>http://localhost:8080/appDemo/user/users.jsp</li><li>http://localhost:8080/appDemo/toHome.action</li></ul><h5 id="_4-缺省匹配" tabindex="-1"><a class="header-anchor" href="#_4-缺省匹配"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4-%E7%BC%BA%E7%9C%81%E5%8C%B9%E9%85%8D" target="_blank" rel="noopener noreferrer">#</a>（4） 缺省匹配</span></a></h5><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>MyServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、匹配顺序" tabindex="-1"><a class="header-anchor" href="#_2、匹配顺序"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81%E5%8C%B9%E9%85%8D%E9%A1%BA%E5%BA%8F" target="_blank" rel="noopener noreferrer">#</a>2、匹配顺序</span></a></h4><ol><li><p>精确匹配。</p></li><li><p>路径匹配，先最长路径匹配，再最短路径匹配。</p></li><li><p>扩展名匹配。</p><p><strong>注意：使用扩展名匹配，前面就不能有任何的路径。</strong></p></li><li><p>缺省匹配，以上都找不到Servlet，就用默认的Servlet，配置为<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code></p></li></ol><h4 id="_3、需要注意的问题" tabindex="-1"><a class="header-anchor" href="#_3、需要注意的问题"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener noreferrer">#</a>3、需要注意的问题</span></a></h4><blockquote><p>路径匹配和扩展名匹配无法同时设置</p></blockquote><p>匹配方法只有三种，要么是路径匹配（<strong>以“/”字符开头，并以“/*”结尾</strong>），要么是扩展名匹配（<strong>以“*.”开头</strong>），要么是精确匹配，三种匹配方法不能进行组合，不要想当然使用通配符。</p><ul><li>如&lt;url-pattern&gt;/user/*.action&lt;/url-pattern&gt;是非法的</li><li>另外注意：&lt;url-pattern&gt;/aa/<em>/bb&lt;/url-pattern&gt;是精确匹配，合法，这里的</em>不是通配的含义</li></ul><blockquote><p>&quot;/*&quot;和&quot;/&quot;含义并不相同</p></blockquote><ul><li>“/<em>”属于路径匹配，并且可以匹配所有request，由于路径匹配的优先级仅次于精确匹配，所以“/</em>”会覆盖所有的扩展名匹配，很多404错误均由此引起，所以这是一种特别恶劣的匹配模式。</li><li>“/”是servlet中特殊的匹配模式，切该模式有且仅有一个实例，优先级最低，不会覆盖其他任何url-pattern，只是会替换servlet容器的内建default servlet ，该模式同样会匹配所有request。</li></ul><p>Tomcat在%CATALINA_HOME%\\conf\\web.xml文件中配置了默认的Servlet，配置代码如下:</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.apache.catalina.servlets.DefaultServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>debug<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>listings<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>org.apache.jasper.servlet.JspServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>fork<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>xpoweredBy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">&gt;</span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- The mappings for the JSP servlet --&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>*.jspx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>“/*”和“/”均会拦截静态资源的加载，需要特别注意</li></ul><h4 id="_4、举例" tabindex="-1"><a class="header-anchor" href="#_4、举例"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81%E4%B8%BE%E4%BE%8B" target="_blank" rel="noopener noreferrer">#</a>4、举例</span></a></h4><table><thead><tr><th>映射的URL</th><th>对应的Servlet</th></tr></thead><tbody><tr><td>/hello</td><td>servlet1</td></tr><tr><td>/bbs/admin/*</td><td>servlet2</td></tr><tr><td>/bbs/*</td><td>servlet3</td></tr><tr><td>*.jsp</td><td>servlet4</td></tr><tr><td>/</td><td>servlet5</td></tr></tbody></table><p>实际请求映射的结果</p><table><thead><tr><th>去掉上下文路径的剩余路径</th><th>处理请求的Servlet</th></tr></thead><tbody><tr><td>/hello</td><td>servlet1</td></tr><tr><td>/bbs/admin/login</td><td>servlet2</td></tr><tr><td>/bbs/admin/index.jsp</td><td>servlet2</td></tr><tr><td>/bbs/display</td><td>servlet3</td></tr><tr><td>/bbs/index.jsp</td><td>servlet3</td></tr><tr><td>/bbs</td><td>servlet3</td></tr><tr><td>/index.jsp</td><td>servler4</td></tr><tr><td>/hello/index.jsp</td><td>servlet4</td></tr><tr><td>/hello/index.html</td><td>servlet5</td></tr><tr><td>/news</td><td>servlet5</td></tr></tbody></table><h3 id="四、请求和响应" tabindex="-1"><a class="header-anchor" href="#四、请求和响应"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E5%9B%9B%E3%80%81%E8%AF%B7%E6%B1%82%E5%92%8C%E5%93%8D%E5%BA%94" target="_blank" rel="noopener noreferrer">#</a>四、请求和响应</span></a></h3><h4 id="_1、请求-reques" tabindex="-1"><a class="header-anchor" href="#_1、请求-reques"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E8%AF%B7%E6%B1%82-reques" target="_blank" rel="noopener noreferrer">#</a>1、请求-reques</span></a></h4><h5 id="_1-request概述" tabindex="-1"><a class="header-anchor" href="#_1-request概述"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-request%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener noreferrer">#</a><strong>（1）request概述</strong></span></a></h5><p>request是Servlet.service()方法的一个参数，类型为javax.servlet.http.HttpServletRequest。在客户端发出每个请求时，服务器都会创建一个request对象，并把请求数据封装到request中，然后再调用Servlet.service()方法时传递给service()方法，这说明在service()方法中可以通过request对象来获取请求数据。</p><p>request的功能可以分为以下几种：</p><ul><li>封装了请求头数据；</li><li>封装了请求正文数据，如果是GET请求，那么就没有正文；</li><li>request是一个域对象，可以把它当成Map来添加获取数据；</li><li>request提供了请求转发和请求包含功能。（以后学习）</li></ul><h5 id="_2-request获取请求头数据" tabindex="-1"><a class="header-anchor" href="#_2-request获取请求头数据"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-request%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%95%B0%E6%8D%AE" target="_blank" rel="noopener noreferrer">#</a><strong>（2）request获取请求头数据</strong></span></a></h5><p>request与请求头相关的方法有：</p><ul><li>String getHeader(String name)：获取指定名称的请求头；</li><li>Enumeration getHeaderNames()：获取所有请求头名称；</li><li>int getIntHeader(String name)：获取值为int类型的请求头。</li></ul><h5 id="_3-request获取请求相关的其它方法" tabindex="-1"><a class="header-anchor" href="#_3-request获取请求相关的其它方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-request%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E7%9B%B8%E5%85%B3%E7%9A%84%E5%85%B6%E5%AE%83%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a><strong>（3）request获取请求相关的其它方法</strong></span></a></h5><ul><li>request中还提供了与请求相关的其他方法，有些方法是为了我们更加便捷的方法请求头数据而设计，有些是与请求URL相关的方法。</li><li>int getContentLength()：获取请求体的字节数，GET请求没有请求体，没有请求体返回-1；</li><li>String getContentType()：获取请求类型，如果请求是GET，那么这个方法返回null；如果是POST请求，那么默认为application/x-www-form-urlencoded，表示请求体内容使用了URL编码；</li><li>String getMethod()：返回请求方法，例如：GET</li><li>Locale getLocale()：返回当前客户端浏览器的Locale。java.util.Locale表示国家和言语，这个东西在国际化中很有用；</li><li>String getCharacterEncoding()：获取请求编码，如果没有setCharacterEncoding()，那么返回null，表示使用ISO-8859-1编码；</li><li>void setCharacterEncoding(String code)：设置请求编码，只对请求体有效！注意，对于GET而言，没有请求体！！！所以此方法只能对POST请求中的参数有效！</li><li>String getContextPath()：返回上下文路径，例如：/hello</li><li>String getQueryString()：返回请求URL中的参数，例如：name=zhangSan</li><li>String getRequestURI()：返回请求URI路径，例如：/hello/oneServlet</li><li>StringBuffer getRequestURL()：返回请求URL路径，例如：http://localhost/hello/oneServlet，即返回除了参数以外的路径信息；</li><li>String getServletPath()：返回Servlet路径，例如：/oneServlet</li><li>String getRemoteAddr()：返回当前客户端的IP地址；</li><li>String getRemoteHost()：返回当前客户端的主机名，但这个方法的实现还是获取IP地址；</li><li>String getScheme()：返回请求协议，例如：http；</li><li>String getServerName()：返回主机名，例如：localhost</li><li>int getServerPort()：返回服务器端口号，例如：8080</li></ul><blockquote><p>案例：request.getRemoteAddr()：封IP</p></blockquote><p>可以使用request.getRemoteAddr()方法获取客户端的IP地址，然后判断IP是否为禁用IP。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> ip <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>ip<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">&quot;127.0.0.1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       </span>
<span class="line">	response<span class="token punctuation">.</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;您的IP已被禁止！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>       </span>
<span class="line">    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;Hello!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-request获取请求参数" tabindex="-1"><a class="header-anchor" href="#_4-request获取请求参数"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4-request%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0" target="_blank" rel="noopener noreferrer">#</a><strong>（4）request获取请求参数</strong></span></a></h5><p>最为常见的客户端传递参数方式有两种：</p><ul><li>浏览器地址栏直接输入：一定是GET请求；</li><li>超链接：一定是GET请求；</li><li>表单：可以是GET，也可以是POST，这取决与&lt;form&gt;的method属性值。</li></ul><blockquote><p>GET请求和POST请求的区别：</p></blockquote><p>l GET请求：</p><ul><li>请求参数会在浏览器的地址栏中显示，所以不安全；</li><li>请求参数长度限制长度在1K之内；</li><li>GET请求没有请求体，无法通过request.setCharacterEncoding()来设置参数的编码；</li></ul><p>l POST请求：</p><ul><li>请求参数不会显示浏览器的地址栏，相对安全；</li><li>请求参数长度没有限制；</li></ul><blockquote><p>下面是使用request获取请求参数的API：</p></blockquote><ul><li>String getParameter(String name)：通过指定名称获取参数值；</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">    <span class="token class-name">String</span> v1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;p1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    <span class="token class-name">String</span> v2 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;p2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;p1=&quot;</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;p2=&quot;</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">    <span class="token class-name">String</span> v1 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;p1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    <span class="token class-name">String</span> v2 <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;p2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;p1=&quot;</span> <span class="token operator">+</span> v1<span class="token punctuation">)</span><span class="token punctuation">;</span>     </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;p2=&quot;</span> <span class="token operator">+</span> v2<span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>String[] getParameterValues(String name)：当多个参数名称相同时，可以使用方法来获取；</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>   <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span>  request<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 									       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span>*toString<span class="token operator">*</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Enumeration getParameterNames()：获取所有参数的名字；</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">    <span class="token class-name">Enumeration</span> names <span class="token operator">=</span>  request<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    <span class="token keyword">while</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    <span class="token punctuation">}</span>    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Map getParameterMap()：获取所有参数封装到Map中，其中key为参数名，value为参数值，因为一个参数名称可能有多个值，所以参数值是String[]，而不是String。</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Map</span><span class="token operator">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> paramMap <span class="token operator">=</span>  request<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token operator">:</span> paramMap<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       </span>
<span class="line">    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values <span class="token operator">=</span>  paramMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       </span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>*out<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span>*toString<span class="token operator">*</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-请求转发-重要" tabindex="-1"><a class="header-anchor" href="#_5-请求转发-重要"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_5-%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91-%E9%87%8D%E8%A6%81" target="_blank" rel="noopener noreferrer">#</a>（5）请求转发-重要</span></a></h5><p>请求转发表示由<code>多个Servlet共同来处理一个请求</code>。例如Servlet1来处理请求，然后Servlet1又转发给Servlet2来继续处理这个请求。</p><p>在AServlet中，把请求转发到BServlet：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;AServlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     </span>
<span class="line">        <span class="token class-name">RequestDispatcher</span> rd <span class="token operator">=</span>  request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">&quot;/BServlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">        rd<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;BServlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_6-request-域方法" tabindex="-1"><a class="header-anchor" href="#_6-request-域方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_6-request-%E5%9F%9F%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>（6）request 域方法</span></a></h5><p>一个请求会创建一个request对象，如果在一个请求中经历了多个Servlet，那么多个Servlet就可以使用request来共享数据。</p><p>下面是request的域方法：</p><ul><li>void setAttribute(String name, Object value)：用来存储一个对象，也可以称之为存储一个域属性，</li><li>Object getAttribute(String name)：用来获取request中的数据，当前在获取之前需要先去存储才行，例如：String value = (String)request.getAttribute(“xxx”);，获取名为xxx的域属性；</li><li>void removeAttribute(String name)：用来移除request中的域属性，如果参数name指定的域属性不存在，那么本方法什么都不做；</li><li>Enumeration getAttributeNames()：获取所有域属性的名称；</li></ul><p>域方法通常在进行重定向时使用，多个Servlet共享数据。</p><h4 id="_2、响应-response" tabindex="-1"><a class="header-anchor" href="#_2、响应-response"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81%E5%93%8D%E5%BA%94-response" target="_blank" rel="noopener noreferrer">#</a>2、响应-response</span></a></h4><h5 id="_1-response概述" tabindex="-1"><a class="header-anchor" href="#_1-response概述"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-response%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener noreferrer">#</a>（1）response概述</span></a></h5><p>response是Servlet.service方法的一个参数，类型为javax.servlet.http.HttpServletResponse。</p><p>在客户端发出每个请求时，服务器都会创建一个response对象，并传入给Servlet.service()方法。response对象是用来对客户端进行响应的，这说明在service()方法中使用response对象可以完成对客户端的响应工作。</p><p>response对象的功能分为以下四种：</p><ul><li>设置响应头信息；</li><li>发送状态码；</li><li>设置响应正文；</li><li>重定向。</li></ul><h5 id="_2-response响应正文" tabindex="-1"><a class="header-anchor" href="#_2-response响应正文"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-response%E5%93%8D%E5%BA%94%E6%AD%A3%E6%96%87" target="_blank" rel="noopener noreferrer">#</a>（2）response响应正文</span></a></h5><p>response是响应对象，向客户端输出响应正文（响应体）可以使用response的响应流，repsonse一共提供了两个响应流对象：</p><ul><li>PrintWriter out = response.getWriter()：获取字符流，处理字符；</li><li>ServletOutputStream out = response.getOutputStream()：获取字节流，处理文件；</li></ul><p>注意，在一个请求中，不能同时使用这两个流！也就是说，要么你使用repsonse.getWriter()，要么使用response.getOutputStream()，但不能同时使用这两个流。不然会抛出<a href="http://java.sun.com/j2se/1.5/docs/api/java/lang/IllegalStateException.html" target="_blank" rel="noopener noreferrer">IllegalStateExceptionopen in new window</a>异常。</p><h6 id="a、字符响应流" tabindex="-1"><a class="header-anchor" href="#a、字符响应流"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#a%E3%80%81%E5%AD%97%E7%AC%A6%E5%93%8D%E5%BA%94%E6%B5%81" target="_blank" rel="noopener noreferrer">#</a>a、字符响应流</span></a></h6><p>（1）字符编码</p><p>**重要：**在使用response.getWriter()时需要注意默认字符编码为ISO-8859-1，如果希望设置字符流的字符编码为utf-8，可以使用response.setCharaceterEncoding(“gbk”)来设置。这样可以保证输出给客户端的字符都是使用UTF-8编码的！</p><p>但客户端浏览器并不知道响应数据是什么编码的！如果希望通知客户端使用UTF-8来解读响应数据，那么还是使用**response.setContentType(&quot;text/html;charset=utf-8&quot;)**方法比较好，</p><p>因为这个方法不只会调用response.setCharaceterEncoding(“utf-8”)，还会设置content-type响应头，客户端浏览器会使用content-type头来解读响应数据。</p><p>（2）缓冲区</p><p>response.getWriter()是PrintWriter类型，所以它有缓冲区，缓冲区的默认大小为8KB。也就是说，在响应数据没有输出8KB之前，数据都是存放在缓冲区中，而不会立刻发送到客户端。当Servlet执行结束后，服务器才会去刷新流，使缓冲区中的数据发送到客户端。</p><p>如果希望响应数据马上发送给客户端：</p><ul><li>向流中写入大于8KB的数据；</li><li>调用response.flushBuffer()方法来手动刷新缓冲区；</li></ul><h5 id="_3-设置响应头信息" tabindex="-1"><a class="header-anchor" href="#_3-设置响应头信息"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-%E8%AE%BE%E7%BD%AE%E5%93%8D%E5%BA%94%E5%A4%B4%E4%BF%A1%E6%81%AF" target="_blank" rel="noopener noreferrer">#</a>（3）设置响应头信息</span></a></h5><p>可以使用response对象的setHeader()方法来设置响应头！使用该方法设置的响应头最终会发送给客户端浏览器！</p><ul><li>response.setHeader(“content-type”, “text/html;charset=utf-8”)：</li></ul><p>设置content-type响应头，该头的作用是告诉浏览器响应内容为html类型，编码为utf-8。而且同时会设置response的字符流编码为utf-8，即response.setCharaceterEncoding(“utf-8”)；</p><ul><li>response.setHeader(&quot;Refresh&quot;,&quot;5; URL=http://www.baidu.cn&quot;)：5秒后自动跳转到百度主页。</li></ul><h5 id="_4-设置状态码及其他方法" tabindex="-1"><a class="header-anchor" href="#_4-设置状态码及其他方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4-%E8%AE%BE%E7%BD%AE%E7%8A%B6%E6%80%81%E7%A0%81%E5%8F%8A%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>（4）设置状态码及其他方法</span></a></h5><ul><li>response.setContentType(&quot;text/html;charset=utf-8&quot;)：等同于调用response.setHeader(“content-type”, “text/html;charset=utf-8”)；用它就行了。</li><li>response.setCharacterEncoding(“utf-8”)：设置字符响应流的字符编码为utf-8；</li><li>response.setStatus(200)：设置状态码；</li><li>response.sendError(404, “您要查找的资源不存在”)：当发送错误状态码时，Tomcat会跳转到固定的错误页面去，但可以显示错误信息。</li></ul><p>重定向和请求转发</p><h5 id="_5-重定向-重要" tabindex="-1"><a class="header-anchor" href="#_5-重定向-重要"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_5-%E9%87%8D%E5%AE%9A%E5%90%91-%E9%87%8D%E8%A6%81" target="_blank" rel="noopener noreferrer">#</a>（5）重定向，重要</span></a></h5><blockquote><p>什么是重定向</p></blockquote><p>当你访问http://www.sun.com时，你会发现浏览器地址栏中的URL会变成http://www.oracle.com/us/sun/index.htm，这就是重定向了。</p><p>重定向是服务器通知浏览器去访问另一个地址，即再发出另一个请求。</p><blockquote><p>完成重定向</p></blockquote><p>响应码为200表示响应成功，而响应码为302表示重定向。所以完成重定向的第一步就是设置响应码为302。</p><p>因为重定向是通知浏览器再第二个请求，所以浏览器需要知道第二个请求的URL，所以完成重定向的第二步是设置Location头，指定第二个请求的URL地址。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">compublic <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">    response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      </span>
<span class="line">    response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Location&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码的作用是：当访问AServlet后，会通知浏览器重定向到百度主页。客户端浏览器解析到响应码为302后，就知道服务器让它重定向，所以它会马上获取响应头Location，然发出第二个请求。</p><blockquote><p>便捷的重定向方</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>  <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;http://www.baidu.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>response.sendRedirect()方法会设置响应头为302，以设置Location响应头。</p><p>如果要重定向的URL是在同一个服务器内，那么可以使用相对路径，例如：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span>  </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>  request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span>       <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span>  <span class="token class-name">IOException</span> <span class="token punctuation">{</span>      </span>
<span class="line">    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;/hello/BServlet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span>
<span class="line">    <span class="token punctuation">}</span>  </span>
<span class="line"><span class="token punctuation">}</span>  </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重定向的URL地址为：http://localhost:8080/hello/BServlet。</p><blockquote><p>重定向小结</p></blockquote><ul><li>重定向是两次请求，请求转发是一次</li><li>重定向的URL可以是其它应用，不局限于当前应用；</li><li>重定向的响应头为302，并且必须要有Location响应头；</li><li>重定向就不要再使用response.getWriter()或response.getOutputStream()输出数据，不然可能会出现异常。</li></ul><h4 id="_3、重定向和转发的区别" tabindex="-1"><a class="header-anchor" href="#_3、重定向和转发的区别"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener noreferrer">#</a>3、重定向和转发的区别</span></a></h4><ul><li>重定向是两次请求，转发是一个请求</li><li><strong>重定向是浏览器的行为，请求转发是服务器行为</strong></li><li><strong>重定向浏览器的地址会发生改变，转发不会</strong></li><li>重定向可以重定向到任何地址，转发只能在项目内转发</li></ul><h4 id="_4、session和cookie" tabindex="-1"><a class="header-anchor" href="#_4、session和cookie"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81session%E5%92%8Ccookie" target="_blank" rel="noopener noreferrer">#</a>4、session和cookie</span></a></h4><p>会话的概念：在计算机中，尤其是在网络应用中，称为“会话控制”。</p><p>http是无状态的，它不保存状态，意思就是一个浏览器发的请求，随后就断开了，下一次发送请求就和上一次无关了。</p><p>比如一个用户购买一个商品，第一次需要登录，如果再买一个时向服务器发送请求，服务器如果不知道是谁发的，那么他就得再登录一次，这显然是不合理的，于是就提出了cookie和session的概念。</p><p>cookie是记录在浏览器端的一个字符串，它的大小不能超过4k，session是保存在服务器端的一个对象。它们两互相配合让服务器有了能识别客户端一些状态的能力，意思就是服务就能知道这个客户端有没有登录等。cookie就相当于通行证，session就是门房，进去时需要从门房识别一个身份。</p><h5 id="_1-cookie" tabindex="-1"><a class="header-anchor" href="#_1-cookie"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-cookie" target="_blank" rel="noopener noreferrer">#</a>（1）cookie</span></a></h5><p>cookie是可以通过key和value构建的，我们可以给cookie添加一个有效期，单位是秒：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Set-Cookie：customer=huangxp; path=/foo; domain=.ibm.com; expires= Wednesday, 22-OCT-05 23:12:40 GMT;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">Cookie cookie = new Cookie(&quot;jsession&quot;, UUID.randomUUID().toString());</span>
<span class="line">resp.addCookie(cookie);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211005214759688.23143998.png" alt="image-20211005214759688"></p><p>cookie除了key-value之外，还有一些字段用来控制cookie的行为：</p><blockquote><p>expires/Max-Age 字段</p></blockquote><p>为此cookie超时时间。若设置其值为一个时间，那么当到达此时间后，此cookie失效。不设置的话默认值是Session，当浏览器关闭(不是浏览器标签页，而是整个浏览器) 后，此cookie失效。</p><p>1、过期时间，定cookie的生命期。如果是正数单位是秒，如果是负数代表关闭浏览器失效，如果设置成零也就是将cookie失效。</p><p>2、具体是值是过期日期。如果想让cookie的存在期限超过当前浏览器会话时间，就必须使用这个属性。当过了到期日期时，浏览器就可以删除cookie文件，没有任何影响。</p><blockquote><p>Secure字段</p></blockquote><p>设置是否只能通过https来传递此条cookie</p><ul><li>安全，指定cookie的值通过网络如何在用户和WEB服务器之间传递。</li><li>这个属性的值或者是“secure”，或者为空。缺省情况下，该属性为空，也就是使用不安全的HTTP连接传递数据。如果一个 cookie 标记为secure，那么，它与WEB服务器之间就通过HTTPS或者其它安全协议传递数据。不过，设置了secure属性不代表其他人不能看到你机器本地保存的cookie。换句话说，把cookie设置为secure，只保证cookie与WEB服务器之间的数据传输过程加密，而保存在本地的cookie文件并不加密。如果想让本地cookie也加密，得自己加密数据。</li></ul><blockquote><p>Http字段</p></blockquote><p>cookie的httponly属性。若此属性为true，则只有在http请求头中会带有此cookie的信息，而不能通过document.cookie来访问此cookie。</p><ul><li>如果在Cookie中设置了”HttpOnly”属性，那么通过后台程序读取，JS脚本将无法读取到Cookie信息，这样能有效的防止XSS攻击。</li><li>但是设置HttpOnly属性，Cookie盗窃的威胁并没有彻底消除，因为cookie还是有可能传递的过程中被监听捕获后信息泄漏。</li></ul><blockquote><p>domain字段</p></blockquote><ul><li>域，指定关联的WEB服务器或域。</li><li>值是域名。这是对path路径属性的一个延伸。如果我们想让dev.mycompany.com 能够访问bbs.mycompany.com设置的cookies，该怎么办? 我们可以把domain属性设置成“mycompany.com”，并把path属性设置成“/”。不能把cookies<strong>域属性设置成与设置它的服务器的所在域</strong>不同的值。</li></ul><blockquote><p>Path字段</p></blockquote><p>path字段为可以访问此cookie的页面路径。 比如domain是abc.com，path是/test，那么只有/test路径下的页面可以读取此cookie。</p><ul><li>路径，指定与cookie关联的WEB页。</li><li>值可以是一个目录，或者是一个路径。如果/head/index.html 建立了一个cookie，那么在/head/目录里的所有页面，以及该目录下面任何子目录里的页面都可以访问这个cookie。这就是说，在/head/stories/articles 里的任何页面都可以访问/head/index.html建立的cookie。但是，如果/zdnn/ 需要访问/head/index.html设置的cookies，该怎么办?这时，我们要把cookies的path属性设置成“/”。在指定路径的时候，凡是来自同一服务器，URL里有相同路径的所有WEB页面都可以共享cookies。现在看另一个例子：如果想让 /head/filters/ 和/head/stories/共享cookies，就要把path设成“/head”。</li></ul><h5 id="_2-session" tabindex="-1"><a class="header-anchor" href="#_2-session"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-session" target="_blank" rel="noopener noreferrer">#</a>（2）session</span></a></h5><p>创建时机：</p><p>服务器端第一次调用getSession()的时候会创建；(保存在服务器内存中)</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这也就意味着，调用这个方法的时候，会去获取session，如果获得了就获得了，如果不能获取则会执行以下操作：</p><ul><li>在内存创建一个session，同时给这个session一个id</li><li>响应中加一个首部set-Cookie，带上这个id，这个默认的cookie，会在关闭浏览器时消除。</li></ul><p>内存中的session不会一直存在，配置session的失效时间</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;session-config&gt;</span>
<span class="line">    &lt;session-timeout&gt;30&lt;/session-timeout&gt;</span>
<span class="line">&lt;/session-config&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、servlet三大域对象" tabindex="-1"><a class="header-anchor" href="#_5、servlet三大域对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_5%E3%80%81servlet%E4%B8%89%E5%A4%A7%E5%9F%9F%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>5、Servlet三大域对象</span></a></h4><table><thead><tr><th>对象名称</th><th>对象的类型</th></tr></thead><tbody><tr><td>request</td><td>HttpServletRequest</td></tr><tr><td>session</td><td>HttpSession</td></tr><tr><td>application</td><td>ServletContext</td></tr></tbody></table><p>怎么理解域对象，就是这几个对象都有自己管理的领域，我们之前学习过作用域，每一个变量都有自己的作用域。我们可以在这个域对象中保存一些数据，不同的域对象有自己不同的作用范围。</p><h5 id="_1-request" tabindex="-1"><a class="header-anchor" href="#_1-request"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-request" target="_blank" rel="noopener noreferrer">#</a>（1）request</span></a></h5><p>生命周期：</p><ul><li>创建：客户端向服务器发送一次请求,服务器就会创建request对象.</li><li>销毁：服务器对这次请求作出响应后就会销毁request对象.</li><li>有效：仅在当前请求中有效。</li></ul><p>作用：可以在请求转发中传递数据。</p><h5 id="_2-session-1" tabindex="-1"><a class="header-anchor" href="#_2-session-1"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-session-1" target="_blank" rel="noopener noreferrer">#</a>（2）session</span></a></h5><p>生命周期：</p><p>创建：服务器端第一次调用getSession()；(保存在服务器内存中)</p><p>销毁：</p><ul><li>非正常关闭服务器(正常关闭session会序列化，再次启动服务器session会被反序列化)。</li><li>session过期了默认30分钟。</li><li>手动调用session.invalidate()。</li></ul><p>注意：关闭浏览器再次访问会找不到session的会话id而不是session被销毁了。</p><p>有效：用户打开浏览器会话开始，直到关闭浏览器会话才会结束。一次会话期间只会创建一个session对象。</p><p>作用：最典型的就是用户登录状态保存的。</p><h5 id="_3-application" tabindex="-1"><a class="header-anchor" href="#_3-application"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-application" target="_blank" rel="noopener noreferrer">#</a>（3）application</span></a></h5><p>生命周期：</p><ul><li>创建：服务器启动的时候,服务器为每个WEB应用创建一个属于该web项目的对象ServletContext类。</li><li>销毁：服务器关闭或者项目从服务器中移除的时候。</li><li>有效：此信息在整个服务器上被保留。</li></ul><p>域对象的区别：</p><ul><li>request: 每一次请求都是一个新的request对象,如果在web组件之间需要共享同一个请求中的数据,只能使用请求转发。</li><li>session: 每一次会话都是一个新的session对象,如果在一次会话中的多个请求之间需要共享数据,只能使用session。</li><li>application: 应用对象,Tomcat启动到关闭,表示一个应用,在一个应用中有且只有一个application对象,作用于整个Web应用,可以实现多次会话之间的数据共享.</li></ul><p>共同点：</p><p>1、设置作用域中的共享数据（保存数据）</p><p>作用域对象.setAttribute(String name,Object value);</p><p>2、获取作用域中的共享数据（获取数据）</p><p>Object value=作用域对象.getAttribute(String name);</p><p>3、删除作用域中的指定的共享数据（删除数据）</p><p>作用域对象.removeAttribute(String name);</p><h2 id="第五章-jsp入门学习" tabindex="-1"><a class="header-anchor" href="#第五章-jsp入门学习"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E4%BA%94%E7%AB%A0-jsp%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0" target="_blank" rel="noopener noreferrer">#</a>第五章 JSP入门学习</span></a></h2><h3 id="一、jsp基础语法" tabindex="-1"><a class="header-anchor" href="#一、jsp基础语法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81jsp%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>一、JSP基础语法</span></a></h3><h4 id="_1、jsp模板元素" tabindex="-1"><a class="header-anchor" href="#_1、jsp模板元素"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81jsp%E6%A8%A1%E6%9D%BF%E5%85%83%E7%B4%A0" target="_blank" rel="noopener noreferrer">#</a>1、JSP模板元素</span></a></h4><p>JSP页面中的HTML内容称之为JSP模版元素。JSP模版元素定义了网页的基本骨架，即定义了页面的结构和外观。</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">    &lt;title&gt;Title&lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、jsp脚本片段" tabindex="-1"><a class="header-anchor" href="#_2、jsp脚本片段"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81jsp%E8%84%9A%E6%9C%AC%E7%89%87%E6%AE%B5" target="_blank" rel="noopener noreferrer">#</a>2、JSP脚本片段</span></a></h4><p>JSP脚本片断用于在JSP页面中编写多行Java代码（<strong>在&lt;%%&gt;不能定义方法</strong>）。语法：<strong>&lt;%多行java代码 %&gt;</strong></p><p>例如：</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token operator">&lt;</span><span class="token operator">%</span></span>
<span class="line">    int num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    num <span class="token operator">=</span> <span class="token operator">++</span>num<span class="token punctuation">;</span></span>
<span class="line">    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;num:&quot;</span></span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">%</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>1、JSP脚本片断中只能出现Java代码，不能出现其它模板元素， JSP引擎在翻译JSP页面中，会将JSP脚本片断中的Java代码原封不动地放到Servlet的_jspService方法中。</p><p>2、JSP脚本片断中的Java代码必须严格遵循Java语法，例如，每执行语句后面必须用分号（;）结束。</p><p>3、在一个JSP页面中可以有多个脚本片断，在两个或多个脚本片断之间可以嵌入文本、HTML标记和其他JSP元素。</p><p>4、多个脚本片断中的代码可以相互访问</p><h4 id="_3、jsp表达式" tabindex="-1"><a class="header-anchor" href="#_3、jsp表达式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81jsp%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>3、JSP表达式</span></a></h4><p>JSP脚本表达式（expression）用于将程序数据输出到客户端，语法：<strong>&lt;%=变量或表达式 %&gt;</strong></p><p>例如：</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%=name %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line"><span class="token operator">&lt;</span>%<span class="token operator">=</span><span class="token string">&quot;123&quot;</span> %<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4、jsp声明" tabindex="-1"><a class="header-anchor" href="#_4、jsp声明"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81jsp%E5%A3%B0%E6%98%8E" target="_blank" rel="noopener noreferrer">#</a>4、JSP声明</span></a></h4><p>JSP页面中编写的所有代码，默认会被编译到servlet的_jspService方法中， 而Jsp声明中的java代码被翻译到_jspService方法的外面。语法：<strong>&lt;%！java代码 %&gt;</strong></p><p>JSP声明可用于定义JSP页面转换成的Servlet程序的静态代码块、成员变量和方法。</p><p>例如：</p><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span></span>
<span class="line"><span class="token keyword">static</span> <span class="token punctuation">{</span> </span>
<span class="line">    System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;静态代码块&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;ydlclass&quot;</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    System<span class="token punctuation">.</span><span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;成员方法！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token operator">%</span><span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">%</span></span>
<span class="line">    <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;name:&quot;</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">%</span><span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、jsp注释" tabindex="-1"><a class="header-anchor" href="#_5、jsp注释"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_5%E3%80%81jsp%E6%B3%A8%E9%87%8A" target="_blank" rel="noopener noreferrer">#</a>5、JSP注释</span></a></h4><p>在JSP中，注释有显式注释， 隐式注释，JSP自己的注释：</p><table><thead><tr><th>显式注释</th><th>直接使用HTML风格的注释：&lt;!- - 注释内容- -&gt;</th></tr></thead><tbody><tr><td>隐式注释</td><td>直接使用JAVA的注释：//、/<em>……</em>/</td></tr><tr><td>JSP自己的注释</td><td>&lt;%- - 注释内容- -%&gt;</td></tr></tbody></table><p>区别：</p><p>HTML的注释在浏览器中查看源文件的时候是可以看得到的，而JAVA注释和JSP注释在浏览器中查看源文件时是看不到注释的内容的。</p><h3 id="二、jsp原理" tabindex="-1"><a class="header-anchor" href="#二、jsp原理"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81jsp%E5%8E%9F%E7%90%86" target="_blank" rel="noopener noreferrer">#</a>二、JSP原理</span></a></h3><h4 id="_1、jsp本质上是什么" tabindex="-1"><a class="header-anchor" href="#_1、jsp本质上是什么"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81jsp%E6%9C%AC%E8%B4%A8%E4%B8%8A%E6%98%AF%E4%BB%80%E4%B9%88" target="_blank" rel="noopener noreferrer">#</a>1、jsp本质上是什么</span></a></h4><p>浏览器向服务器发请求，不管访问的是什么资源，其实都是在访问Servlet，所以当访问一个jsp页面时，其实也是在访问一个Servlet，服务器在执行jsp的时候，首先把jsp编译成一个Servlet，所以我们访问jsp时，其实不是在访问jsp，而是在访问jsp编译过后的那个Servlet。</p><p><strong>所以jsp的本质其实就是个html模板，编译器会根据模板生成对应的servlet。</strong></p><p>例如下面的代码：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span>
<span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span>
<span class="line"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span> <span class="token name">PUBLIC</span> <span class="token string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="token string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Content-Type<span class="token punctuation">&quot;</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/html; charset=UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    &lt;%!</span>
<span class="line">    static { </span>
<span class="line">        System.out.println(&quot;静态代码块&quot;); </span>
<span class="line">    }</span>
<span class="line"> </span>
<span class="line">    private String name = &quot;ydl&quot;;</span>
<span class="line"> </span>
<span class="line">    public void TestFun(){</span>
<span class="line">        System.out.println(&quot;成员方法！&quot;);</span>
<span class="line">    }</span>
<span class="line">    %&gt;</span>
<span class="line">    &lt;%</span>
<span class="line">        TestFun()；</span>
<span class="line">    %&gt;</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们通过浏览器访问index.jsp时，服务器首先将index.jsp翻译成一个index_jsp.class，在Tomcat服务器的work\\Catalina\\localhost\\项目名\\org\\apache\\jsp目录下可以看到index_jsp.class的源代码文件index_jsp.java。</p><p>当然，如果我们在idea下启动tomcat，我们需要在这个目录中查看，你的电脑在哪里自行对照：</p><div class="language-url line-numbers-mode" data-highlighter="prismjs" data-ext="url" data-title="url"><pre><code><span class="line"><span class="token scheme">C<span class="token scheme-delimiter">:</span></span>\\Users\\zn\\AppData\\Local\\JetBrains\\IntelliJIdea2021.2\\tomcat\\dbaebc50-0a4c-46a3-98dd-dd58d5f7ab41\\work\\Catalina\\localhost</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>编译后的jsp是这个样子的：</p><div class="language-kotlin line-numbers-mode" data-highlighter="prismjs" data-ext="kt" data-title="kt"><pre><code><span class="line"><span class="token keyword">package</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jsp<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span><span class="token operator">*</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> index_jsp extends org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>HttpJspBase</span>
<span class="line">    implements org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span><span class="token function">JspSourceDependent</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line"> <span class="token comment">// 这是jsp中的声明</span></span>
<span class="line">    static <span class="token punctuation">{</span> </span>
<span class="line">        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;静态代码块&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">private</span> String name <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;XinZhi&quot;</span></span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> void <span class="token function">TestFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;成员方法！&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">  <span class="token keyword">private</span> static <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>JspFactory _jspxFactory <span class="token operator">=</span></span>
<span class="line">          javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>JspFactory<span class="token punctuation">.</span><span class="token function">getDefaultFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">private</span> static java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">,</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Long<span class="token operator">&gt;</span> _jspx_dependants<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">private</span> volatile javax<span class="token punctuation">.</span>el<span class="token punctuation">.</span>ExpressionFactory _el_expressionfactory<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">private</span> volatile org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>InstanceManager _jsp_instancemanager<span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">public</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token operator">&lt;</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String<span class="token punctuation">,</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Long<span class="token operator">&gt;</span> <span class="token function">getDependants</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> _jspx_dependants<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">public</span> javax<span class="token punctuation">.</span>el<span class="token punctuation">.</span>ExpressionFactory <span class="token function">_jsp_getExpressionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_el_expressionfactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_el_expressionfactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          _el_expressionfactory <span class="token operator">=</span> _jspxFactory<span class="token punctuation">.</span><span class="token function">getJspApplicationContext</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getExpressionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> _el_expressionfactory<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">public</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>InstanceManager <span class="token function">_jsp_getInstanceManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>_jsp_instancemanager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_jsp_instancemanager <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          _jsp_instancemanager <span class="token operator">=</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>InstanceManagerFactory<span class="token punctuation">.</span><span class="token function">getInstanceManager</span><span class="token punctuation">(</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> _jsp_instancemanager<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">public</span> void <span class="token function">_jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">public</span> void <span class="token function">_jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">  <span class="token keyword">public</span> void <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest request<span class="token punctuation">,</span> <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse response<span class="token punctuation">)</span></span>
<span class="line">        throws java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">,</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span><span class="token function">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>PageContext pageContext<span class="token punctuation">;</span></span>
<span class="line">    javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpSession session <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext application<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletConfig config<span class="token punctuation">;</span></span>
<span class="line">    javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>JspWriter <span class="token keyword">out</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">final</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object page <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">    javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>JspWriter _jspx_out <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>PageContext _jspx_page_context <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">      response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;text/html; charset=UTF-8&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      pageContext <span class="token operator">=</span> _jspxFactory<span class="token punctuation">.</span><span class="token function">getPageContext</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span></span>
<span class="line">                <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token number">8192</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      _jspx_page_context <span class="token operator">=</span> pageContext<span class="token punctuation">;</span></span>
<span class="line">      application <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      config <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      session <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span> <span class="token operator">=</span> pageContext<span class="token punctuation">.</span><span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      _jspx_out <span class="token operator">=</span> <span class="token keyword">out</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>&quot;<span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE html PUBLIC \\&quot;<span class="token operator">-</span><span class="token comment">//W3C//DTD HTML 4.01 Transitional//EN\\&quot; \\&quot;http://www.w3.org/TR/html4/loose.dtd\\&quot;&gt;\\r\\n&quot;);</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;html&gt;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;head&gt;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;meta http-equiv=\\&quot;Content-Type\\&quot; content=\\&quot;text/html; charset=UTF-8\\&quot;&gt;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;title&gt;Insert title here&lt;/title&gt;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;/head&gt;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;body&gt;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\t&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;\\r&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token char">&#39;\\n&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>&#39;   &#39;<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line">      <span class="token comment">// 这是我们写的脚本</span></span>
<span class="line">      <span class="token function">testFun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;name:&quot;</span></span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;/body&gt;\\r\\n&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;&lt;/html&gt;&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Throwable t<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>t instanceof javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span>SkipPageException<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">out</span> <span class="token operator">=</span> _jspx_out<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">isCommitted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token keyword">out</span><span class="token punctuation">.</span><span class="token function">clearBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>_jspx_page_context <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> _jspx_page_context<span class="token punctuation">.</span><span class="token function">handlePageException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">else</span> <span class="token keyword">throw</span> new <span class="token function">ServletException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span></span>
<span class="line">      _jspxFactory<span class="token punctuation">.</span><span class="token function">releasePageContext</span><span class="token punctuation">(</span>_jspx_page_context<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>index_jsp这个类是继承org.apache.jasper.runtime.HttpJspBase这个类的，通过查看HttpJspBase源代码，可以知道HttpJspBase类是继承HttpServlet的，所以HttpJspBase类是一个Servlet，而index_jsp又是继承HttpJspBase类的，所以index_jsp类也是一个Servlet，所以当浏览器访问服务器上的index.jsp页面时，其实就是在访问index_jsp这个Servlet，index_jsp这个Servlet使用_jspService这个方法处理请求。</p><p>HttpJspBase源码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletConfig</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span><span class="token class-name">HttpJspPage</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token punctuation">.</span></span><span class="token class-name">JspFactory</span></span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>jasper<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span></span><span class="token class-name">Localizer</span></span><span class="token punctuation">;</span></span>
<span class="line"> </span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HttpJspBase</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token keyword">implements</span> <span class="token class-name">HttpJspPage</span><span class="token punctuation">{</span></span>
<span class="line">   </span>
<span class="line">    <span class="token keyword">protected</span> <span class="token class-name">HttpJspBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token class-name">ServletConfig</span> config<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> </span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token function">_jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token class-name">Localizer</span><span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token string">&quot;jsp.engine.info&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">_jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Entry point into service.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> </span>
<span class="line">    <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">_jspService</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">_jspInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">_jspDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"> </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">_jspService</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> </span>
<span class="line">                     <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> </span>
<span class="line">    <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、-jspservice方法" tabindex="-1"><a class="header-anchor" href="#_2、-jspservice方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81-jspservice%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>2、_jspService方法</span></a></h4><p>问题1：Jsp页面中的html排版标签是如何被发送到客户端的？</p><p>浏览器接收到的这些数据，都是在_jspService方法中使用如下的代码输出给浏览器的。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line"> out.write(&quot;&lt;html&gt;&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>问题2：Jsp页面中的java代码服务器是如何执行的？</p><p>在jsp中编写的java代码会被翻译到_jspService方法中去，当执行_jspService方法处理请求时，就会执行在jsp编写的java代码了，所以Jsp页面中的java代码服务器是通过调用_jspService方法处理请求时执行的。</p><h4 id="_3、jsp在服务器的执行流程" tabindex="-1"><a class="header-anchor" href="#_3、jsp在服务器的执行流程"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81jsp%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B" target="_blank" rel="noopener noreferrer">#</a>3、jsp在服务器的执行流程</span></a></h4><p><strong>第一次执行：</strong></p><ol><li>客户端通过电脑连接服务器，因为请求是动态的，所以所有的请求交给WEB容器来处理</li><li>在容器中找到需要执行的*.jsp文件</li><li>之后*.jsp文件通过转换变为*.java文件</li><li><em>.java文件经过编译后，形成</em>.class文件</li><li>最终服务器要执行形成的*.class文件</li></ol><p><strong>第二次执行：</strong></p><ol><li>因为已经存在了*.class文件，所以不再需要转换和编译的过程</li></ol><p><strong>修改后执行：</strong></p><ol><li>源文件已经被修改过了，所以需要重新转换，重新编译。</li></ol><h3 id="三、jsp指令" tabindex="-1"><a class="header-anchor" href="#三、jsp指令"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%89%E3%80%81jsp%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener noreferrer">#</a>三、JSP指令</span></a></h3><h4 id="_1、jsp指令标识的语法格式" tabindex="-1"><a class="header-anchor" href="#_1、jsp指令标识的语法格式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81jsp%E6%8C%87%E4%BB%A4%E6%A0%87%E8%AF%86%E7%9A%84%E8%AF%AD%E6%B3%95%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>1、JSP指令标识的语法格式</span></a></h4><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ 指令名  属性1 = &quot;属性1的值&quot; 属性2 = &quot;属性2的值&quot; ....%&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>指令名:用于指定指令名称 在JSP中包含page include taglib 这3种指令</li><li>属性: 用于指定指令属性名称 不同的指令包含不同的属性 在同一个指令中可以设置多个属性 各个属性之间用逗号或者空格隔开</li><li>属性值:用于指定属性的值</li></ul><p>注意点:</p><blockquote><p>指令标识&lt;%@%&gt;是一个完整的指令,不能够添加空格,但是便签中定义的属性与指令名之间是有空格的</p></blockquote><h4 id="_2、page指令" tabindex="-1"><a class="header-anchor" href="#_2、page指令"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81page%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener noreferrer">#</a>2、Page指令</span></a></h4><p>page指令是JSP页面中最常见的指令,用于定义整个JSP页面的相关属性</p><blockquote><p>语法格式</p></blockquote><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page  属性1 = &quot;属性1的值&quot; 属性2 = &quot;属性2的值&quot; ....%&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>page指令的相关属</p></blockquote><p><strong>language属性</strong></p><p>用于设置整个JSP页面的使用的语言,目前只支持JAVA语言,改属性默认值是JAVA</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page language=&quot;java&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>improt属性</strong></p><p>设置JSP导入的类包</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page improt=&quot;java.util.*&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>pageEcoding属性</strong></p><p>这种JSP页面的编码格式,也就是指定文件编码</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page pageEncoding=&quot;GBK&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>设置JSP页面的MIME类型和字符编码</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page contentType =&quot;text/html;charset=UTF-8&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>Sesssion属性</strong></p><p>设置页面是否使用HTTP的session会话对象.Boolen类型,默认值是true</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page session =&quot;false&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>session是JSP的内置对象之一</li></ul><p><strong>autoFlush属性</strong></p><p>设置JSP页面缓存满时,是否自动刷新缓存,默认值是:true, 如果这种为false,则当页面缓存满时就会抛出异常</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page autoFlush =&quot;false&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>isErorPage属性</strong></p><p>可以把当前页面设置成错误处理页面来处理另外jsp页面的错误</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page isErrorPage =&quot;true&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>errorPage属性</strong></p><p>指定当前jsp页面异常错误的另一个JSP页面,指定的JSP页面的isErrorPage属性必须为true,属性值是一个url字符串</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%@ page errorPage =&quot;errorPage.jsp&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3、include指令" tabindex="-1"><a class="header-anchor" href="#_3、include指令"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81include%E6%8C%87%E4%BB%A4" target="_blank" rel="noopener noreferrer">#</a>3、include指令</span></a></h4><p>include指令用于引入其它JSP页面，如果使用include指令引入了其它JSP页面，那么JSP引擎将把这两个JSP翻译成一个servlet。所以include指令引入通常也称之为静态引入。</p><p>语法：&lt;%@ include file=&quot;relativeURL&quot;%&gt;</p><p>file属性用于指定被引入文件的路径。路径以&quot;/&quot;开头，表示代表当前web应用。</p><p><strong>注意细节</strong>：</p><ol><li>被引入的文件必须遵循JSP语法。</li><li>被引入的文件可以使用任意的扩展名，即使其扩展名是html，JSP引擎也会按照处理jsp页面的方式处理它里面的内容，为了见明知意，JSP规范建议使用.jspf（JSP fragments(片段)）作为静态引入文件的扩展名。</li><li>由于使用include指令将会涉及到2个JSP页面，<strong>并会把2个JSP翻译成一个servlet</strong>，所以这2个JSP页面的指令不能冲突（除了pageEncoding和导包除外）。</li></ol><h3 id="四、jsp标签" tabindex="-1"><a class="header-anchor" href="#四、jsp标签"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E5%9B%9B%E3%80%81jsp%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener noreferrer">#</a>四、JSP标签</span></a></h3><h4 id="_1、-jsp标签分类" tabindex="-1"><a class="header-anchor" href="#_1、-jsp标签分类"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81-jsp%E6%A0%87%E7%AD%BE%E5%88%86%E7%B1%BB" target="_blank" rel="noopener noreferrer">#</a>1、 Jsp标签分类</span></a></h4><p>1）内置标签（动作标签）： 不需要在jsp页面导入标签</p><p>2）jstl标签： 需要在jsp页面中导入标签，这个后边我们单独讲</p><p>3）自定义标签 ： 开发者自行定义，需要在jsp页面导入标签</p><p>JSP标签也称之为Jsp Action(JSP动作)元素，它用于在Jsp页面中提供业务逻辑功能，避免在JSP页面中直接编写java代码，造成jsp页面难以维护。</p><h4 id="_2、-常用的内置标签" tabindex="-1"><a class="header-anchor" href="#_2、-常用的内置标签"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81-%E5%B8%B8%E7%94%A8%E7%9A%84%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener noreferrer">#</a>2、 常用的内置标签</span></a></h4><h5 id="_1-标签一-jsp-include" tabindex="-1"><a class="header-anchor" href="#_1-标签一-jsp-include"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E6%A0%87%E7%AD%BE%E4%B8%80-jsp-include" target="_blank" rel="noopener noreferrer">#</a><strong>（1）标签</strong>一&lt;jsp:include&gt;</span></a></h5><p>&lt;jsp:include&gt;标签用于把另外一个资源的输出内容插入进当前JSP页面的输出内容之中，这种在JSP页面执行时的引入方式称之为动态引入。</p><p>语法：\`\`</p><table><thead><tr><th>page</th><th>用于指定被引入资源的相对路径，它也可以通过执行一个表达式来获得。</th></tr></thead><tbody><tr><td>flush</td><td>指定在插入其他资源的输出内容时，是否先将当前JSP页面的已输出的内容刷新到客户端。</td></tr></tbody></table><p><strong>标签与include指令的区别：</strong></p><p>&lt;jsp:include&gt;标签是动态引入， &lt;jsp:include&gt;标签涉及到的2个JSP页面会被翻译成2个servlet，这2个servlet的内容在执行时进行合并。 而include指令是静态引入，涉及到的2个JSP页面会被翻译成一个servlet，其内容是在源文件级别进行合并。</p><h5 id="_2-标签-jsp-forward-和-jsp-param" tabindex="-1"><a class="header-anchor" href="#_2-标签-jsp-forward-和-jsp-param"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-%E6%A0%87%E7%AD%BE-jsp-forward-%E5%92%8C-jsp-param" target="_blank" rel="noopener noreferrer">#</a><strong>（2）标签</strong>&lt;jsp:forward&gt;和&lt;jsp:param&gt;</span></a></h5><p>&lt;jsp:forward&gt;标签用于把请求转发给另外一个资源（服务器跳转，地址不变）。</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line">&lt;%--使用jsp:forward标签进行请求转发--%&gt;</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>forward</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/index2.jsp<span class="token punctuation">&quot;</span></span> <span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>param</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10086<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>param</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10010<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>num2<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">jsp:</span>forward</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、jsp属性作用域" tabindex="-1"><a class="header-anchor" href="#五、jsp属性作用域"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%94%E3%80%81jsp%E5%B1%9E%E6%80%A7%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener noreferrer">#</a>五、JSP属性作用域</span></a></h3><p>JSP中提供了四种属性范围（四大域对象），如下：</p><ol><li><strong>当前页（pageContext）</strong>：一个属性只能在一个页面中取得，跳转到其他页面无法取得。</li><li><strong>一次服务器请求（request）</strong>：一个页面中设置的属性，只要经过了请求重定向之后的页面可以继续取得。</li><li><strong>一次会话（session）</strong>：一个用户设置的内容，只要是与此用户相关的页面都可以访问（一个会话表示一个人，这个人设置的东西只要这个人不走，就依然有效），关了浏览器就不见了。</li><li><strong>上下文中（application）</strong>：在整个服务器上设置的属性，所有人都可以访问。</li></ol><p>我们要知道的一点，对于域对象就像我们方法的作用域一样，我们把所有的变量都定义成全局的合适吗？全定义成局部的合适吗？显然是不合适，根据不同的场景选择不同的技术才是正确的。</p><p>在我们的web项目中，一个请求可能会被转发给多个页面，一次会话可能产生多个请求，一个应用上下文又会有多个会话，域对象解决的问题就是在对象传递中的一个作用域的问题。</p><h3 id="六、九大内置对象" tabindex="-1"><a class="header-anchor" href="#六、九大内置对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E5%85%AD%E3%80%81%E4%B9%9D%E5%A4%A7%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>六、九大内置对象</span></a></h3><p>九大内置对象，听起来特别唬人，我们也确实发现，在jsp中是可以直接使用某些对象的，那到底是为什么呢？</p><p>其实答案只有一个，我们在编译成servlet的时候就已经为我们准备好了这些对象，当然可以拿来即用啊：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013120147547.67c7684d.png" alt="image-20211013120147547"></p><h4 id="_1、-request-对象" tabindex="-1"><a class="header-anchor" href="#_1、-request-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81-request-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>1、 request 对象</span></a></h4><p>代表的是来自客户端的请求 , 客户端发送的请求封装在 request 对象中 , 通过它才能了解到用户的请求信息 , 然后作出响应 , 它是 HTTPServletRequest 的实例 , 作用域为 request ( 响应生成之前 )</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定属性的属性值</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置属性的属性值</span></span>
<span class="line"><span class="token class-name">Enumeration</span> <span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回所有可以用属性名的枚举</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定name的参数值</span></span>
<span class="line"><span class="token class-name">Enumeration</span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回可用参数名的枚举</span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回包含参数name的所有制的数组</span></span>
<span class="line"><span class="token class-name">ServletInputStream</span> <span class="token function">geetInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 得到请求体中一行的二进制流</span></span>
<span class="line"><span class="token class-name">BufferedReader</span> <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回解码过了的请求体</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getServerName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回接收请求的服务器主机名</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getServerPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回服务器接收此请求所用的端口号</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getRemoteAddr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回发送请求的客户端的IP地址</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getRemoteHost</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回发送请求的客户端主机名</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个虚拟路径的真实路径</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回字符编码方式</span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">geContentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回请求体的长度 ( 字节数 )</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回请求体的MIME类型</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getProtocol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回请求用的协议类型以及版本号</span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回请求用的协议名称( 例如 : http  https  ftp )</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、response-对象" tabindex="-1"><a class="header-anchor" href="#_2、response-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81response-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>2、response 对象</span></a></h4><p>对象代表的是对客户端的响应 , 也就是说可以通过 response 对象来组织发送到客户端的数据 ; 但是由于组织方式比较底层 , 所以不建议初学者使用 , 需要向客户端发送文字时直接使用 ; 它是 HttpServletResponse 的实例 ; 作用域为 page ( 页面执行期 )</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">getCharacterEncoding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回响应用的是哪种字符编码</span></span>
<span class="line"><span class="token class-name">ServletOutputStream</span> <span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回响应的一个二进制输出流</span></span>
<span class="line"><span class="token class-name">PrintWriter</span> <span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回可以向客户端输出字符的一个对象</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置响应头长度</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置响应的MIME类型</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重新定向客户端的请求</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、-session-对象" tabindex="-1"><a class="header-anchor" href="#_3、-session-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81-session-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>3、 session 对象</span></a></h4><p>指的是客户端与服务器的一次会话 , 从客户连接到服务器的一个 WebApplication 开始 , 直到客户端与服务器断开连接为止 ; 它是 HTTPSession 类的实例 , 作用域为 session ( 会话期 )</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">long</span> <span class="token function">getCreationTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回SESSION创建时间 </span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回SESSION创建时JSP引擎为它设的惟一ID号 </span></span>
<span class="line"><span class="token keyword">long</span> <span class="token function">getLastAccessedTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回此SESSION里客户端最近一次请求时间 </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回两次请求间隔多长时间此SESSION被取消(ms) </span></span>
<span class="line"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getValueNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个包含此SESSION中所有可用属性的数组 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">invalidate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取消SESSION，使SESSION不可用 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、out-对象" tabindex="-1"><a class="header-anchor" href="#_4、out-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81out-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>4、out 对象</span></a></h4><p>out 对象是 JspWriter 类的实例,是向客户端输出内容常用的对象 ; 作用域为 page ( 页面执行期 )</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清除缓冲区的内容 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">clearBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清除缓冲区的当前内容 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 清空流 </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getBufferSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回缓冲区以字节数的大小，如不设缓冲区则为0 </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getRemaining</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回缓冲区还剩余多少可用 </span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">isAutoFlush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回缓冲区满时，是自动清空还是抛出异常 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 关闭输出流 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、page-对象" tabindex="-1"><a class="header-anchor" href="#_5、page-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_5%E3%80%81page-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>5、page 对象</span></a></h4><p>page 对象就是指向当前 JSP 页面本身 , 有点像类中的 this 指针 , 它是 Object 类的实例 ; page 对象代表了正在运行的由 JSP 文件产生的类对象 , 不建议初学者使用 ; 作用域为 page ( 页面执行期 )</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">class</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回此Object的类 </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回此Object的hash码 </span></span>
<span class="line"><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 判断此Object是否与指定的Object对象相等 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把此Object拷贝到指定的Object对象中 </span></span>
<span class="line"><span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 克隆此Object对象 </span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把此Object对象转换成String类的对象 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 唤醒一个等待的线程 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 唤醒所有等待的线程 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token keyword">int</span> timeout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使一个线程处于等待直到timeout结束或被唤醒 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使一个线程处于等待直到被唤醒 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">enterMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对Object加锁 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">exitMonitor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 对Object开锁</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6、application-对象" tabindex="-1"><a class="header-anchor" href="#_6、application-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_6%E3%80%81application-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>6、application 对象</span></a></h4><p>实现了用户间数据的共享 , 可存放全局变量 ; 它开始于服务器的启动 , 直到服务器的关闭 , 在此期间 , 此对象将一直存在 ; 这样在用户的前后连接或不同用户之间的连接中 , 可以对此对象的同一属性进行操作 ; 在任何地方对此对象属性的操作 , 都将影响到其他用户对此的访问 ; 服务器的启动和关闭决定了 application 对象的生命 ; 它是 ServletContext 类的实例 ; 作用域为 application</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回给定名的属性值 </span></span>
<span class="line"><span class="token class-name">Enumeration</span> <span class="token function">getAttributeNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回所有可用属性名的枚举 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设定属性的属性值 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除一属性及其属性值 </span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getServerInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回JSP(SERVLET)引擎名及版本号 </span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一虚拟路径的真实路径 </span></span>
<span class="line"><span class="token class-name">ServletContext</span> <span class="token function">getContext</span><span class="token punctuation">(</span><span class="token class-name">String</span> uripath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定WebApplication的application对象 </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getMajorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回服务器支持的Servlet API的最大版本号 </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getMinorVersion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回服务器支持的Servlet API的最大版本号 </span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getMimeType</span><span class="token punctuation">(</span><span class="token class-name">String</span> file<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定文件的MIME类型 </span></span>
<span class="line"><span class="token class-name">URL</span> <span class="token function">getResource</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定资源(文件及目录)的URL路径 </span></span>
<span class="line"><span class="token class-name">InputStream</span> <span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定资源的输入流 </span></span>
<span class="line"><span class="token class-name">RequestDispatcher</span> <span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token class-name">String</span> uripath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定资源的RequestDispatcher对象</span></span>
<span class="line"><span class="token class-name">Servlet</span> <span class="token function">getServlet</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定名的Servlet</span></span>
<span class="line"><span class="token class-name">Enumeration</span> <span class="token function">getServlets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回所有Servlet的枚举</span></span>
<span class="line"><span class="token class-name">Enumeration</span> <span class="token function">getServletNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回所有Servlet名的枚举</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把指定消息写入Servlet的日志文件</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> exception<span class="token punctuation">,</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把指定异常的栈轨迹及错误消息写入Servlet的日志文件</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">,</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 把栈轨迹及给出的Throwable异常的说明信息 写入Servlet的日志文件</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_7、-pagecontext-对象" tabindex="-1"><a class="header-anchor" href="#_7、-pagecontext-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_7%E3%80%81-pagecontext-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>7、 pageContext 对象</span></a></h4><p>提供了对 JSP 页面内所有的对象及名字空间的访问 , 也就是说它可以访问到本页所在的 session , 也可以取本页面所在的 application 的某一属性值 , 它相当于页面中所有功能的集大成者。</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">JspWriter</span> <span class="token function">getOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前客户端响应被使用的JspWriter流(out) </span></span>
<span class="line"><span class="token class-name">HttpSession</span> <span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前页中的HttpSession对象(session) </span></span>
<span class="line"><span class="token class-name">Object</span> <span class="token function">getPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前页的Object对象(page) </span></span>
<span class="line"><span class="token class-name">ServletRequest</span> <span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前页的ServletRequest对象(request) </span></span>
<span class="line"><span class="token class-name">ServletResponse</span> <span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前页的ServletResponse对象(response) </span></span>
<span class="line"><span class="token class-name">Exception</span> <span class="token function">getException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前页的Exception对象(exception) </span></span>
<span class="line"><span class="token class-name">ServletConfig</span> <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前页的ServletConfig对象(config) </span></span>
<span class="line"><span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回当前页的ServletContext对象(application)</span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> attribute<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置属性及属性值 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span><span class="token keyword">int</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在指定范围内设置属性及属性值 </span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 取属性的值 </span></span>
<span class="line"><span class="token class-name">Object</span> <span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在指定范围内取属性的值 </span></span>
<span class="line"><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">findAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 寻找一属性,返回起属性值或NULL </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除某属性 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在指定范围删除某属性 </span></span>
<span class="line"><span class="token keyword">int</span> <span class="token function">getAttributeScope</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回某属性的作用范围 </span></span>
<span class="line"><span class="token class-name">Enumeration</span> <span class="token function">getAttributeNamesInScope</span><span class="token punctuation">(</span><span class="token keyword">int</span> scope<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回指定范围内可用的属性名枚举 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 释放pageContext所占用的资源 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">forward</span><span class="token punctuation">(</span><span class="token class-name">String</span> relativeUrlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使当前页面重导到另一页面 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">String</span> relativeUrlPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 在当前位置包含另一文件 </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_8、config-对象" tabindex="-1"><a class="header-anchor" href="#_8、config-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_8%E3%80%81config-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>8、config 对象</span></a></h4><p>config 对象是在一个 Servlet 初始化时 , JSP 引擎向它传递信息用的 , 此信息包括 Servlet 初始化时所要用到的参数 ( 通过属性名和属性值构成 ) 以及服务器的有关信息 ( 通过传递一个 ServletContext 对象 ) ; 作用域为 page</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">ServletContext</span> <span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回含有服务器相关信息的ServletContext对象 </span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">getInitParameter</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回初始化参数的值 </span></span>
<span class="line"><span class="token class-name">Enumeration</span> <span class="token function">getInitParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回Servlet初始化所需所有参数的枚举</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_9、exception-对象" tabindex="-1"><a class="header-anchor" href="#_9、exception-对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_9%E3%80%81exception-%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>9、exception 对象</span></a></h4><p>这是一个例外对象 , 当一个页面在运行过程中发生了例外 , 就产生这个对象 ; 如果一个JSP页面要应用此对象 , 就必须把 isErrorPage 设为true , 否则无法编译 ; 它实际上是 Throwable 的对象 ; 作用域为 page。</p><p><strong>常用方法：</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回描述异常的消息 </span></span>
<span class="line"><span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回关于异常的简短描述消息 </span></span>
<span class="line"><span class="token keyword">void</span> <span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显示异常及其栈轨迹 </span></span>
<span class="line"><span class="token class-name">Throwable</span> <span class="token class-name">FillInStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 重写异常的执行栈轨迹</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_10、总结" tabindex="-1"><a class="header-anchor" href="#_10、总结"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_10%E3%80%81%E6%80%BB%E7%BB%93" target="_blank" rel="noopener noreferrer">#</a>10、总结</span></a></h4><table><thead><tr><th>对象名</th><th>描述</th><th>类型</th><th>作用域</th></tr></thead><tbody><tr><td>request</td><td>请求对象</td><td>javax.servlet.ServletRequest</td><td>Request</td></tr><tr><td>response</td><td>响应对象</td><td>javax.servlet.SrvletResponse</td><td>Page</td></tr><tr><td>pageContext</td><td>页面上下文对象</td><td>javax.servlet.jsp.PageContext</td><td>Page</td></tr><tr><td>session</td><td>会话对象</td><td>javax.servlet.http.HttpSession</td><td>Session</td></tr><tr><td>application</td><td>应用程序对象</td><td>javax.servlet.ServletContext</td><td>Application</td></tr><tr><td>out</td><td>输出对象</td><td>javax.servlet.jsp.JspWriter</td><td>Page</td></tr><tr><td>config</td><td>配置对象</td><td>javax.servlet.ServletConfig</td><td>Page</td></tr><tr><td>page</td><td>页面对象</td><td>javax.lang.Object</td><td>Page</td></tr><tr><td>exception</td><td>例外对象</td><td>javax.lang.Throwable</td><td>Page</td></tr></tbody></table><h2 id="第六章-el表达式和jstl标签库" tabindex="-1"><a class="header-anchor" href="#第六章-el表达式和jstl标签库"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E5%85%AD%E7%AB%A0-el%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%92%8Cjstl%E6%A0%87%E7%AD%BE%E5%BA%93" target="_blank" rel="noopener noreferrer">#</a>第六章 EL表达式和JSTL标签库</span></a></h2><h3 id="一、el表达式" tabindex="-1"><a class="header-anchor" href="#一、el表达式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81el%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>一、EL表达式</span></a></h3><h4 id="_1、特点" tabindex="-1"><a class="header-anchor" href="#_1、特点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E7%89%B9%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>1、特点</span></a></h4><p>（1）是一个由java开发的工具包</p><p>（2）用于从特定域对象中读取数据，不能向域对象中写入。</p><p>（3）EL工具包自动存在Tomcat的lib中（el-api.jar），开发是可以直接使用，无需其他额外的包。</p><p>（4）标准格式 ： \${域对象别名.关键字} 到指定的域中获取相应关键字的内容，并将其写入到响应体。</p><h4 id="_2、域对象" tabindex="-1"><a class="header-anchor" href="#_2、域对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81%E5%9F%9F%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>2、域对象</span></a></h4><table><thead><tr><th>jsp</th><th>el</th><th>描述</th></tr></thead><tbody><tr><td>application</td><td>applicationScope</td><td>全局作用域对象</td></tr><tr><td>session</td><td>sessionScope</td><td>会话作用域</td></tr><tr><td>request</td><td>requestScope</td><td>请求作用域对象</td></tr><tr><td>pageContext</td><td>pageScope</td><td>当前页作用域对象</td></tr></tbody></table><p><strong>注：使用时可以省略域对象别名</strong></p><p>默认查找顺序： pageScope -&gt; requestScope -&gt; sessionScope -&gt; applicationScope</p><p><strong>最好只在pageScope中省略</strong></p><p>注：对应案例</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">    &lt;title&gt;jsp&lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">  &lt;%</span>
<span class="line">    application.setAttribute(&quot;name&quot;,&quot;application&quot;);</span>
<span class="line">    session.setAttribute(&quot;name&quot;,&quot;session&quot;);</span>
<span class="line">    request.setAttribute(&quot;name&quot;,&quot;request&quot;);</span>
<span class="line">    pageContext.setAttribute(&quot;name&quot;,&quot;pageContext&quot;);</span>
<span class="line">  %&gt;</span>
<span class="line">  &lt;br&gt;--------------------使用java语言---------------------------&lt;br&gt;</span>
<span class="line">  application中的值：&lt;%= application.getAttribute(&quot;name&quot;) %&gt; &lt;br&gt;</span>
<span class="line">  session中的值：&lt;%= session.getAttribute(&quot;name&quot;) %&gt; &lt;br&gt;</span>
<span class="line">  request中的值：&lt;%= request.getAttribute(&quot;name&quot;) %&gt; &lt;br&gt;</span>
<span class="line">  pageContext中的值：&lt;%= pageContext.getAttribute(&quot;name&quot;) %&gt; &lt;br&gt;</span>
<span class="line"></span>
<span class="line">  &lt;br&gt;--------------------使用EL表达式---------------------------&lt;br&gt;</span>
<span class="line">  application中的值：\${applicationScope.name} &lt;br&gt;</span>
<span class="line">  session中的值：\${sessionScope.name} &lt;br&gt;</span>
<span class="line">  request中的值：\${requestScope.name} &lt;br&gt;</span>
<span class="line">  pageContext中的值：\${pageScope.name} &lt;br&gt;</span>
<span class="line"></span>
<span class="line">  &lt;br&gt;----------------使用EL表达式,省略域对象---------------------&lt;br&gt;</span>
<span class="line">  application中的值：\${name} &lt;br&gt;</span>
<span class="line"></span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、支持的运算" tabindex="-1"><a class="header-anchor" href="#_3、支持的运算"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E6%94%AF%E6%8C%81%E7%9A%84%E8%BF%90%E7%AE%97" target="_blank" rel="noopener noreferrer">#</a>3、支持的运算</span></a></h4><p>（1）数学运算</p><p>（2）比较运算 &gt; gt &lt; lt &gt;= ge &lt;= le == eq != !=</p><p>（3）逻辑预算 &amp;&amp; || ！</p><p>注：对应案例</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">    &lt;title&gt;EL运算&lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">&lt;%</span>
<span class="line">    request.setAttribute(&quot;num1&quot;,&quot;12&quot;);</span>
<span class="line">    request.setAttribute(&quot;num2&quot;,&quot;14&quot;);</span>
<span class="line"></span>
<span class="line">    application.setAttribute(&quot;flag1&quot;,true);</span>
<span class="line">    application.setAttribute(&quot;flag2&quot;,false);</span>
<span class="line">%&gt;</span>
<span class="line">&lt;br&gt;--------------------使用java语言---------------------------&lt;br&gt;</span>
<span class="line">&lt;%</span>
<span class="line">    String num1 = (String)request.getAttribute(&quot;num1&quot;);</span>
<span class="line">    String num2 = (String)request.getAttribute(&quot;num2&quot;);</span>
<span class="line">    int num3 = Integer.parseInt(num1) + Integer.parseInt(num2);</span>
<span class="line">    </span>
<span class="line">    boolean flag1 = (Boolean) application.getAttribute(&quot;flag1&quot;);</span>
<span class="line">    boolean flag2 = (Boolean) application.getAttribute(&quot;flag2&quot;);</span>
<span class="line">    boolean flag3 = flag1 &amp;&amp; flag2;</span>
<span class="line">    //输出方式一</span>
<span class="line">    out.write(Boolean.toString(flag3));</span>
<span class="line">%&gt;</span>
<span class="line">&lt;!-- 输出方式二 --&gt;</span>
<span class="line">&lt;h1&gt;&lt;%=num3%&gt;&lt;/h1&gt;</span>
<span class="line"></span>
<span class="line">&lt;br&gt;--------------------使用EL表达式--------------------------&lt;br&gt;</span>
<span class="line">&lt;h1&gt;\${ requestScope.num1 + requestScope.num2 }&lt;/h1&gt;</span>
<span class="line">&lt;h1&gt;\${ requestScope.num1 &gt; requestScope.num2 }&lt;/h1&gt;</span>
<span class="line">&lt;h1&gt;\${ applicationScope.flag1 &amp;&amp; applicationScope.flag2 }&lt;/h1&gt;</span>
<span class="line"></span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、el表达式的缺陷" tabindex="-1"><a class="header-anchor" href="#_4、el表达式的缺陷"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81el%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E7%BC%BA%E9%99%B7" target="_blank" rel="noopener noreferrer">#</a>4、EL表达式的缺陷</span></a></h4><p>（1）只能读取域对象中的值，不能写入</p><p>（2）不支持if判断和控制语句</p><h3 id="二、jstl标签工具类" tabindex="-1"><a class="header-anchor" href="#二、jstl标签工具类"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81jstl%E6%A0%87%E7%AD%BE%E5%B7%A5%E5%85%B7%E7%B1%BB" target="_blank" rel="noopener noreferrer">#</a>二、JSTL标签工具类</span></a></h3><h4 id="_1、基本介绍" tabindex="-1"><a class="header-anchor" href="#_1、基本介绍"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener noreferrer">#</a>1、基本介绍</span></a></h4><p>（1） JSP Standrad Tag Lib jsp标准标签库</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line">核心标签      对java在jsp上基本功能进行封装，如 if while等    主要学习</span>
<span class="line">sql标签      JDBC在jsp上的使用</span>
<span class="line">xml标签      Dom4j在jsp上的使用</span>
<span class="line">format标签   jsp文件格式转换</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）使用原因：<strong>使用简单，且在JSP编程当中要求尽量不出现java代码。</strong></p><h4 id="_2、使用方式" tabindex="-1"><a class="header-anchor" href="#_2、使用方式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>2、使用方式</span></a></h4><p>（1）tomcat10 以前的导入依赖的jar包 jstl.jar standard.jar</p><p>下载地址http://archive.apache.org/dist/jakarta/taglibs/standard/binaries/</p><p>tomcat10以后使用 jakarta.servlet.jsp.jstl-2.0.0.jar</p><p>当然在tomcat10中也有这两个jar包，找到tomcat10中的例子程序：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">D:\\javaweb\\tomcat\\apache-tomcat-10.0.11\\apache-tomcat-10.0.11\\webapps\\examples\\WEB-INF\\lib</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013140248426.55a48733.png" alt="image-20211013140248426"></p><p>（2）在jsp中引入JSTL的core包依赖约束</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_3、重要标签的使用" tabindex="-1"><a class="header-anchor" href="#_3、重要标签的使用"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E9%87%8D%E8%A6%81%E6%A0%87%E7%AD%BE%E7%9A%84%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>3、重要标签的使用</span></a></h4><h5 id="_1-c-set" tabindex="-1"><a class="header-anchor" href="#_1-c-set"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-c-set" target="_blank" rel="noopener noreferrer">#</a>（1） &lt;c:set&gt;</span></a></h5><p>在JSP文件上设置域对象中的共享数据</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span>
<span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot;%&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">    &lt;title&gt;  c:set  &lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">    &lt;body&gt;</span>
<span class="line">        &lt;!--</span>
<span class="line">        相当于</span>
<span class="line">        &lt;%--  &lt;%   --%&gt;</span>
<span class="line">        &lt;%--   request.setAttribute(&quot;name&quot;,&quot;zhangsan&quot;);--%&gt;</span>
<span class="line">        &lt;%--  %&gt;  --%&gt;</span>
<span class="line">        --&gt;</span>
<span class="line">        &lt;c:set scope=&quot;request&quot; var=&quot;name&quot; value=&quot;zhangsan&quot; /&gt;</span>
<span class="line">        通过JSTL标签添加的作用域中的值：\${requestScope.name}   &lt;br&gt;</span>
<span class="line">        &lt;c:set scope=&quot;application&quot; var=&quot;name&quot; value=&quot;lisi&quot; /&gt;</span>
<span class="line">        通过JSTL标签添加的作用域中的值：\${applicationScope.name}   &lt;br&gt;</span>
<span class="line">        &lt;c:set scope=&quot;request&quot; var=&quot;name&quot; value=&quot;wangwu&quot; /&gt;</span>
<span class="line">        通过JSTL标签添加的作用域中的值：\${requestScope.name}   &lt;br&gt;</span>
<span class="line">        &lt;c:set scope=&quot;page&quot; var=&quot;name&quot; value=&quot;zhaoliu&quot; /&gt;</span>
<span class="line">        通过JSTL标签添加的作用域中的值：\${pageScope.name}   &lt;br&gt;</span>
<span class="line">    &lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-c-if" tabindex="-1"><a class="header-anchor" href="#_2-c-if"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-c-if" target="_blank" rel="noopener noreferrer">#</a>（2）&lt;c:if &gt;</span></a></h5><p>控制哪些内容能够输出到响应体</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span>
<span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">    &lt;title&gt; c:if &lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">    &lt;c:set scope=&quot;page&quot; var=&quot;age&quot; value=&quot;20&quot;/&gt;</span>
<span class="line">    &lt;br&gt;------------------------------使用java语言-------------------------------------&lt;br&gt;</span>
<span class="line">    &lt;%</span>
<span class="line">        if( Integer.parseInt((String)pageContext.getAttribute(&quot;age&quot;)) &gt;= 18 ){</span>
<span class="line">    %&gt;</span>
<span class="line">    输入：欢迎光临！</span>
<span class="line">    &lt;%  } else { %&gt;</span>
<span class="line">    输入：未满十八，不准入内！</span>
<span class="line">    &lt;%  }  %&gt;</span>
<span class="line">    &lt;br&gt;------------------------------使用JSTL标签-------------------------------------&lt;br&gt;</span>
<span class="line"></span>
<span class="line">    &lt;c:if test=&quot;\${ age ge 18 }&quot;&gt;</span>
<span class="line">        输入：欢迎光临！</span>
<span class="line">    &lt;/c:if&gt;</span>
<span class="line">    &lt;c:if test=&quot;\${ age lt 18 }&quot;&gt;</span>
<span class="line">        输入：未满十八，不准入内！</span>
<span class="line">    &lt;/c:if&gt;</span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-c-choose" tabindex="-1"><a class="header-anchor" href="#_3-c-choose"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-c-choose" target="_blank" rel="noopener noreferrer">#</a>（3）&lt;c:choose&gt;</span></a></h5><p>在jsp中进行多分支判断，决定哪个内容写入响应体</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span>
<span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">    &lt;title&gt; c:choose &lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">    &lt;c:set scope=&quot;page&quot; var=&quot;age&quot; value=&quot;6&quot;/&gt;</span>
<span class="line">    &lt;br&gt;------------------------------使用java语言-------------------------------------&lt;br&gt;</span>
<span class="line">    &lt;%</span>
<span class="line">        if( Integer.parseInt((String)pageContext.getAttribute(&quot;age&quot;)) == 18 ){</span>
<span class="line">    %&gt;</span>
<span class="line">    输入：您今年成年了</span>
<span class="line">    &lt;%  } else if( Integer.parseInt((String)pageContext.getAttribute(&quot;age&quot;)) &gt; 18 ){ %&gt;</span>
<span class="line">    输入：您已经成年了</span>
<span class="line">    &lt;%  }  else {%&gt;</span>
<span class="line">    输出：您还是个孩子</span>
<span class="line">    &lt;% } %&gt;</span>
<span class="line">    &lt;br&gt;------------------------------使用JSTL标签-------------------------------------&lt;br&gt;</span>
<span class="line"></span>
<span class="line">    &lt;c:choose&gt;</span>
<span class="line">        &lt;c:when test=&quot;\${age eq 18}&quot;&gt;</span>
<span class="line">            输入：您今年成年了</span>
<span class="line">        &lt;/c:when&gt;</span>
<span class="line">        &lt;c:when test=&quot;\${age gt 18}&quot;&gt;</span>
<span class="line">            输入：您已经成年了</span>
<span class="line">        &lt;/c:when&gt;</span>
<span class="line">        &lt;c:otherwise&gt;</span>
<span class="line">            输入：您还是个孩子</span>
<span class="line">        &lt;/c:otherwise&gt;</span>
<span class="line">    &lt;/c:choose&gt;</span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4-c-foreach" tabindex="-1"><a class="header-anchor" href="#_4-c-foreach"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4-c-foreach" target="_blank" rel="noopener noreferrer">#</a>（4）&lt;c:forEach&gt;</span></a></h5><p>循环遍历</p><p>使用方式</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;c:forEach var=&quot;申明循环变量的名称&quot; begin=&quot;初始化循环变量&quot; </span>
<span class="line">           end=&quot;循环变量可以接受的最大值&quot; step=&quot;循环变量的递增或递减值&quot;&gt;</span>
<span class="line">    *** step属性可以不写，默认递增1</span>
<span class="line">    *** 循环变量默认保存在pageContext中</span>
<span class="line">&lt;/c:forEach&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例子</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page import=&quot;com.zn.Student&quot; %&gt;</span>
<span class="line">&lt;%@ page import=&quot;java.util.List&quot; %&gt;</span>
<span class="line">&lt;%@ page import=&quot;java.util.ArrayList&quot; %&gt;</span>
<span class="line">&lt;%@ page import=&quot;java.util.Map&quot; %&gt;</span>
<span class="line">&lt;%@ page import=&quot;java.util.HashMap&quot; %&gt;</span>
<span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span>
<span class="line">&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">    &lt;title&gt; c:forEach &lt;/title&gt;</span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">    &lt;%</span>
<span class="line">        pageContext.setAttribute(&quot;students&quot;,new ArrayList(){{</span>
<span class="line">            add(new Student(&quot;s1&quot;,&quot;zhangsan&quot;,16));</span>
<span class="line">            add(new Student(&quot;s2&quot;,&quot;lisi&quot;,19));</span>
<span class="line">            add(new Student(&quot;s3&quot;,&quot;wangwu&quot;,15));</span>
<span class="line">        }});</span>
<span class="line">        pageContext.setAttribute(&quot;stuMap&quot;, new HashMap(){{</span>
<span class="line">            put(&quot;m1&quot;,new Student(&quot;s1&quot;,&quot;zhangsan&quot;,16));</span>
<span class="line">            put(&quot;m2&quot;,new Student(&quot;s2&quot;,&quot;lisi&quot;,18));</span>
<span class="line">            put(&quot;m3&quot;,new Student(&quot;s3&quot;,&quot;wangwu&quot;,15));</span>
<span class="line">        }});</span>
<span class="line">    %&gt;</span>
<span class="line">    &lt;br&gt;------------------------使用java语言------------------------------&lt;br&gt;</span>
<span class="line">    &lt;table&gt;</span>
<span class="line">        &lt;tr&gt;&lt;td&gt;学号&lt;/td&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;/tr&gt;</span>
<span class="line">        &lt;%</span>
<span class="line">            List&lt;Student&gt; stus =            (ArrayList&lt;Student&gt;)pageContext.getAttribute(&quot;students&quot;);</span>
<span class="line">            for (int i = 0; i &lt; stus.size(); i++) {</span>
<span class="line">        %&gt;</span>
<span class="line">          &lt;tr&gt;&lt;td&gt;&lt;%=stus.get(i).getSid()%&gt;&lt;/td&gt;</span>
<span class="line">              &lt;td&gt;&lt;%=stus.get(i).getName()%&gt;&lt;/td&gt;</span>
<span class="line">              &lt;td&gt;&lt;%=stus.get(i).getAge()%&gt;&lt;/td&gt;</span>
<span class="line">          &lt;/tr&gt;</span>
<span class="line">        &lt;% } %&gt;</span>
<span class="line">    &lt;/table&gt;</span>
<span class="line">    </span>
<span class="line">    &lt;br&gt;----------------------使用JSTL标签读取list-----------------------&lt;br&gt;</span>
<span class="line">    &lt;table&gt;</span>
<span class="line">        &lt;tr&gt;&lt;td&gt;学号&lt;/td&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;/tr&gt;</span>
<span class="line">        &lt;c:forEach var=&quot;student&quot; items=&quot;\${students}&quot;&gt;</span>
<span class="line">        &lt;tr&gt;&lt;td&gt;\${student.sid}&lt;/td&gt;</span>
<span class="line">            &lt;td&gt;\${student.name}&lt;/td&gt;</span>
<span class="line">            &lt;td&gt;\${student.age}&lt;/td&gt;</span>
<span class="line">        &lt;/tr&gt;</span>
<span class="line">        &lt;/c:forEach&gt;</span>
<span class="line">    &lt;/table&gt;</span>
<span class="line"></span>
<span class="line">    &lt;br&gt;---------------------使用JSTL标签读取map------------------------&lt;br&gt;</span>
<span class="line">    &lt;table&gt;</span>
<span class="line">        &lt;tr&gt;&lt;td&gt;学号&lt;/td&gt;&lt;td&gt;姓名&lt;/td&gt;&lt;td&gt;年龄&lt;/td&gt;&lt;/tr&gt;</span>
<span class="line">        &lt;c:forEach var=&quot;student&quot; items=&quot;\${stuMap}&quot;&gt;</span>
<span class="line">            &lt;tr&gt;</span>
<span class="line">                &lt;td&gt;\${student.key}&lt;/td&gt;</span>
<span class="line">                &lt;td&gt;\${student.value.sid}&lt;/td&gt;</span>
<span class="line">                &lt;td&gt;\${student.value.name}&lt;/td&gt;</span>
<span class="line">                &lt;td&gt;\${student.value.age}&lt;/td&gt;</span>
<span class="line">            &lt;/tr&gt;</span>
<span class="line">        &lt;/c:forEach&gt;</span>
<span class="line">    &lt;/table&gt;</span>
<span class="line"></span>
<span class="line">    &lt;br&gt;--------------使用JSTL标签读取指定for循环-----------------------&lt;br&gt;</span>
<span class="line">    &lt;select&gt;</span>
<span class="line">      &lt;c:forEach var=&quot;item&quot; begin=&quot;1&quot; end=&quot;10&quot; step=&quot;1&quot;&gt;</span>
<span class="line">          &lt;option&gt; \${item} &lt;/option&gt;</span>
<span class="line">      &lt;/c:forEach&gt;</span>
<span class="line">    &lt;/select&gt;</span>
<span class="line"></span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中使用的java对象：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> sid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getSid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> sid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSid</span><span class="token punctuation">(</span><span class="token class-name">String</span> sid<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> sid<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>sid <span class="token operator">=</span> sid<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、路径问题" tabindex="-1"><a class="header-anchor" href="#三、路径问题"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%89%E3%80%81%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener noreferrer">#</a>三、路径问题</span></a></h3><p>在我们表示一个资源的位置的时候通常有两种方式，一个是绝对路径，一个是相对路径，我们学习html的时候已经学习过，今天重新回顾一下。</p><ol><li>绝对路径：从根目录为起点到某一个目录的路径； /C://aa/bb/a.txt</li><li>相对路径：从一个目录为起点到另外一个的目录的路径。 ./b.txt b.txt</li></ol><p>同样我们获取一个网络资源的时候，一样可以使用这两种方式，使用绝对路径也就是url，我们就不必重新说了，但是使用相对路径的时候，我们需要掌握以下两个知识点。</p><ol><li>站点的根目录：浏览器而言，它的根目录就是站点根目录，可能是你磁盘上的任意一个文件夹，此时一个urlhttp://localhost:9999/可以映射到这个文件夹，这就代表了一个站点的根目录。</li><li>项目的根目录：对于咱们的工程而言，服务端的根目录是项目根目录，其实在tomcat中，一个app就是一个独立的文件夹，相对于站点根目录，项目的根目录多了一个app的名字： http://localhost:9999/study01/。</li></ol><p><code>/</code>一般是指代某种情况下的根路径，在前端使用就指代站点根路径，在服务器中就是项目跟根路径。</p><p>所以一般情况下，</p><ul><li>绝对路径是以/开头或者使用整体的url。</li><li>【重要】如果是在浏览器中访问就是站点根目录，如果是在java项目代码中使用就指项目根目录。</li><li>相对路径使用<code>./</code>或者<code>../</code>或者文件名开头，其中<code>./</code>代表当前文件夹，<code>../</code>代表上级文件夹。</li></ul><p>以下几个场景中我们使用绝对路径需要注意：</p><p>1、在服务端进行请求转发，因为转发的过程在服务端进行，所以不需要加contextPath。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">req.getRequestDispatcher(&quot;/WEB-INF/pages/error.jsp&quot;).forward(req,resp);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2、在服务端进行重定向，大家要明白一点，重定向其实是在浏览器中具体执行的，所以必须加contextPath。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">response.sendRedirect(request.getContextPath() + &quot;/login.jsp&quot;);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3、在浏览器端访问一个新的地址。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/first_web/pages/index.jsp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>前往主页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>4、在浏览器中访问静态资源</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/first_web/static/js/index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>以下是我们通常的处理方案：</p><p>1、在jsp中定义好我们的basePath，这个路径是带有contextPath的。</p><p>2、在Head中指定， <code>&lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt; </code>。</p><p>3、在具体的地址处使用相对于contextPath的路径。</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;%@ page language=&quot;java&quot; import=&quot;java.util.*&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span>
<span class="line">&lt;%</span>
<span class="line">   String path = request.getContextPath();</span>
<span class="line">   String basePath = request.getScheme()+&quot;://&quot;+request.getServerName()+&quot;:&quot;+request.getServerPort()+path+&quot;/&quot;;</span>
<span class="line">%&gt;</span>
<span class="line">&lt;html&gt;</span>
<span class="line">&lt;head&gt;</span>
<span class="line">   &lt;title&gt;image调用&lt;/title&gt;</span>
<span class="line">   &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;   </span>
<span class="line">   &lt;base href=&quot;&lt;%=basePath%&gt;&quot;&gt; </span>
<span class="line">&lt;/head&gt;</span>
<span class="line">&lt;body&gt;</span>
<span class="line">   &lt;h1&gt;图片访问&lt;/h1&gt;</span>
<span class="line">   &lt;div&gt;   </span>
<span class="line">     &lt;img alt=&quot;图片&quot; src=&quot;image/a.png&quot;&gt;</span>
<span class="line">   &lt;/div&gt;</span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;/html&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上结构中的图片真实的访问路径是： http://localhost:8080/first_web/image/a.png</p><h3 id="四、错误页面和404页面" tabindex="-1"><a class="header-anchor" href="#四、错误页面和404页面"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E5%9B%9B%E3%80%81%E9%94%99%E8%AF%AF%E9%A1%B5%E9%9D%A2%E5%92%8C404%E9%A1%B5%E9%9D%A2" target="_blank" rel="noopener noreferrer">#</a>四、错误页面和404页面</span></a></h3><p>我们可以在web.xml中根据错误码和异常类型，配置不同异常情况下的错误页面。</p><div class="language-jsp line-numbers-mode" data-highlighter="prismjs" data-ext="jsp" data-title="jsp"><pre><code><span class="line">&lt;error-page&gt;</span>
<span class="line">    &lt;error-code&gt;404&lt;/error-code&gt;</span>
<span class="line">    &lt;location&gt;/pages/404.jsp&lt;/location&gt;</span>
<span class="line">&lt;/error-page&gt;</span>
<span class="line"></span>
<span class="line">&lt;error-page&gt;</span>
<span class="line">    &lt;exception-type&gt;java.lang.Exception&lt;/exception-type&gt;</span>
<span class="line">    &lt;location&gt;/pages/err.jsp&lt;/location&gt;</span>
<span class="line">&lt;/error-page&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第七章-listener、filter" tabindex="-1"><a class="header-anchor" href="#第七章-listener、filter"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E4%B8%83%E7%AB%A0-listener%E3%80%81filter" target="_blank" rel="noopener noreferrer">#</a>第七章 Listener、Filter</span></a></h2><h3 id="一、观察者设计模式" tabindex="-1"><a class="header-anchor" href="#一、观察者设计模式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81%E8%A7%82%E5%AF%9F%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>一、观察者设计模式</span></a></h3><p><strong>观察者模式（Observer）</strong>，又叫<strong>发布-订阅模式（Publish/Subscribe）</strong>，定义对象间一种一对多的依赖关系，使得每当一个对象改变状态，则所有依赖于它的对象都会得到通知并自动更新。</p><h4 id="_1、基本概念" tabindex="-1"><a class="header-anchor" href="#_1、基本概念"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5" target="_blank" rel="noopener noreferrer">#</a>1、基本概念</span></a></h4><ul><li>servlet是一种运行服务器端的java应用程序，它可以用来处理请求和响应。这是我们tomcat容器最重要的组成部分。</li><li>filter称之为过滤器，不像Servlet，它不处理具体的业务逻辑，它是一个中间者，它能够按照具体的规则拦截我们的请求和响应，并执行响应的操作。</li><li>listener叫监听器，它用来监听容器内的一些变化，如session的创建，销毁，servlet容器的创建销毁等。当这些内容变化产生时，监听器就要完成一些工作。这是观察者设计模式的典型使用场景。</li></ul><h4 id="_2、生命周期" tabindex="-1"><a class="header-anchor" href="#_2、生命周期"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F" target="_blank" rel="noopener noreferrer">#</a>2、生命周期</span></a></h4><p>**（1）servlet：**servlet的生命周期始于它被装入web服务器的内存时，并在web服务器终止或重新装入servlet时结束。servlet一旦被装入web服务器，一般不会从web服务器内存中删除，直至web服务器关闭或重新结束。</p><ol><li>装入：第一次访问，启动服务器时加载Servlet的实例；</li><li>初始化：web服务器启动时或web服务器接收到请求时，或者两者之间的某个时刻启动。初始化工作有init（）方法负责执行完成；</li><li>调用：从第一次到以后的多次访问，都是只调用doGet()或doPost()方法；</li><li>销毁：停止服务器时调用destroy()方法，销毁实例。</li></ol><p>**（2）filter：**一定要实现javax.servlet包的Filter接口的三个方法init()、doFilter()、destroy()，空实现也行</p><ol><li>启动服务器时加载过滤器的实例，并调用init()方法来初始化实例；</li><li>每一次请求时都只调用方法doFilter()进行处理；</li><li>停止服务器时调用destroy()方法，销毁实例。</li></ol><p>**（3）listener：**类似于servlet和filter</p><p>servlet2.4规范中提供了8个listener接口，可以将其分为三类，分别如下：</p><ul><li>第一类：与servletContext有关的listner接口。包括：ServletContextListener、ServletContextAttributeListener</li><li>第二类：与HttpSession有关的Listner接口。包括：HttpSessionListner、HttpSessionAttributeListener、HttpSessionBindingListener、 HttpSessionActivationListener；</li><li>第三类：与ServletRequest有关的Listener接口，包括：ServletRequestListner、ServletRequestAttributeListener</li></ul><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210109223910504.f8033c5e.png" alt="image-20210109223910504"></p><p>web.xml 的加载顺序是：context- param -&gt; listener -&gt; filter -&gt; servlet</p><h4 id="_3、使用方式" tabindex="-1"><a class="header-anchor" href="#_3、使用方式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>3、使用方式</span></a></h4><blockquote><p>listener：</p></blockquote><p>这是一个统计在线人数的listener</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OnlineCountListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// session被创建时调用</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionCreated</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一个session被创建&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ServletContext</span> application <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Object</span> visitCount <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;onlineCount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>visitCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;onlineCount&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>visitCount <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> visitCount<span class="token punctuation">;</span></span>
<span class="line">                application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;onlineCount&quot;</span><span class="token punctuation">,</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;您的数据有误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sessionDestroyed</span><span class="token punctuation">(</span><span class="token class-name">HttpSessionEvent</span> se<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;一个session被销毁了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ServletContext</span> application <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Object</span> visitCount <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;onlineCount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>visitCount <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> visitCount<span class="token punctuation">;</span></span>
<span class="line">            application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;onlineCount&quot;</span><span class="token punctuation">,</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;您的数据有误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个统计访问次数的listener</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VisitCountListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span><span class="token punctuation">(</span><span class="token class-name">ServletRequestEvent</span> sre<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ServletContext</span> application <span class="token operator">=</span> sre<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Object</span> visitCount <span class="token operator">=</span> application<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;visitCount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>visitCount <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;visitCount&quot;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span><span class="token punctuation">(</span>visitCount <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                <span class="token class-name">Integer</span> count <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span> visitCount<span class="token punctuation">;</span></span>
<span class="line">                application<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;visitCount&quot;</span><span class="token punctuation">,</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;您的数据有误！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.VisitCountListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.OnlineCountListener<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Filter：</p></blockquote><p>这是一个判断用户登录的过滤器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginFilter</span> <span class="token keyword">extends</span> <span class="token class-name">HttpFilter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//创建白名单</span></span>
<span class="line">        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> witheNames <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/login&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 如果在白名单我就放行</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>witheNames<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 有用户信息说明已经登录</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>session <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;user&quot;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">                response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;/login.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>配置项：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>LoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">&gt;</span></span>com.ydlclass.LoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">&gt;</span></span>LoginFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注：Servlet我们不再多做解释。</p><h2 id="第八章-编程式配置" tabindex="-1"><a class="header-anchor" href="#第八章-编程式配置"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E5%85%AB%E7%AB%A0-%E7%BC%96%E7%A8%8B%E5%BC%8F%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>第八章 编程式配置</span></a></h2><h3 id="一、servlet、filter、listener的配置" tabindex="-1"><a class="header-anchor" href="#一、servlet、filter、listener的配置"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81servlet%E3%80%81filter%E3%80%81listener%E7%9A%84%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener noreferrer">#</a>一、servlet、filter、listener的配置</span></a></h3><p>xml是我们最常见的配置，tomcat在启动时会加载web.xml配置文件，根据配置文件的内容，初始化我们的servlet容器。加载我们的listener、filter、servlet组件等，很明显这是通过反射实例化这些对象。</p><p>编程式的配置是将以往在配置文件中进行的配置以编程的方式在代码中直接配置，配置的方式以注解为主，tomcat在启动时会遍历class文件，收集相关的配置信息，加载组件，实例化组件。即使是编程式的配置，web.xml也不能删除，还有一些配置要在web.xml中进行配置的。</p><p>如果我们想使用注解进行配置，需要修改一个配置：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee<span class="token punctuation">&quot;</span></span></span>
<span class="line">         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span></span>
<span class="line">         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://jakarta.ee/xml/ns/jakartaee</span>
<span class="line">                      https://jakarta.ee/xml/ns/jakartaee/web-app_5_0.xsd<span class="token punctuation">&quot;</span></span></span>
<span class="line">         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>5.0<span class="token punctuation">&quot;</span></span></span>
<span class="line">         <span class="token attr-name">metadata-complete</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>metadata-complete属性必须设置为false，不写这个属性默认就是false，如果是true，注解不生效。这个属性的含义是，我的配置元数据在这个xml中全不全，如果全了我就不扫描相关的类文件了。</p><p>定义Servlet</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;myServlet&quot;</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token string">&quot;/my&quot;</span><span class="token punctuation">,</span> loadOnStartup <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">        initParams <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;zhangsan&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token annotation punctuation">@WebInitParam</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;age&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;13&quot;</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义Filter</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">&quot;/*&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFilter</span> <span class="token keyword">extends</span> <span class="token class-name">HttpFilter</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;经过了过滤器&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义listener</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebListener</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySessionListener</span> <span class="token keyword">implements</span> <span class="token class-name">HttpSessionListener</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、resource" tabindex="-1"><a class="header-anchor" href="#二、resource"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81resource" target="_blank" rel="noopener noreferrer">#</a>二、Resource</span></a></h3><h4 id="_1、jndi入门" tabindex="-1"><a class="header-anchor" href="#_1、jndi入门"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81jndi%E5%85%A5%E9%97%A8" target="_blank" rel="noopener noreferrer">#</a>1、JNDI入门</span></a></h4><p>JNDI（Java Naming and Directory Interface，Java 命名和目录接口）是一组在Java应用中访问命名服务和目录服务的API。其中，JavaEE要求Web容器（如：tomcat）必须实现JNDI规范。</p><p>怎么理解这一项技术呢？我们可以给每个资源起一个名字，并且构建一成个目录结构，就好比linux系统当中的目录结构一样，这样我们就可以像访问文件这样<code>/usr/local/config/web.xml</code>，去访问一个资源，这个资源可以是任意我们可以用java定义的资源，比如我们的数据源。</p><p>资源引用和资源定义的默认 JNDI 命名空间必须始终是<em>java:comp/env</em>，这就好比一个默认的文件夹。</p><p>看这个图，我们怎么表示一个mysql的数据源呢？</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211009193012897.34236252.png" alt="image-20211009193012897"></p><p><code>java:comp/env/dataSource/mysql</code> 这样是不是就行呢？</p><h4 id="_2、jndi应用-配置数据源" tabindex="-1"><a class="header-anchor" href="#_2、jndi应用-配置数据源"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81jndi%E5%BA%94%E7%94%A8-%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E6%BA%90" target="_blank" rel="noopener noreferrer">#</a>2、JNDI应用：配置数据源</span></a></h4><h5 id="_1-在tomcat中新增命名服务" tabindex="-1"><a class="header-anchor" href="#_1-在tomcat中新增命名服务"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E5%9C%A8tomcat%E4%B8%AD%E6%96%B0%E5%A2%9E%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener noreferrer">#</a>（1）在tomcat中新增命名服务</span></a></h5><p>第一步：向tomcat安装目录下的lib中添加JDBC驱动程序</p><p>第二步：修改tomcat中config目录下的context.xml</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- Default set of monitored resources. If one of these changes, the    --&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!-- web application will be reloaded.                                   --&gt;</span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>WEB-INF/web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>WEB-INF/tomcat-web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>WatchedResource</span><span class="token punctuation">&gt;</span></span>\${catalina.base}/conf/web.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>WatchedResource</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">&lt;!-- Uncomment this to enable session persistence across Tomcat restarts --&gt;</span></span>
<span class="line">    <span class="token comment">&lt;!--</span>
<span class="line">    &lt;Manager pathname=&quot;SESSIONS.ser&quot; /&gt;</span>
<span class="line">	</span>
<span class="line">    --&gt;</span></span>
<span class="line">	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resource</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource/mysql/prod<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Container<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javax.sql.DataSource<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://127.0.0.1:3306/ydlclass?characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxTotal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxIdle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxWaitMillis</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resource</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource/mysql/test<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Container<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javax.sql.DataSource<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://127.0.0.1:3306/boke?characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxTotal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxIdle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxWaitMillis</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Context</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第三步，在代码中访问</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;java:comp/env/dataSource/mysql&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-在当前工程下新增命名服务" tabindex="-1"><a class="header-anchor" href="#_2-在当前工程下新增命名服务"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-%E5%9C%A8%E5%BD%93%E5%89%8D%E5%B7%A5%E7%A8%8B%E4%B8%8B%E6%96%B0%E5%A2%9E%E5%91%BD%E5%90%8D%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener noreferrer">#</a>（2）在当前工程下新增命名服务</span></a></h5><p>第一步：向WEB-INF/lib目录下添加mysql驱动程序</p><p>第二步：在与WEB-INf同级的目录下新建META-INF/context.xml并配置</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resource</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource/mysql/prod<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Container<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javax.sql.DataSource<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://127.0.0.1:3306/ydlclass?characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxTotal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxIdle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxWaitMillis</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Resource</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dataSource/mysql/test<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">auth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Container<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>javax.sql.DataSource<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">driverClassName</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>jdbc:mysql://127.0.0.1:3306/boke?characterEncoding=utf8<span class="token entity named-entity" title="&amp;">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span> <span class="token attr-name">password</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxTotal</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>20<span class="token punctuation">&quot;</span></span> <span class="token attr-name">maxIdle</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10<span class="token punctuation">&quot;</span></span></span>
<span class="line">              <span class="token attr-name">maxWaitMillis</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>10000<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Context</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-基础数据类型" tabindex="-1"><a class="header-anchor" href="#_3-基础数据类型"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-%E5%9F%BA%E7%A1%80%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener noreferrer">#</a>（3）基础数据类型</span></a></h5><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml" data-title="xml"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env-entry</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env-entry-name</span><span class="token punctuation">&gt;</span></span>baseUrl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>env-entry-name</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env-entry-type</span><span class="token punctuation">&gt;</span></span>java.lang.String<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>env-entry-type</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>env-entry-value</span><span class="token punctuation">&gt;</span></span>D://www/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>env-entry-value</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>env-entry</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">DataSource</span> dataSource <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">)</span>ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">&quot;java:comp/env/baseUrl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、使用jndi好处" tabindex="-1"><a class="header-anchor" href="#_3、使用jndi好处"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E4%BD%BF%E7%94%A8jndi%E5%A5%BD%E5%A4%84" target="_blank" rel="noopener noreferrer">#</a>3、使用JNDI好处</span></a></h4><p>以JNDI配置数据源为例，当数据源变更（如：更换数据库类型，更改用户名或密码，更改连接的URL等），只需要web服务器管理员去修改JNDI数据源的配置文件即可，不需要开发人员去修改程序代码，从一定程度上达到了程序解耦的目的。同时，不仅是数据源如此，对于程序使用其他外部资源的情况，也可以使用JNDI配置.</p><h4 id="_4、-resource" tabindex="-1"><a class="header-anchor" href="#_4、-resource"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81-resource" target="_blank" rel="noopener noreferrer">#</a>4、@Resource</span></a></h4><p>使用@resource注解也可以类似将定义的JNDI资源，注入到变量当中，方法中就可以直接使用了，但是要注意，目前这能在Servlet中使用。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>lookup<span class="token operator">=</span><span class="token string">&quot;java:comp/env/baseUrl&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、postconstruct、predestory" tabindex="-1"><a class="header-anchor" href="#三、postconstruct、predestory"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%89%E3%80%81postconstruct%E3%80%81predestory" target="_blank" rel="noopener noreferrer">#</a>三、postConstruct、preDestory</span></a></h3><p>这两个注解提供了，servlet三个生命周期之外的两个回调函数。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">MyServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MyServlet------------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PostConstruct</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;PostConstruct---------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@PreDestroy</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;PreDestroy---------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;destroy---------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;init---------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;doGet---------&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行顺序如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">[2021-10-09 10:10:23,235] Artifact javaweb9: Deploy took 515 milliseconds</span>
<span class="line">MyServlet------------</span>
<span class="line">PostConstruct---------</span>
<span class="line">init---------</span>
<span class="line">.....</span>
<span class="line">destroy---------</span>
<span class="line">PreDestroy---------</span>
<span class="line">Disconnected from server</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第九章-实战案例" tabindex="-1"><a class="header-anchor" href="#第九章-实战案例"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E7%AC%AC%E4%B9%9D%E7%AB%A0-%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B" target="_blank" rel="noopener noreferrer">#</a>第九章 实战案例</span></a></h2><p>本章节的最后，我们写一个小程序回顾总结一下我们的知识：我们写一个用户管理模块实现对用户的增删改查。</p><p>大概实现以下功能即可：</p><p>1、登录注册，验证码、动态判断用户是否存在；</p><p>2、用户的增删改查，多表的联查。</p><p>在这个阶段一定要多多练习增删查改，这是我们的基本功，大型的项目我们放在以后的框架学习当中。</p><h3 id="一、mvc架构" tabindex="-1"><a class="header-anchor" href="#一、mvc架构"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81mvc%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener noreferrer">#</a>一、MVC架构</span></a></h3><h4 id="_1、简介-1" tabindex="-1"><a class="header-anchor" href="#_1、简介-1"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E7%AE%80%E4%BB%8B-1" target="_blank" rel="noopener noreferrer">#</a>1、简介</span></a></h4><p>MVC 模式（Model–view–controller）是软件工程中的一种<strong>软件架构模式</strong>，它把软件系统分为三个基本部分：<strong>模型（Model）</strong>、<strong>视图（View）**和**控制器（Controller）</strong>。</p><p>MVC 模式的目的是实现一种动态的程序设计，简化后续对程序的修改和扩展，并且使程序某一部分的重复利用成为可能。除此之外，MVC 模式通过对复杂度的简化，使程序的结构更加直观。软件系统在分离了自身的基本部分的同时，也赋予了各个基本部分应有的功能。专业人员可以通过自身的专长进行相关的分组：</p><p>（1）控制器的作用是调用模型，将模型产生的数据传递给视图。并让相关视图去显示，即使我们的servlet部分。</p><p>（2）模型的作用是获取数据并处理数据。这就是业务数据和业务逻辑。</p><p>（3）视图的作用是将取得的数据进行组织、美化等，并最终向用户终端输出，就是我们的jsp部分。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20210111164443136.248431d3.png" alt="image-20210111164443136"></p><p>在浏览器完整的展示一个页面需要视图模板和数据，视图层特通视图模板，模型层提供业务数据，而控制层负责协调两者。</p><h4 id="_2、mvc模式的优点" tabindex="-1"><a class="header-anchor" href="#_2、mvc模式的优点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81mvc%E6%A8%A1%E5%BC%8F%E7%9A%84%E4%BC%98%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>2、MVC模式的优点</span></a></h4><p>1、低耦合</p><p>通过将视图层和业务层分离，允许更改视图层代码而不必重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变，只需要改动MVC的模型层（及控制器）即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。</p><p>2、重用性高</p><p>随着技术的不断进步，当前需要使用越来越多的方式来访问应用程序了。MVC模式允许使用各种不同样式的视图来访问同一个服务端的代码，这得益于多个视图（如WEB（HTTP）浏览器或者无线浏览器（WAP））能共享一个模型。</p><p>比如，用户可以通过电脑或通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式（流程）是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面（视图）使用。例如，很多数据可能用 HTML 来表示，但是也有可能用 WAP 来表示，而这些表示的变化所需要的是仅仅是改变视图层的实现方式，而控制层和模型层无需做任何改变。</p><p>由于已经将数据和业务规则从表示层分开，所以可以最大化的进行代码重用了。另外，模型层也有状态管理和数据持久性处理的功能，所以，基于会话的购物车和电子商务过程，也能被Flash网站或者无线联网的应用程序所重用。</p><p>3、可维护性高</p><p>分离视图层和业务逻辑层使得WEB应用更易于维护和修改。</p><p>4、有利软件工程化管理</p><p>由于不同的组件（层）各司其职，每一层不同的应用会具有某些相同的特征，这样就有利于通过工程化、工具化的方式管理程序代码。控制器同时还提供了一个好处，就是可以使用控制器来联接不同的模型和视图，来实现用户的需求，这样控制器可以为构造应用程序提供强有力的手段。给定一些<strong>可重用的</strong>模型和视图，控制器可以根据用户的需求选择模型进行处理，然后选择视图将处理结果显示给用户。</p><h3 id="二、代码重点" tabindex="-1"><a class="header-anchor" href="#二、代码重点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%BA%8C%E3%80%81%E4%BB%A3%E7%A0%81%E9%87%8D%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>二、代码重点</span></a></h3><h4 id="_1、编写基础代码" tabindex="-1"><a class="header-anchor" href="#_1、编写基础代码"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1%E3%80%81%E7%BC%96%E5%86%99%E5%9F%BA%E7%A1%80%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener noreferrer">#</a>1、编写基础代码</span></a></h4><p>代码量有一点大我们就不写了。但是在此过程中我们需要实现一个功能，就是当鼠标离开用户名的输入框时显示这个用户名能不能被注册，这是怎么实现的。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013145802787.59c7c9ac.png" alt="image-20211013145802787"></p><p>要实现这个功能必须保证两点：</p><p>1、页面不能刷新，页面一旦刷新，所有的内容都会重置；</p><p>2、blur事件一发生，主动去数据库查询有没有这个用户。</p><p>如果以上的效果不需要查询数据库其实很好实现，添加blur事件，修改dom即可。我们要学习的其实是怎么在事件的回掉函数中发送http请求而已，其实http请求只是个报文而已，java、js、postman，浏览器都是可以发送的。而在js中我们用的就是ajax这项技术。</p><h4 id="_2、ajax" tabindex="-1"><a class="header-anchor" href="#_2、ajax"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2%E3%80%81ajax" target="_blank" rel="noopener noreferrer">#</a>2、ajax</span></a></h4><p>想一想有哪些功能我们无法实现:</p><ul><li>无法在实现用户登录功能时，当用户输入邮箱地址显示用户对应的头像</li><li>无法在实现用户注册功能时，当用户输入邮箱或者用户名就提示是否存在</li><li>无法在实现留言板功能时，实时看到最新的用户留言</li><li>无法点击验证码实现更新</li></ul><blockquote><p>思考：为什么做不到这些呢？</p></blockquote><p>在此之前，我们可以通过以下几种方式让浏览器发出对服务端的请求，获得服务端的数据：</p><ul><li>地址栏输入地址，回车，刷新</li><li>特定元素的 href 或 src 属性</li><li>表单提交</li></ul><p>这些方案都是我们无法通过或者很难通过代码的方式进行编程（对服务端发出请求并且接受服务端返回的响应），如果我们可以通过 JavaScript 直接发送网络请求，动态的去更新页面，那么 Web 的可能就会更多，随之能够实现的功能也会更多。</p><p><strong>AJAX (Asynchronous Javascript And XML)就是浏览器提供的一套 API，可以通过 JavaScript 调用，从而实现通过代码控制请求与响应。实现通过 JavaScript 进行网络编程。</strong></p><p>至于 <strong>XML</strong>：最早在客户端与服务端之间传递数据时所采用的数据格式就是 XML，现在已经不是了，我们用java。</p><h5 id="_1-快速上手" tabindex="-1"><a class="header-anchor" href="#_1-快速上手"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B" target="_blank" rel="noopener noreferrer">#</a>（1）快速上手</span></a></h5><p>AJAX API 中核心提供的是一个 <code>XMLHttpRequest</code> 类型，所有的 AJAX 操作都需要使用到这个类型。</p><p>使用 AJAX 的过程可以类比平常我们访问网页过程</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">// 1. 创建一个 XMLHttpRequest 类型的对象 —— 相当于打开了一个浏览器</span></span>
<span class="line"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 2. 打开与一个网址之间的连接 —— 相当于在地址栏输入访问地址</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/time&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 3. 通过连接发送一次请求 —— 相当于回车或者点击访问发送请求</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 4. 指定 xhr 状态变化事件处理函数 —— 相当于处理网页呈现后的操作</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 通过 xhr 的 readyState 判断此次请求的响应是否接收完成</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 通过 xhr 的 responseText 获取到响应的响应体</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>注意：涉及到 AJAX 操作的页面不能使用文件协议访问（文件的方式访问）</p></blockquote><p>由于 readystatechange事件（readyState）是在 <code>xhr</code> 对象状态变化时触发（不单是在得到响应时），也就意味着这个事件会被触发多次，所以我们有必要了解每一个状态值代表的含义：</p><table><thead><tr><th>readyState</th><th>状态描述</th><th>说明</th></tr></thead><tbody><tr><td>0</td><td>UNSENT</td><td>代理（XHR）被创建，但尚未调用 <code>open()</code> 方法。</td></tr><tr><td>1</td><td>OPENED</td><td><code>open()</code> 方法已经被调用，建立了连接。</td></tr><tr><td>2</td><td>HEADERS_RECEIVED</td><td><code>send()</code> 方法已经被调用，并且已经可以获取状态行和响应头。</td></tr><tr><td>3</td><td>LOADING</td><td>响应体下载中， <code>responseText</code> 属性可能已经包含部分数据。</td></tr><tr><td>4</td><td>DONE</td><td>响应体下载完成，可以直接使用 <code>responseText</code>。</td></tr></tbody></table><blockquote><p>时间轴</p></blockquote><div class="language-flow line-numbers-mode" data-highlighter="prismjs" data-ext="flow" data-title="flow"><pre><code><span class="line">s<span class="token operator">=&gt;</span>start<span class="token operator">:</span> 初始化</span>
<span class="line">o1<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 建立连接</span>
<span class="line">o2<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 接收到响应头</span>
<span class="line">o3<span class="token operator">=&gt;</span>operation<span class="token operator">:</span> 响应体加载中</span>
<span class="line">e<span class="token operator">=&gt;</span>end<span class="token operator">:</span> 加载完成</span>
<span class="line"></span>
<span class="line"><span class="token function">s</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">o1</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">o2</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span><span class="token function">o3</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">&gt;</span>e</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// =&gt; 0</span></span>
<span class="line"><span class="token comment">// 初始化 请求代理对象</span></span>
<span class="line"></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/time&#39;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// =&gt; 1</span></span>
<span class="line"><span class="token comment">// open 方法已经调用，建立一个与服务端特定端口的连接</span></span>
<span class="line"></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;readystatechange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span></span>
<span class="line">      <span class="token comment">// =&gt; 2</span></span>
<span class="line">      <span class="token comment">// 已经接受到了响应报文的响应头</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 可以拿到头</span></span>
<span class="line">      <span class="token comment">// console.log(this.getAllResponseHeaders())</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">&#39;server&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 但是还没有拿到体</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span></span>
<span class="line">      <span class="token comment">// =&gt; 3</span></span>
<span class="line">      <span class="token comment">// 正在下载响应报文的响应体，有可能响应体为空，也有可能不完整</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 在这里处理响应体不保险（不可靠）</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span></span>
<span class="line">      <span class="token comment">// =&gt; 4</span></span>
<span class="line">      <span class="token comment">// 一切 OK （整个响应报文已经完整下载下来了）</span></span>
<span class="line"></span>
<span class="line">      <span class="token comment">// 这里处理响应体</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过理解每一个状态值的含义得出一个结论：一般我们都是在 <code>readyState</code> 值为 <code>4</code> 时，执行响应的后续逻辑。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 后续逻辑......</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-具体用法" tabindex="-1"><a class="header-anchor" href="#_2-具体用法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-%E5%85%B7%E4%BD%93%E7%94%A8%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>（2）具体用法</span></a></h5><p>GET 请求</p><blockquote><p>通常在一次 GET 请求过程中，参数传递都是通过 URL 地址中的 <code>?</code> 参数传递。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// GET 请求传递参数通常使用的是问号传参</span></span>
<span class="line"><span class="token comment">// 这里可以在请求地址后面加上参数，从而传递数据到服务端</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/delete?id=1&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 一般在 GET 请求时无需设置响应体，可以传 null 或者干脆不传</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 一般情况下 URL 传递的都是参数性质的数据，而 POST 一般都是业务数据</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>POST 请求过程中，都是采用请求体承载需要提交的数据。</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// open 方法的第一个参数的作用就是设置请求的 method</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/add&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 设置请求头中的 Content-Type 为 application/x-www-form-urlencoded</span></span>
<span class="line"><span class="token comment">// 标识此次请求的请求体格式为 urlencoded 以便于服务端接收数 据</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Content-Type&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;application/x-www-form-urlencoded&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 需要提交到服务端的数据可以通过 send 方法的参数传递</span></span>
<span class="line"><span class="token comment">// 格式：name=zhangsan&amp;age=18</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&#39;name=zhangsan&amp;age=18&#39;</span><span class="token punctuation">)</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3-同步与异步" tabindex="-1"><a class="header-anchor" href="#_3-同步与异步"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3-%E5%90%8C%E6%AD%A5%E4%B8%8E%E5%BC%82%E6%AD%A5" target="_blank" rel="noopener noreferrer">#</a>（3）同步与异步</span></a></h5><p>关于同步与异步的概念在生活中有很多常见的场景，举例说明。</p><blockquote><ul><li>同步：一个人在同一个时刻只能做一件事情，在执行一些耗时的操作（不需要看管）不去做别的事，只是等待</li><li>异步：在执行一些耗时的操作（不需要看管）去做别的事，而不是等待</li></ul></blockquote><p><code>xhr.open()</code> 方法第三个参数要求传入的是一个 <code>bool</code> 值，其作用就是设置此次请求是否采用异步方式执行，默认为 <code>true</code>，如果需要同步执行可以通过传递 <code>false</code> 实现：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before ajax&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 默认第三个参数为 true 意味着采用异步方式执行</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/time&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function-variable function">onreadystatechange</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 这里的代码最后执行</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;request done&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after ajax&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果采用同步方式执行，则代码会卡死在 <code>xhr.send()</code> 这一步：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;before ajax&#39;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 同步方式</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&#39;GET&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/time&#39;</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// // 同步方式 执行需要 先注册事件再调用 send，否则 readystatechange 无法触发</span></span>
<span class="line"><span class="token comment">// xhr.onreadystatechange = function () {</span></span>
<span class="line"><span class="token comment">//   if (this.readyState === 4) {</span></span>
<span class="line"><span class="token comment">//     // 这里的代码最后执行</span></span>
<span class="line"><span class="token comment">//     console.log(&#39;request done&#39;)</span></span>
<span class="line"><span class="token comment">//   }</span></span>
<span class="line"><span class="token comment">// }</span></span>
<span class="line">xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">// 因为 send 方法执行完成 响应已经下载完成</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;after ajax&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示同步异步差异。</p><blockquote><p>了解同步模式即可，切记不要使用同步模式。</p></blockquote><p>至此，我们已经大致了解了 AJAX 所提供的基本 API 。</p><h5 id="_4-这玩意复杂怎么简化" tabindex="-1"><a class="header-anchor" href="#_4-这玩意复杂怎么简化"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4-%E8%BF%99%E7%8E%A9%E6%84%8F%E5%A4%8D%E6%9D%82%E6%80%8E%E4%B9%88%E7%AE%80%E5%8C%96" target="_blank" rel="noopener noreferrer">#</a>（4）这玩意复杂怎么简化</span></a></h5><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token parameter">method<span class="token punctuation">,</span> url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> fun</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;application/x-www-form-urlencoded;charset=utf-8&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    xhr<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;readystatechange&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 回调函数传入详情内容</span></span>
<span class="line">            <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3、使用ajax" tabindex="-1"><a class="header-anchor" href="#_3、使用ajax"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_3%E3%80%81%E4%BD%BF%E7%94%A8ajax" target="_blank" rel="noopener noreferrer">#</a>3、使用ajax</span></a></h4><h5 id="_1-动态查看用户是否存在" tabindex="-1"><a class="header-anchor" href="#_1-动态查看用户是否存在"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_1-%E5%8A%A8%E6%80%81%E6%9F%A5%E7%9C%8B%E7%94%A8%E6%88%B7%E6%98%AF%E5%90%A6%E5%AD%98%E5%9C%A8" target="_blank" rel="noopener noreferrer">#</a>（1）动态查看用户是否存在</span></a></h5><p>怎么使用ajax呢？本次我们使用自己封装的ajax方法：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line">let usernameInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">usernameInput<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;blur&quot;</span><span class="token punctuation">,</span>function <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 当发生了blur事件，就发送http请求</span></span>
<span class="line">    <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token string">&quot;POST&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;user/checkUserName&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;username=&quot;</span> <span class="token operator">+</span> usernameInput<span class="token punctuation">.</span>value<span class="token punctuation">,</span>function <span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 当后天给出响应yes就显示用户名存在</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>data <span class="token operator">==</span><span class="token operator">=</span> <span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;用户名已经存在！&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;msg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;用户名可以使用！&quot;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>具体的查询的代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/user/checkUserName&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheckUserNameServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token class-name">UserService</span> userService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> username <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;username&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">userService<span class="token punctuation">.</span></span>CheckUserName</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">PrintWriter</span> writer <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;no&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2-验证码" tabindex="-1"><a class="header-anchor" href="#_2-验证码"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_2-%E9%AA%8C%E8%AF%81%E7%A0%81" target="_blank" rel="noopener noreferrer">#</a>（2）验证码</span></a></h5><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211012114941969.83077618.png" alt="image-20211012114941969"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211012114956965.9a5933f4.png" alt="image-20211012114956965"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211012115013470.0b255b40.png" alt="image-20211012115013470"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211012115037441.132fab5f.png" alt="image-20211012115037441"></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211012115058252.227bf202.png" alt="image-20211012115058252"></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> * <span class="token keyword">@author</span> itnanls(微信)</span>
<span class="line"> * 我们的服务： 一路陪跑，顺利就业</span>
<span class="line"> */</span></span>
<span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/user/verification&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdentityServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars<span class="token operator">=</span><span class="token punctuation">{</span><span class="token char">&#39;0&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;1&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;2&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;3&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;4&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;5&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;6&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;7&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;8&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;9&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;A&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//自定义验证码池</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//获取6位随机数，放在图片里</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRandomString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">StringBuilder</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//获取随机的颜色</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Color</span> <span class="token function">getRandomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">//返回某颜色的反色</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Color</span> <span class="token function">getReverseColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">-</span> c<span class="token punctuation">.</span><span class="token function">getRed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255</span> <span class="token operator">-</span> c<span class="token punctuation">.</span><span class="token function">getGreen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255</span> <span class="token operator">-</span> c<span class="token punctuation">.</span><span class="token function">getBlue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//设置输出类型</span></span>
<span class="line">        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">&quot;image/jpeg&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//随机字符串</span></span>
<span class="line">        <span class="token class-name">String</span> verification <span class="token operator">=</span> <span class="token function">getRandomString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;verification&quot;</span><span class="token punctuation">,</span> verification<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//放到session里</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//图片宽度</span></span>
<span class="line">        <span class="token keyword">int</span> width <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//图片高度</span></span>
<span class="line">        <span class="token keyword">int</span> height <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment">//随机颜色，用于背景色</span></span>
<span class="line">        <span class="token class-name">Color</span> color <span class="token operator">=</span> <span class="token function">getRandomColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//反色，用于前景色</span></span>
<span class="line">        <span class="token class-name">Color</span> reverse <span class="token operator">=</span> <span class="token function">getReverseColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//创建一个彩色图片</span></span>
<span class="line">        <span class="token class-name">BufferedImage</span> bi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> <span class="token class-name">BufferedImage</span><span class="token punctuation">.</span><span class="token constant">TYPE_INT_RGB</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//绘图对象</span></span>
<span class="line">        <span class="token class-name">Graphics2D</span> g <span class="token operator">=</span> bi<span class="token punctuation">.</span><span class="token function">createGraphics</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//设置字体</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Font</span><span class="token punctuation">(</span><span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token constant">SANS_SERIF</span><span class="token punctuation">,</span><span class="token class-name">Font</span><span class="token punctuation">.</span><span class="token constant">BOLD</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//设置颜色</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//绘制背景</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span>reverse<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//绘制随机字符</span></span>
<span class="line">        g<span class="token punctuation">.</span><span class="token function">drawString</span><span class="token punctuation">(</span>verification<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//画100个噪音点</span></span>
<span class="line">        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            g<span class="token punctuation">.</span><span class="token function">drawRect</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">,</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">//转成JPEG格式</span></span>
<span class="line">        <span class="token class-name">ServletOutputStream</span> out<span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//编码器</span></span>
<span class="line">        <span class="token class-name">JPEGImageEncoder</span> encoder<span class="token operator">=</span> <span class="token class-name">JPEGCodec</span><span class="token punctuation">.</span><span class="token function">createJPEGEncoder</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">//对图片进行编码</span></span>
<span class="line">        encoder<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bi<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在前端的显示我们这么处理：</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-group<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>验证码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form-control<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>verify<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>verify<span class="token punctuation">&quot;</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>验证码<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>user/verification<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>verification<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除此之外我们还需要使用session进行配合：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token class-name">String</span> verification <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;verification&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;text/plain;charset=utf-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>verification<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>verify<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;验证码错误&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4、上传下载" tabindex="-1"><a class="header-anchor" href="#_4、上传下载"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_4%E3%80%81%E4%B8%8A%E4%BC%A0%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener noreferrer">#</a>4、上传下载</span></a></h4><p>上传的实质是从客户端的浏览器上传一个文件到服务器的磁盘上，下载反之，这个过程就是使用流来进行处理。</p><p>一个表单中一旦有了文件，就需要在form中新增 enctype=&quot;multipart/form-data&quot; 属性。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;form action=&quot;user/register&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>此时，提交表单content-type就变成了， multipart/form-data：</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013152829234.f1cb1458.png" alt="image-20211013152829234"></p><p>而在servlet中也需要使用一个新的注解@MultipartConfig，具体代码如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ydlclass<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/upload&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token annotation punctuation">@MultipartConfig</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UploadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">   </span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">String</span> name <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">Part</span> file <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getPart</span><span class="token punctuation">(</span><span class="token string">&quot;file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">if</span><span class="token punctuation">(</span>inputStream <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">&quot;E:\\\\test\\\\&quot;</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getSubmittedFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">long</span> size <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">long</span> currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> inputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                currentSize <span class="token operator">+=</span> len<span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">int</span> percent <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>currentSize <span class="token operator">/</span> <span class="token punctuation">(</span>size <span class="token operator">+</span> <span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>percent<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">            inputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            outputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        resp<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">&quot;/index.jsp&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下载时需要几个首部信息配合使用：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ydlclass<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletOutputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebServlet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLEncoder</span></span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">&quot;/download&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownLoadServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">FileInputStream</span> fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;E:\\\\test\\\\1.mp4&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">ServletOutputStream</span> outputStream <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 支持中文名称文件,需要对header进行单独设置，不然下载的文件名会出现乱码或者无法显示的情况</span></span>
<span class="line">        <span class="token comment">// String downloadFileName = new String(fileName .getBytes(), &quot;ISO-8859-1&quot;);</span></span>
<span class="line">        <span class="token class-name">String</span> downloadFileName <span class="token operator">=</span> <span class="token class-name">URLEncoder</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">&quot;稻香&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;UTF-8&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置响应头，控制浏览器下载该文件</span></span>
<span class="line">        resp<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Disposition&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;attachment;filename=&quot;</span> <span class="token operator">+</span> downloadFileName<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">int</span> len<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fileInputStream<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            outputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5、tomcat映射路径的配置方法" tabindex="-1"><a class="header-anchor" href="#_5、tomcat映射路径的配置方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_5%E3%80%81tomcat%E6%98%A0%E5%B0%84%E8%B7%AF%E5%BE%84%E7%9A%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>5、tomcat映射路径的配置方法</span></a></h4><p>配置虚拟路径可以帮我们搭建一个简易的图片服务器，让我们上传的图片可以用url访问。</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Context</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/xinzhi/image<span class="token punctuation">&quot;</span></span> <span class="token attr-name">docBase</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>D:\\\\img<span class="token punctuation">&quot;</span></span> <span class="token attr-name">debug</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0<span class="token punctuation">&quot;</span></span> <span class="token attr-name">reloadbale</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>path: Host的虚拟目录 docBase: 映射的物理目录的地址，可指定相对路径，相对appBase下，也可以指定绝对路径（例如：D:\\Workes\\testtomcat\\WebRoot）。如果无此项则默认为appBase/ROOT 。</p><h4 id="_6、分页" tabindex="-1"><a class="header-anchor" href="#_6、分页"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#_6%E3%80%81%E5%88%86%E9%A1%B5" target="_blank" rel="noopener noreferrer">#</a>6、分页</span></a></h4><p>此处不赘述，可以看视频</p><h3 id="三、项目打包" tabindex="-1"><a class="header-anchor" href="#三、项目打包"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%89%E3%80%81%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85" target="_blank" rel="noopener noreferrer">#</a>三、项目打包</span></a></h3><p>1、配置一个产品，我们的项目构建打包后就是一个产品</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013153509717.def9fafa.png" alt="image-20211013153509717"></p><p>2、选择web application:archive，它会帮助我们制作一个war包。</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013153530704.aea6a81b.png" alt="image-20211013153530704"></p><p>3、点击项目构建build</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013153752612.10148137.png" alt="image-20211013153752612"></p><p>4、选择build artifact，点击build</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013153728730.362fa6f3.png" alt="image-20211013153728730"></p><p>5、最终的产品就会出现在out目录</p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211013153851389.a53aefb6.png" alt="image-20211013153851389"></p><p>6、将war包放在tomcat的webapp下启动即可。</p>`,1067),l=[p];function c(o,i){return a(),s("div",null,l)}const r=n(e,[["render",c],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/web/","title":"JavaWeb","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"第一章 前端和后端的链接","slug":"第一章-前端和后端的链接","link":"#第一章-前端和后端的链接","children":[{"level":3,"title":"#一、 web 概念","slug":"一、-web-概念","link":"#一、-web-概念","children":[]},{"level":3,"title":"#二、Hello World","slug":"二、hello-world","link":"#二、hello-world","children":[]},{"level":3,"title":"#三、深入HTTP协议","slug":"三、深入http协议","link":"#三、深入http协议","children":[]},{"level":3,"title":"#四、项目完善","slug":"四、项目完善","link":"#四、项目完善","children":[]},{"level":3,"title":"#五、处理其他请求","slug":"五、处理其他请求","link":"#五、处理其他请求","children":[]},{"level":3,"title":"#六、状态的保存","slug":"六、状态的保存","link":"#六、状态的保存","children":[]}]},{"level":2,"title":"#第二章 JAKARTAEE历史","slug":"第二章-jakartaee历史","link":"#第二章-jakartaee历史","children":[{"level":3,"title":"#一、历史渊源","slug":"一、历史渊源","link":"#一、历史渊源","children":[]},{"level":3,"title":"#二、Tomcat","slug":"二、tomcat","link":"#二、tomcat","children":[]}]},{"level":2,"title":"#第三章 Web开发进阶","slug":"第三章-web开发进阶","link":"#第三章-web开发进阶","children":[{"level":3,"title":"#一、Tomcat 架构","slug":"一、tomcat-架构","link":"#一、tomcat-架构","children":[]},{"level":3,"title":"#二、Tomcat架构和执行流程","slug":"二、tomcat架构和执行流程","link":"#二、tomcat架构和执行流程","children":[]}]},{"level":2,"title":"#第四章 Servlet规范","slug":"第四章-servlet规范","link":"#第四章-servlet规范","children":[{"level":3,"title":"#一、Servlet概述","slug":"一、servlet概述","link":"#一、servlet概述","children":[]},{"level":3,"title":"#二、Servlet核心技术","slug":"二、servlet核心技术","link":"#二、servlet核心技术","children":[]},{"level":3,"title":"#三、Servlet的匹配规则","slug":"三、servlet的匹配规则","link":"#三、servlet的匹配规则","children":[]},{"level":3,"title":"#四、请求和响应","slug":"四、请求和响应","link":"#四、请求和响应","children":[]}]},{"level":2,"title":"#第五章 JSP入门学习","slug":"第五章-jsp入门学习","link":"#第五章-jsp入门学习","children":[{"level":3,"title":"#一、JSP基础语法","slug":"一、jsp基础语法","link":"#一、jsp基础语法","children":[]},{"level":3,"title":"#二、JSP原理","slug":"二、jsp原理","link":"#二、jsp原理","children":[]},{"level":3,"title":"#三、JSP指令","slug":"三、jsp指令","link":"#三、jsp指令","children":[]},{"level":3,"title":"#四、JSP标签","slug":"四、jsp标签","link":"#四、jsp标签","children":[]},{"level":3,"title":"#五、JSP属性作用域","slug":"五、jsp属性作用域","link":"#五、jsp属性作用域","children":[]},{"level":3,"title":"#六、九大内置对象","slug":"六、九大内置对象","link":"#六、九大内置对象","children":[]}]},{"level":2,"title":"#第六章 EL表达式和JSTL标签库","slug":"第六章-el表达式和jstl标签库","link":"#第六章-el表达式和jstl标签库","children":[{"level":3,"title":"#一、EL表达式","slug":"一、el表达式","link":"#一、el表达式","children":[]},{"level":3,"title":"#二、JSTL标签工具类","slug":"二、jstl标签工具类","link":"#二、jstl标签工具类","children":[]},{"level":3,"title":"#三、路径问题","slug":"三、路径问题","link":"#三、路径问题","children":[]},{"level":3,"title":"#四、错误页面和404页面","slug":"四、错误页面和404页面","link":"#四、错误页面和404页面","children":[]}]},{"level":2,"title":"#第七章 Listener、Filter","slug":"第七章-listener、filter","link":"#第七章-listener、filter","children":[{"level":3,"title":"#一、观察者设计模式","slug":"一、观察者设计模式","link":"#一、观察者设计模式","children":[]}]},{"level":2,"title":"#第八章 编程式配置","slug":"第八章-编程式配置","link":"#第八章-编程式配置","children":[{"level":3,"title":"#一、servlet、filter、listener的配置","slug":"一、servlet、filter、listener的配置","link":"#一、servlet、filter、listener的配置","children":[]},{"level":3,"title":"#二、Resource","slug":"二、resource","link":"#二、resource","children":[]},{"level":3,"title":"#三、postConstruct、preDestory","slug":"三、postconstruct、predestory","link":"#三、postconstruct、predestory","children":[]}]},{"level":2,"title":"#第九章 实战案例","slug":"第九章-实战案例","link":"#第九章-实战案例","children":[{"level":3,"title":"#一、MVC架构","slug":"一、mvc架构","link":"#一、mvc架构","children":[]},{"level":3,"title":"#二、代码重点","slug":"二、代码重点","link":"#二、代码重点","children":[]},{"level":3,"title":"#三、项目打包","slug":"三、项目打包","link":"#三、项目打包","children":[]}]}],"git":{"updatedTime":1723726527000,"contributors":[{"name":"zqb","email":"2506956864@qq.com","commits":1}]},"filePathRelative":"web/README.md","excerpt":"\\n<h2>第一章 前端和后端的链接</h2>\\n<h3><a class=\\"header-anchor\\" href=\\"#一、-web-概念\\"><span></span></a><a href=\\"https://www.ydlclass.com/doc21xnv/javaweb/servlet/#%E4%B8%80%E3%80%81-web-%E6%A6%82%E5%BF%B5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">#</a>一、 web 概念</h3>\\n<p>这是百度百科的解释：</p>\\n<p>web（World Wide Web）即全球广域网，也称为万维网，它是一种基于超文本和HTTP的、全球性的、动态交互的、跨平台的分布式图形信息系统。是建立在Internet上的一种网络服务，为浏览者在Internet上查找和浏览信息提供了图形化的、易于访问的直观界面，其中的文档及超级链接将Internet上的信息节点组织成一个互为关联的网状结构。</p>"}');export{r as comp,k as data};
