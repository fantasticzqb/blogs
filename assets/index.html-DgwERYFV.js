import{_ as n,c as s,o as a,a as e}from"./app-DTribdQX.js";const p={},t=e(`<h1 id="javascript学习" tabindex="-1"><a class="header-anchor" href="#javascript学习"><span>javascript学习</span></a></h1><h2 id="第一章-基础语法" tabindex="-1"><a class="header-anchor" href="#第一章-基础语法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>第一章 基础语法</span></a></h2><h2 id="一、基本情况" tabindex="-1"><a class="header-anchor" href="#一、基本情况"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%83%85%E5%86%B5" target="_blank" rel="noopener noreferrer">#</a>一、基本情况</span></a></h2><h3 id="_1、介绍" tabindex="-1"><a class="header-anchor" href="#_1、介绍"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81%E4%BB%8B%E7%BB%8D" target="_blank" rel="noopener noreferrer">#</a>1、介绍</span></a></h3><p>JavaScript是一门解释性的脚本语言，主要用来给HTML网页增加动态功能。</p><p>通常的js是运行在浏览器环境下的，可以帮助我们去控制页面，实现丰富的功能。会有dom和bom的api去操作html文档和浏览器的一些功能。</p><p>nodejs是运行在计算机环境下的。语法一样，但是因为环境是计算机，他当然不能操作dom和bom。因为压根就没有，但是他能操作文件，能操作数据库，他其实是一门后端的编程语言。</p><p>但是nodejs的出现个js提供了蓬勃的生命力，让js更加强大，比如现在流行的一下编程模式，都需要nodejs的支持。</p><h3 id="_2、js解释器" tabindex="-1"><a class="header-anchor" href="#_2、js解释器"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81js%E8%A7%A3%E9%87%8A%E5%99%A8" target="_blank" rel="noopener noreferrer">#</a>2、JS解释器</span></a></h3><p>无论是node还是各大浏览器，都需要有解释JS代码的引擎，参考下表浏览器使用的JS解释器</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">- Mozilla       --    Spidermonkey       火狐</span>
<span class="line">- Chrome        --    v8                 谷歌</span>
<span class="line">- Safari        --    JavaScriptCore     苹果</span>
<span class="line">- IE、Edge      --    Chakra              ie</span>
<span class="line">- <span class="token function">node</span>          --    v8                  nodejs</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、js哪里可以执行" tabindex="-1"><a class="header-anchor" href="#_3、js哪里可以执行"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3%E3%80%81js%E5%93%AA%E9%87%8C%E5%8F%AF%E4%BB%A5%E6%89%A7%E8%A1%8C" target="_blank" rel="noopener noreferrer">#</a>3、js哪里可以执行</span></a></h3><p>（1）放在html标签之中</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">//中间放页面标签  </span>
<span class="line"></span>
<span class="line">//放在body的结束标签之前</span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;&lt;h1&gt;123&lt;/h1&gt;&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）引入外部的js</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span> </span>
<span class="line">//中间放页面标签  </span>
<span class="line"></span>
<span class="line">//放在body的结束标签之前   </span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./index.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、数据类型" tabindex="-1"><a class="header-anchor" href="#二、数据类型"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B" target="_blank" rel="noopener noreferrer">#</a>二、数据类型</span></a></h2><blockquote><p>弱类型自动推断类型</p></blockquote><p>数字（number）</p><p>字符串 （string）</p><p>布尔型 （boolean）</p><blockquote><p>null是有值但为空，undefined是只是被申明，未赋值</p></blockquote><p>空（null）</p><p>未定义（ undefined）</p><h2 id="三、定义变量" tabindex="-1"><a class="header-anchor" href="#三、定义变量"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E5%AE%9A%E4%B9%89%E5%8F%98%E9%87%8F" target="_blank" rel="noopener noreferrer">#</a>三、定义变量</span></a></h2><blockquote><p>弱类型，不需要申明这个变量的类型，统一用 var</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> money <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//字符串单引号和双引号都行，和java对比</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;str&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> str2 <span class="token operator">=</span> <span class="token string">&quot;str2&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> nul <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//压根就没有定义叫undefined</span></span>
<span class="line"><span class="token comment">//数组和对象</span></span>
<span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为var有一些弊端，今天就说一个，如果前边定义了一个变量，后边再次定义，就会覆盖，这样会有问题，所有在ES6语法当中新增了let和const两个关键字来定义变量，除此之外还有作用域的问题，有兴趣可以去研究。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//前边的值会被后边的覆盖</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>//你们不用管</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//let 和 const 定义的变量不能不覆盖，不能重复定义。</span></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//直接会报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//cosnt定义的叫常量，定义之后的数据不能被修改</span></span>
<span class="line"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//直接会报错</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、数组-array" tabindex="-1"><a class="header-anchor" href="#四、数组-array"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%9B%9B%E3%80%81%E6%95%B0%E7%BB%84-array" target="_blank" rel="noopener noreferrer">#</a>四、数组（array）</span></a></h2><h3 id="_1、定义的方式" tabindex="-1"><a class="header-anchor" href="#_1、定义的方式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81%E5%AE%9A%E4%B9%89%E7%9A%84%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>1、定义的方式</span></a></h3><h4 id="_1-使用方法调用" tabindex="-1"><a class="header-anchor" href="#_1-使用方法调用"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>（1）使用方法调用</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//Array 是个函数，猜一猜他的返回值就是个空数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用new关键字" tabindex="-1"><a class="header-anchor" href="#_2-使用new关键字"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-%E4%BD%BF%E7%94%A8new%E5%85%B3%E9%94%AE%E5%AD%97" target="_blank" rel="noopener noreferrer">#</a>（2）使用new关键字</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//js里函数可以当类使用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用json数组的方式-字面量-个人推荐" tabindex="-1"><a class="header-anchor" href="#_3-使用json数组的方式-字面量-个人推荐"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3-%E4%BD%BF%E7%94%A8json%E6%95%B0%E7%BB%84%E7%9A%84%E6%96%B9%E5%BC%8F-%E5%AD%97%E9%9D%A2%E9%87%8F-%E4%B8%AA%E4%BA%BA%E6%8E%A8%E8%8D%90" target="_blank" rel="noopener noreferrer">#</a>（3）使用json数组的方式，字面量，个人推荐</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p>注：js中初始化数组不需要初始化长度</p></blockquote><h3 id="_2、赋值的方式" tabindex="-1"><a class="header-anchor" href="#_2、赋值的方式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81%E8%B5%8B%E5%80%BC%E7%9A%84%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>2、赋值的方式</span></a></h3><h4 id="_1-定义之后去赋值" tabindex="-1"><a class="header-anchor" href="#_1-定义之后去赋值"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-%E5%AE%9A%E4%B9%89%E4%B9%8B%E5%90%8E%E5%8E%BB%E8%B5%8B%E5%80%BC" target="_blank" rel="noopener noreferrer">#</a>（1）定义之后去赋值</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line">arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">234</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-定义的时候赋值" tabindex="-1"><a class="header-anchor" href="#_2-定义的时候赋值"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-%E5%AE%9A%E4%B9%89%E7%9A%84%E6%97%B6%E5%80%99%E8%B5%8B%E5%80%BC" target="_blank" rel="noopener noreferrer">#</a>（2）定义的时候赋值</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//这样当然方便</span></span>
<span class="line"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、方法" tabindex="-1"><a class="header-anchor" href="#五、方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%94%E3%80%81%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>五、方法</span></a></h2><p>js和java定义方法对比</p><p>js对参数要求极其灵活，java极其严格</p><p>js不需要声明数据类型，java必须声明数据类型</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//这种方法没有参数没有返回值，右不打印没用让我们看见就毫无意义</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">puls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">puls</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//参数是你要处理的数据，</span></span>
<span class="line"><span class="token comment">//返回值就是处理的结果</span></span>
<span class="line"><span class="token comment">//返回值可以给</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token number">57</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//可以使用另一个变量去接收返回值并进行利用</span></span>
<span class="line"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">)</span></span>
<span class="line">num</span>
<span class="line"><span class="token number">77</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//方法会在遇到return之后停止运行</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span>num2</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VM688</span><span class="token operator">:</span><span class="token number">2</span> before</span>
<span class="line"><span class="token number">79</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">return </span>
<span class="line">1终止当前的方法，不在继续往下执行</span>
<span class="line">2、会将return之后的结果，作为方法执行的结果返回出去</span>
<span class="line">返回出去有什么用，别的变量就能拿到这个值，并进行利用</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参数可以没有，可以有一个或多个</p><p>返回值要么没有，要么只有一个</p><h2 id="六、-对象-object" tabindex="-1"><a class="header-anchor" href="#六、-对象-object"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%85%AD%E3%80%81-%E5%AF%B9%E8%B1%A1-object" target="_blank" rel="noopener noreferrer">#</a>六、 对象（object）</span></a></h2><p><strong>对象是js里最灵活的。</strong></p><h3 id="_1、定义空对象" tabindex="-1"><a class="header-anchor" href="#_1、定义空对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81%E5%AE%9A%E4%B9%89%E7%A9%BA%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>1、定义空对象</span></a></h3><h4 id="_1-使用方法调用-1" tabindex="-1"><a class="header-anchor" href="#_1-使用方法调用-1"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%B0%83%E7%94%A8-1" target="_blank" rel="noopener noreferrer">#</a>（1）使用方法调用</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//Array 是个函数，猜一猜他的返回值就是个空数组</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用new关键字-1" tabindex="-1"><a class="header-anchor" href="#_2-使用new关键字-1"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-%E4%BD%BF%E7%94%A8new%E5%85%B3%E9%94%AE%E5%AD%97-1" target="_blank" rel="noopener noreferrer">#</a>（2）使用new关键字</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//js里函数可以当类使用</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-使用json对象的方式-个人推荐" tabindex="-1"><a class="header-anchor" href="#_3-使用json对象的方式-个人推荐"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3-%E4%BD%BF%E7%94%A8json%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F-%E4%B8%AA%E4%BA%BA%E6%8E%A8%E8%8D%90" target="_blank" rel="noopener noreferrer">#</a>（3）使用json对象的方式，个人推荐</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_4-自定义对象类型-有点高级-了解" tabindex="-1"><a class="header-anchor" href="#_4-自定义对象类型-有点高级-了解"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_4-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%AF%B9%E8%B1%A1%E7%B1%BB%E5%9E%8B-%E6%9C%89%E7%82%B9%E9%AB%98%E7%BA%A7-%E4%BA%86%E8%A7%A3" target="_blank" rel="noopener noreferrer">#</a>（4）自定义对象类型，有点高级，了解</span></a></h4><p>这一点很是灵活，function定义的函数，既能直接调用，也可以像类一样使用new关键字来生成。也就是函数既可以当做普通函数，也能当做构造函数。</p><p><strong>其中要注意，要想给new出来的对象添加属性或方法，必须使用this关键字，不写不行。</strong></p><p>命名规范和java一样，首字母大写，驼峰式命名。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;wusanshui&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、给对象添加属性和方法" tabindex="-1"><a class="header-anchor" href="#_2、给对象添加属性和方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81%E7%BB%99%E5%AF%B9%E8%B1%A1%E6%B7%BB%E5%8A%A0%E5%B1%9E%E6%80%A7%E5%92%8C%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>2、给对象添加属性和方法</span></a></h3><h4 id="_1-定义了对象之后" tabindex="-1"><a class="header-anchor" href="#_1-定义了对象之后"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-%E5%AE%9A%E4%B9%89%E4%BA%86%E5%AF%B9%E8%B1%A1%E4%B9%8B%E5%90%8E" target="_blank" rel="noopener noreferrer">#</a>（1）定义了对象之后</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">;</span></span>
<span class="line">obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line">onj<span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot; I am eating! &quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-定义类的时候" tabindex="-1"><a class="header-anchor" href="#_2-定义类的时候"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E6%97%B6%E5%80%99" target="_blank" rel="noopener noreferrer">#</a>（2）定义类的时候</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//直接用json对象写一个对象出来</span></span>
<span class="line"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">eat</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;i am eating！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-自定义类的时候" tabindex="-1"><a class="header-anchor" href="#_3-自定义类的时候"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3-%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E7%9A%84%E6%97%B6%E5%80%99" target="_blank" rel="noopener noreferrer">#</a>（3）自定义类的时候</span></a></h4><p>一定要注意和java的区别</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">eat</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am eating!&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;wusanshui&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//new 出来的对象自然而然就拥有这些属性和方法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、获取对象的属性的方法" tabindex="-1"><a class="header-anchor" href="#_3、获取对象的属性的方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3%E3%80%81%E8%8E%B7%E5%8F%96%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>3、获取对象的属性的方法</span></a></h3><h4 id="_1-使用" tabindex="-1"><a class="header-anchor" href="#_1-使用"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>（1）使用.</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">调用方法</span>
<span class="line">user<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>（2）使用[]</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">调用方法</span>
<span class="line">user<span class="token punctuation">[</span><span class="token string">&#39;eat&#39;</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六、判断和循环" tabindex="-1"><a class="header-anchor" href="#六、判断和循环"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%85%AD%E3%80%81%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF" target="_blank" rel="noopener noreferrer">#</a>六、判断和循环</span></a></h2><p>和java里的一模一样，简单写一下就行了</p><h3 id="_1、if语句" tabindex="-1"><a class="header-anchor" href="#_1、if语句"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81if%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener noreferrer">#</a>1、if语句</span></a></h3><p>如果条件是一个值：</p><p>如果是 0 ‘’ null undefined false 都是false</p><p>{} [] 非零的数字 字符串 都是真</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span></span>
<span class="line">   <span class="token function">alert</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、switch语句" tabindex="-1"><a class="header-anchor" href="#_2、switch语句"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81switch%E8%AF%AD%E5%8F%A5" target="_blank" rel="noopener noreferrer">#</a>2、switch语句</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> x<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">switch</span> <span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">&quot;今天是星期日&quot;</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token keyword">break</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">&quot;今天是星期一&quot;</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token keyword">break</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>x<span class="token operator">=</span><span class="token string">&quot;今天是星期二&quot;</span><span class="token punctuation">;</span> </span>
<span class="line">  <span class="token keyword">break</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、循环数组" tabindex="-1"><a class="header-anchor" href="#_3、循环数组"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3%E3%80%81%E5%BE%AA%E7%8E%AF%E6%95%B0%E7%BB%84" target="_blank" rel="noopener noreferrer">#</a>3、循环数组</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> cars <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">&#39;兰博基尼&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;CRV&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;卡宴&#39;</span><span class="token punctuation">,</span><span class="token string">&quot;奔驰是傻逼&quot;</span><span class="token punctuation">,</span><span class="token string">&#39;bwm&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>cars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">{</span> </span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、遍历对象属性" tabindex="-1"><a class="header-anchor" href="#_4、遍历对象属性"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_4%E3%80%81%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener noreferrer">#</a>4、遍历对象属性</span></a></h3><p>注意：获取对象属性的时候可以用. 也可以用[key]</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zhangsan&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">10</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> options<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">//正确</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment">//错误</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>attr<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第二章-常见内置对象" tabindex="-1"><a class="header-anchor" href="#第二章-常见内置对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>第二章 常见内置对象</span></a></h2><h2 id="一、array对象" tabindex="-1"><a class="header-anchor" href="#一、array对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81array%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>一、Array对象</span></a></h2><blockquote><p>方法</p></blockquote><ol><li>concat（）　　　　 表示把几个数组合并成一个数组</li><li>join（）　　　　　 设置分隔符连接数组元素为一个字符串</li><li>pop（）　　　　　 移除数组最后一个元素</li><li>shift（）　　　　　 移除数组中第一个元素</li><li>slice（start，end） 返回数组中的一段</li><li>splice（）　　　　 可以用来删除，可以用来插入，也可以用来替换</li><li>push（）　　　　 往数组中新添加一个元素，返回最新长度</li><li>sort（）　　　　　 对数组进行排序</li><li>reverse（）　　　　反转数组的顺序</li><li>toLocaleString()　　 把数组转换为本地字符串</li></ol><blockquote><p>属性：</p></blockquote><ol><li>length　　　　　　 表示取得当前数组长度 （常用）</li><li>constructor　　　　 引用数组对象的构造函数</li><li>prototype　　　　　通过增加属性和方法扩展数组定义</li></ol><h2 id="二、global对象" tabindex="-1"><a class="header-anchor" href="#二、global对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81global%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>二、Global对象</span></a></h2><ol><li>escape（）　　　　 对字符串编码</li><li>eval（） 　　　　 把字符串解析为JavaScript代码并执行</li><li>isNaN()　　　　　　判断一个值是否是NaN</li><li>parseInt（）　　　 解析一个字符串并返回一个整数</li><li>parseFloat（）　　 解析一个字符串并返回一个浮点数</li><li>number（） 　　　 把对象的值转换为数字</li><li>string（）　　　　 把对象的值转换为字符串</li></ol><h2 id="三、string对象" tabindex="-1"><a class="header-anchor" href="#三、string对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81string%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>三、String对象</span></a></h2><ol><li>charAt()　　　　　 　　　　 返回指定索引的位置的字符</li><li>indexOf() 　　　 　　　　 从前向后检索字符串，看是否含有指定字符串</li><li>lastIndexOf()　　　 　　　　从后向前检索字符串，看是否含有指定字符串</li><li>concat()　　 　　　　　　　连接两个或多个字符串</li><li>match()　　 　　　　　　 使用正则表达式模式对字符串执行查找，并将包含查找结果最为结果返回</li><li>replace()　　　　　　　　　替换一个与正则表达式匹配的子串</li><li>search()　　　　　　　　　 检索字符串中与正则表达式匹配的子串。如果没有找到匹配，则返回 -1。</li><li>slice（start，end） 　　　 根据下表截取子串</li><li>substring（start，end）　 根据下表截取子串</li><li>split()　　　　　　　　　　 根据指定分隔符将字符串分割成多个子串，并返回素组</li><li>substr(start，length)　　　 根据长度截取字符串 *</li><li>toUpperCase()　　　　　　 返回一个字符串，该字符串中的所有字母都被转化为大写字母。</li><li>toLowerCase()　　　　　　 返回一个字符串，该字符串中的所有字母都被转化为小写字母。</li></ol><h2 id="四、math对象" tabindex="-1"><a class="header-anchor" href="#四、math对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%9B%9B%E3%80%81math%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>四、Math对象</span></a></h2><ol><li>ceil()　　　　向上取整。</li><li>floor()　　　 向下取整。</li><li>round()　　　四舍五入。</li><li>random()　　取随机数。</li></ol><h2 id="五、date对象" tabindex="-1"><a class="header-anchor" href="#五、date对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%94%E3%80%81date%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>五、Date对象</span></a></h2><ol><li>getDate函数：　　　　　　返回日期的“日”部分，值为1～31。</li><li>getDay函数：　　　　　　 返回星期，值为0～6，0表示星期日。</li><li>getHours函数：　　　　　 返回日期的“小时”部分，值为0～23。</li><li>getMinutes函数：　　　　 返回日期的“分钟”部分，值为0～59。</li><li>getMonth函数：　　　　　 返回日期的“月”部分，值为0～11。</li><li>getSeconds函数：　　　　 返回日期的“秒”部分，值为0～59。</li><li>getTime函数：　　　　　　返回系统时间。</li><li>getTimezoneOffset函数：　返回此地区的时差(当地时间与GMT格林威治标准时间的地区时差)，单位为分钟。</li><li>getYear函数：　　　　　　返回日期的“年”部分。返回值以1900年为基数，如1999年为99。</li><li>parse函数：　　　　　　　返回从1970年1月1日零时整算起的毫秒数(当地时间)</li><li>setDate函数：　　　　　　设定日期的“日”部分，值为0～31。</li><li>setHours函数：　　　　　 设定日期的“小时”部分，值为0～23。</li><li>setMinutes函数：　　　　 设定日期的“分钟”部分，值为0～59。</li><li>setMonth函数：　　　　　 设定日期的“月”部分，值为0～11。其中0表示1月，...，11表示12月。</li><li>setSeconds函数：　　　　 设定日期的“秒”部分，值为0～59。</li><li>setTime函数：　　　　　　设定时间。时间数值为1970年1月1日零时整算起的毫秒数。</li><li>setYear函数：　　　　　　设定日期的“年”部分。</li><li>toGMTString函数：　　　　转换日期成为字符串，为GMT格林威治标准时间。</li><li>setLocaleString函数：　　 转换日期成为字符串，为当地时间。</li><li>UTC函数：　　　　　　　 返回从1970年1月1日零时整算起的毫秒数(GMT)。</li></ol><h2 id="第三章-dom编程" tabindex="-1"><a class="header-anchor" href="#第三章-dom编程"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E4%B8%89%E7%AB%A0-dom%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener noreferrer">#</a>第三章 DOM编程</span></a></h2><h2 id="一、概述" tabindex="-1"><a class="header-anchor" href="#一、概述"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0" target="_blank" rel="noopener noreferrer">#</a>一、概述</span></a></h2><p>在 HTML DOM (Document Object Model) 即文档对象模型中, 每个东西都是 <strong>节点</strong> :</p><ul><li>文档本身就是一个文档对象</li><li>所有 HTML 元素都是元素节点</li><li>所有 HTML 属性都是属性节点</li><li>元素内的文本是文本节点</li><li>注释是注释节点，就不用</li></ul><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>test1<span class="token punctuation">&#39;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&#39;</span>a<span class="token punctuation">&#39;</span></span><span class="token punctuation">&gt;</span></span>itnanls<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line">div整体是一个元素节点</span>
<span class="line">class=‘test1’ 是一个属性节点</span>
<span class="line">itnanls是个文本节点，注意中间没有东西空字符也是一个文本节点</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所有的节点都有一个nodeType属性，可以判断节点类型，常用的就是以下</p><table><thead><tr><th>NodeType</th><th>Named Constant</th></tr></thead><tbody><tr><td>1</td><td>ELEMENT_NODE 元素节点</td></tr><tr><td>2</td><td>ATTRIBUTE_NODE 属性节点</td></tr><tr><td>3</td><td>TEXT_NODE 文本节点</td></tr></tbody></table><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//元素节点</span></span>
<span class="line"><span class="token keyword">var</span> mydiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>nodeType</span>
<span class="line"><span class="token number">1</span></span>
<span class="line"><span class="token comment">//属性节点</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeType</span>
<span class="line"><span class="token number">2</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>DOM操作其实就是对节点的增删查改</p><h2 id="二、元素节点" tabindex="-1"><a class="header-anchor" href="#二、元素节点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>二、元素节点</span></a></h2><h3 id="_1、获取元素节点的方法" tabindex="-1"><a class="header-anchor" href="#_1、获取元素节点的方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>1、获取元素节点的方法</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//根据id获取一个元素节点</span></span>
<span class="line"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//根据标签名获取一堆节点的集合</span></span>
<span class="line"><span class="token keyword">var</span> li1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;li&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//根据class获取一堆元素节点</span></span>
<span class="line"><span class="token keyword">var</span> div2 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">&quot;content&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//使用css选择器选择第一个匹配的元素节点</span></span>
<span class="line"><span class="token keyword">var</span> d1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;.content&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//根据css选择器选择一批能够被匹配到的所有的元素</span></span>
<span class="line"><span class="token keyword">var</span> d1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;.content&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、修改元素节点的内容" tabindex="-1"><a class="header-anchor" href="#_2、修改元素节点的内容"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81%E4%BF%AE%E6%94%B9%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E7%9A%84%E5%86%85%E5%AE%B9" target="_blank" rel="noopener noreferrer">#</a>2、修改元素节点的内容</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//不渲染html标签，标签会当做文本打印出来</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">&quot;jiasoushi&quot;</span></span>
<span class="line"><span class="token comment">//会将html标签渲染出来</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">&quot;&lt;h1&gt;123&lt;/h1&gt;&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、删除一个元素节点" tabindex="-1"><a class="header-anchor" href="#_3、删除一个元素节点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3%E3%80%81%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>3、删除一个元素节点</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//直接把自己干掉</span></span>
<span class="line"><span class="token keyword">var</span> mydiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">mydiv<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//清除内容</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>innerText <span class="token operator">=</span> “”<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//删除某个子元素节点</span></span>
<span class="line"><span class="token comment">//1、找到这个字元素节点</span></span>
<span class="line"><span class="token keyword">var</span> myul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//2、调用方法干掉，注意这个方法参数一定要是个元素节点</span></span>
<span class="line">mydiv<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>myul<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line"><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&quot;ul&quot;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line">child</span>
<span class="line"><span class="token operator">&lt;</span>ul<span class="token operator">&gt;</span>…<span class="token operator">&lt;</span><span class="token operator">/</span>ul<span class="token operator">&gt;</span></span>
<span class="line">div1<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>child <span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、新建一个元素节点" tabindex="-1"><a class="header-anchor" href="#_4、新建一个元素节点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_4%E3%80%81%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>4、新建一个元素节点</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//创建一个div标签，内存中</span></span>
<span class="line"><span class="token keyword">var</span> mydiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//添加进几个属性</span></span>
<span class="line">mydiv<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;mydiv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">mydiv<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;class&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//获取到我的div</span></span>
<span class="line"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//将内存中新建的div实实在在的加入到我的div中</span></span>
<span class="line">div1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>mydiv<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、获取所有的子节点" tabindex="-1"><a class="header-anchor" href="#_5、获取所有的子节点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_5%E3%80%81%E8%8E%B7%E5%8F%96%E6%89%80%E6%9C%89%E7%9A%84%E5%AD%90%E8%8A%82%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>5、获取所有的子节点</span></a></h3><ul><li>获取了之后当然就能像操作节点一样操作他了。</li><li>子节点一般是个集合，其实就是个数组</li><li>循环遍历可以批量操作</li><li>不仅仅是子节点集合，任何节点集合都能批量操作</li></ul><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//children属性能获取所有的子元素节点，不包括文本节点</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>children</span>
<span class="line"><span class="token class-name">HTMLCollection</span> <span class="token punctuation">[</span>ul<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//children属性能获取所有的子元素节点，包括文本节点</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>childNodes</span>
<span class="line"><span class="token class-name">NodeList</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>text<span class="token punctuation">,</span> ul<span class="token punctuation">,</span> text<span class="token punctuation">]</span></span>
<span class="line">    </span>
<span class="line"><span class="token comment">//子节点也是元素节点，一样可以有子节点    </span></span>
<span class="line">mydiv<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>children    </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、属性节点" tabindex="-1"><a class="header-anchor" href="#三、属性节点"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E5%B1%9E%E6%80%A7%E8%8A%82%E7%82%B9" target="_blank" rel="noopener noreferrer">#</a>三、属性节点</span></a></h2><h3 id="_1、使用元素节点方法进行增删查改" tabindex="-1"><a class="header-anchor" href="#_1、使用元素节点方法进行增删查改"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81%E4%BD%BF%E7%94%A8%E5%85%83%E7%B4%A0%E8%8A%82%E7%82%B9%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9" target="_blank" rel="noopener noreferrer">#</a>1、使用元素节点方法进行增删查改</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> mydiv <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//获取这个属性的值</span></span>
<span class="line">mydiv<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//修改，同时可以添加一个属性的值</span></span>
<span class="line">mydiv<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;cccc&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//删除一个属性</span></span>
<span class="line">mydiv<span class="token punctuation">.</span><span class="token function">removeAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、使用属性节点对象对属性本身进行操作" tabindex="-1"><a class="header-anchor" href="#_2、使用属性节点对象对属性本身进行操作"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81%E4%BD%BF%E7%94%A8%E5%B1%9E%E6%80%A7%E8%8A%82%E7%82%B9%E5%AF%B9%E8%B1%A1%E5%AF%B9%E5%B1%9E%E6%80%A7%E6%9C%AC%E8%BA%AB%E8%BF%9B%E8%A1%8C%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener noreferrer">#</a>2、使用属性节点对象对属性本身进行操作</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//获取所有的属性节点的集合，是个可以当成数组</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>attributes</span>
<span class="line"><span class="token comment">//通过下标拿到第二个属性</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment">//拿到属性的name</span></span>
<span class="line"><span class="token keyword">var</span> attrName <span class="token operator">=</span> mydiv<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name</span>
<span class="line"><span class="token comment">//拿到属性的值</span></span>
<span class="line"><span class="token keyword">var</span> attrValue <span class="token operator">=</span> mydiv<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value</span>
<span class="line"><span class="token comment">//修改这个属性的值</span></span>
<span class="line">mydiv<span class="token punctuation">.</span>attributes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">&quot;aaa&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、常用属性操作" tabindex="-1"><a class="header-anchor" href="#三、常用属性操作"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E5%B8%B8%E7%94%A8%E5%B1%9E%E6%80%A7%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener noreferrer">#</a>三、常用属性操作</span></a></h2><p>如 id 、class、style</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//获取id的值</span></span>
<span class="line">div1<span class="token punctuation">.</span>id</span>
<span class="line"><span class="token string">&quot;div1&quot;</span></span>
<span class="line"><span class="token comment">//给元素标签的id赋值</span></span>
<span class="line">div1<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token string">&quot;div2&quot;</span></span>
<span class="line"><span class="token string">&quot;div2&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//获取class属性</span></span>
<span class="line">div1<span class="token punctuation">.</span>className</span>
<span class="line"><span class="token string">&quot;content aaa&quot;</span></span>
<span class="line"><span class="token comment">//为class属性赋值</span></span>
<span class="line">div1<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">&#39;content&#39;</span></span>
<span class="line"><span class="token string">&quot;content&quot;</span></span>
<span class="line">div1<span class="token punctuation">.</span>className</span>
<span class="line"><span class="token string">&quot;content&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//直接修改行内样式</span></span>
<span class="line">div1<span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background: black&#39;</span></span>
<span class="line"><span class="token string">&quot;background: black&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第四章-bom编程" tabindex="-1"><a class="header-anchor" href="#第四章-bom编程"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E5%9B%9B%E7%AB%A0-bom%E7%BC%96%E7%A8%8B" target="_blank" rel="noopener noreferrer">#</a>第四章 BOM编程</span></a></h2><h2 id="一、概述-1" tabindex="-1"><a class="header-anchor" href="#一、概述-1"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E6%A6%82%E8%BF%B0-1" target="_blank" rel="noopener noreferrer">#</a>一、概述</span></a></h2><p>BOM是浏览器对象模型。</p><p>BOM提供了独立于内容 而与浏览器窗口进行交互的对象；</p><p>BOM的核心对象是window；</p><p>BOM由一系列相关的对象构成，并且每个对象都提供了很多方法与属性；</p><p>打开浏览器，F12打开调试窗口，console里输入window，就能看到这个对象。里边有很多的方法和属性，能够帮助我们查看和浏览器相关的一些内容，比如浏览器的版本啦（navigator）、浏览的历时记录啦（history）、网站的地址信息啦（location），和屏幕相关的内容啦（带screende）等等，自己可以浏览一下即可。</p><h2 id="二、常用方法" tabindex="-1"><a class="header-anchor" href="#二、常用方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>二、常用方法</span></a></h2><blockquote><p>回调函数</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//js函数非常灵活，定义了参数传什么都行</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">callback</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">callback</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">callback</span><span class="token punctuation">(</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhangnan&#39;</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></span>
<span class="line"><span class="token function">callback</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//实际上传什么，就要把这个参数当成什么来用</span></span>
<span class="line"><span class="token comment">//要是传个方法就要在方法里找个合适的地方调用一下</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//你知道需要传方法却传了一个数字，更定不能调用，就会报错</span></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VM1038</span><span class="token operator">:</span><span class="token number">2</span> before</span>
<span class="line"><span class="token constant">VM1038</span><span class="token operator">:</span><span class="token number">3</span> Uncaught TypeError<span class="token operator">:</span> fun is not a <span class="token keyword">function</span></span>
<span class="line">    at <span class="token function">test</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">5</span><span class="token punctuation">)</span></span>
<span class="line">    at <span class="token operator">&lt;</span>anonymous<span class="token operator">&gt;</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span></span>
<span class="line">test @ <span class="token constant">VM1038</span><span class="token operator">:</span><span class="token number">3</span></span>
<span class="line"><span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span> @ <span class="token constant">VM1060</span><span class="token operator">:</span><span class="token number">1</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am callback!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//结果</span></span>
<span class="line"><span class="token constant">VM1038</span><span class="token operator">:</span><span class="token number">2</span> before</span>
<span class="line"><span class="token constant">VM1151</span><span class="token operator">:</span><span class="token number">2</span> <span class="token constant">I</span> am callback<span class="token operator">!</span></span>
<span class="line"><span class="token constant">VM1038</span><span class="token operator">:</span><span class="token number">4</span> after</span>
<span class="line"></span>
<span class="line"><span class="token comment">//callback就是个方法的名字</span></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am callback!&quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fun</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;before&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">fun</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;after&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//可以直接传名字</span></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VM1296</span><span class="token operator">:</span><span class="token number">2</span> before</span>
<span class="line"><span class="token constant">VM1255</span><span class="token operator">:</span><span class="token number">2</span> <span class="token constant">I</span> am callback<span class="token operator">!</span><span class="token number">10</span></span>
<span class="line"><span class="token constant">VM1296</span><span class="token operator">:</span><span class="token number">5</span> after</span>
<span class="line"></span>
<span class="line"><span class="token comment">//也能直接传个方法体进去</span></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;I am callback!&quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token constant">VM1296</span><span class="token operator">:</span><span class="token number">2</span> before</span>
<span class="line"><span class="token constant">VM1363</span><span class="token operator">:</span><span class="token number">2</span> <span class="token constant">I</span> am callback<span class="token operator">!</span><span class="token number">10</span></span>
<span class="line"><span class="token constant">VM1296</span><span class="token operator">:</span><span class="token number">5</span> after</span>
<span class="line"></span>
<span class="line"><span class="token comment">//直接调用方法体也行</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VM1427</span><span class="token operator">:</span><span class="token number">2</span> <span class="token number">123</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> <span class="token function-variable function">a</span>  <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//拿名字调用也行</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VM1452</span><span class="token operator">:</span><span class="token number">2</span> <span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1、settimeout" tabindex="-1"><a class="header-anchor" href="#_1、settimeout"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81settimeout" target="_blank" rel="noopener noreferrer">#</a>1、setTimeout</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//一次性定时器，会在多少毫秒后执行这个函数</span></span>
<span class="line"><span class="token comment">//里边的是匿名函数，也叫回调函数（就是等过了两秒后回过头来再调用这个函数）</span></span>
<span class="line"><span class="token comment">//返回值是个定时器，这个方法是在未来去执行某个函数</span></span>
<span class="line"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//如果时间未到，不想让他执行了，就需要取消这个定时器</span></span>
<span class="line"><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、setinterval" tabindex="-1"><a class="header-anchor" href="#_2、setinterval"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81setinterval" target="_blank" rel="noopener noreferrer">#</a>2、setInterval</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//周期性定时器，会每隔多少毫秒后执行这个函数</span></span>
<span class="line"><span class="token comment">//里边的是匿名函数，也叫回调函数（就是等过了两秒后回过头来再调用这个函数）</span></span>
<span class="line"><span class="token comment">//返回值是个定时器，这个方法是在未来去执行某个函数</span></span>
<span class="line"><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span> <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//如果时间未到，或者中途不想让他执行了，就需要取消这个定时器</span></span>
<span class="line"><span class="token function">clearInterval</span><span class="token punctuation">(</span>timer<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、浏览器自带小型数据库" tabindex="-1"><a class="header-anchor" href="#_3、浏览器自带小型数据库"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E8%87%AA%E5%B8%A6%E5%B0%8F%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener noreferrer">#</a>3、浏览器自带小型数据库</span></a></h3><p>为每一个网址提供两个小型数据库</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//localStorage只要不人为删除，会浏览器被删除数据会一直在</span></span>
<span class="line"><span class="token comment">//增加或修改一个</span></span>
<span class="line">window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//获取</span></span>
<span class="line">window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//删除一个</span></span>
<span class="line">window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//清空</span></span>
<span class="line">window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//sessionStorage网页被关闭就没有了</span></span>
<span class="line"><span class="token comment">//增加或修改一个</span></span>
<span class="line">window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;lucy&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//获取</span></span>
<span class="line">window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//删除一个</span></span>
<span class="line">window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//清空</span></span>
<span class="line">window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、弹窗其实没求用" tabindex="-1"><a class="header-anchor" href="#_4、弹窗其实没求用"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_4%E3%80%81%E5%BC%B9%E7%AA%97%E5%85%B6%E5%AE%9E%E6%B2%A1%E6%B1%82%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>4、弹窗其实没求用</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//弹个提示窗口，调试也不要用，不优雅</span></span>
<span class="line"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//弹出确认框</span></span>
<span class="line"><span class="token comment">//点击确定就是true 点击否就是false</span></span>
<span class="line"><span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&quot;您确定要退出吗?&quot;</span><span class="token punctuation">)</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//弹出信息框</span></span>
<span class="line"><span class="token comment">//输入信息后点击确定返回填的内容，点击取消返回none</span></span>
<span class="line"><span class="token keyword">var</span> message <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请填写您的手机号！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token constant">VM3797</span><span class="token operator">:</span><span class="token number">2</span> <span class="token number">1373838438</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> message <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入名字：&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line">message</span>
<span class="line"><span class="token string">&quot;张楠&quot;</span></span>
<span class="line"><span class="token keyword">var</span> message <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入名字：&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line">message</span>
<span class="line"><span class="token string">&quot;&quot;</span></span>
<span class="line"><span class="token keyword">var</span> message <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入名字：&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">undefined</span></span>
<span class="line">message</span>
<span class="line"><span class="token keyword">null</span></span>
<span class="line"><span class="token keyword">var</span> message <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;请输入名字：&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;liankun&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、history" tabindex="-1"><a class="header-anchor" href="#_5、history"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_5%E3%80%81history" target="_blank" rel="noopener noreferrer">#</a>5、history</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//回退</span></span>
<span class="line">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//向前</span></span>
<span class="line">history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//回退</span></span>
<span class="line">history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//向前</span></span>
<span class="line">window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、navigator" tabindex="-1"><a class="header-anchor" href="#_6、navigator"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_6%E3%80%81navigator" target="_blank" rel="noopener noreferrer">#</a>6、navigator</span></a></h3><p>这个属性提供了一写浏览器的属性，比如浏览器类型，版本之类的信息。</p><h3 id="_5、一点注意" tabindex="-1"><a class="header-anchor" href="#_5、一点注意"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_5%E3%80%81%E4%B8%80%E7%82%B9%E6%B3%A8%E6%84%8F" target="_blank" rel="noopener noreferrer">#</a>5、一点注意</span></a></h3><p>在浏览器模型中，调用的方法或属性其实是属于window对象的</p><p>你在最外层定义一个方法或者一个变量其实是赋给了window对象</p><p>在浏览器模型中，调用window的方法可以省略window. 也可以不省略，如下：</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">window.localStorage.setItem(&quot;name&quot;,&quot;lucy&quot;)</span>
<span class="line">localStorage.setItem(&quot;name&quot;,&quot;lucy&quot;)</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器编程中，全局的变量，就是直接在最外边定义变量的时候尽量避开name，应为window有name属性，你再定义就覆盖了人家的了，当然在方法里，对象中可以随便使用。</p><h2 id="第五章-事件" tabindex="-1"><a class="header-anchor" href="#第五章-事件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>第五章 事件</span></a></h2><p>事件是为了让我们更好的去和页面进行交互。</p><p>事件一般是定义在元素节点上的，所以我们一般称之为给元素节点绑定一个事件。</p><h2 id="一-、定义事件" tabindex="-1"><a class="header-anchor" href="#一-、定义事件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80-%E3%80%81%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>一 、定义事件</span></a></h2><h3 id="_1-addeventlistener" tabindex="-1"><a class="header-anchor" href="#_1-addeventlistener"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-addeventlistener" target="_blank" rel="noopener noreferrer">#</a>（1）addEventListener</span></a></h3><p>最常用，大神都是这么写。</p><p>康永亮说兼容性问题，大家可以自行查阅资料。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-onclick" tabindex="-1"><a class="header-anchor" href="#_2-onclick"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-onclick" target="_blank" rel="noopener noreferrer">#</a>（2）onclick</span></a></h3><p>一定要知道，能少用就少用把。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">div1<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-标签内使用" tabindex="-1"><a class="header-anchor" href="#_3-标签内使用"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3-%E6%A0%87%E7%AD%BE%E5%86%85%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>（3）标签内使用</span></a></h3><p>也常用</p><div class="language-html line-numbers-mode" data-highlighter="prismjs" data-ext="html" data-title="html"><pre><code><span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>content aaa<span class="token punctuation">&quot;</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>div1<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>bbb<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span>
<span class="line"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、清除事件" tabindex="-1"><a class="header-anchor" href="#二、清除事件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E6%B8%85%E9%99%A4%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>二、清除事件</span></a></h2><h4 id="_1-方式一" tabindex="-1"><a class="header-anchor" href="#_1-方式一"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-%E6%96%B9%E5%BC%8F%E4%B8%80" target="_blank" rel="noopener noreferrer">#</a>（1）方式一</span></a></h4><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">或者</span>
<span class="line">div1<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-方式二" tabindex="-1"><a class="header-anchor" href="#_2-方式二"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-%E6%96%B9%E5%BC%8F%E4%BA%8C" target="_blank" rel="noopener noreferrer">#</a>（2）方式二</span></a></h4><p>使用此方法，必须将回调函数定义在外边，不能使用匿名回调</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">callback</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">var</span> div1 <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//添加一个事件</span></span>
<span class="line">div1<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment">//移除一个事件</span></span>
<span class="line">div1<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span>callback<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、事件分类" tabindex="-1"><a class="header-anchor" href="#三、事件分类"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E4%BA%8B%E4%BB%B6%E5%88%86%E7%B1%BB" target="_blank" rel="noopener noreferrer">#</a>三、事件分类</span></a></h2><h3 id="_1-鼠标事件" tabindex="-1"><a class="header-anchor" href="#_1-鼠标事件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1-%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>（1）鼠标事件</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">（常用）</span>
<span class="line">onclick：点击某个对象时触发</span>
<span class="line">ondblclick：双击某个对象时触发</span>
<span class="line">onmouseover：鼠标移入某个元素时触发</span>
<span class="line">onmouseout：鼠标移出某个元素时触发</span>
<span class="line"></span>
<span class="line">（知道，不用）</span>
<span class="line">onmouseenter：鼠标进入某个元素时触发</span>
<span class="line">onmouseleave：鼠标离开某个元素时触发</span>
<span class="line">onmousedown：鼠标按下时触发</span>
<span class="line">onmouseup：鼠标抬起时触发</span>
<span class="line">onmousemove：鼠标被移动时触发</span>
<span class="line">onwheel：鼠标滚轮滚动时触发</span>
<span class="line">oncontextmenu：点击鼠标右键时触发</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-键盘事件" tabindex="-1"><a class="header-anchor" href="#_2-键盘事件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2-%E9%94%AE%E7%9B%98%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>（2）键盘事件</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">键盘事件</span>
<span class="line">onkeydown：键盘的键按下时触发</span>
<span class="line">onkeyup：键盘的键放开时触发</span>
<span class="line">onkeypress：按下或按住键盘键时触发</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-表单事件" tabindex="-1"><a class="header-anchor" href="#_3-表单事件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_3-%E8%A1%A8%E5%8D%95%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>（3）表单事件</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">常用</span>
<span class="line">onfocus：元素获得焦点时触发</span>
<span class="line">onblur：元素失去焦点时触发</span>
<span class="line">onchange：元素内容改变时触发</span>
<span class="line">oninput：元素获取用户输入时触发</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-文档、浏览器-对象事件" tabindex="-1"><a class="header-anchor" href="#_4-文档、浏览器-对象事件"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_4-%E6%96%87%E6%A1%A3%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8-%E5%AF%B9%E8%B1%A1%E4%BA%8B%E4%BB%B6" target="_blank" rel="noopener noreferrer">#</a>（4）（文档、浏览器）对象事件</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">会用到</span>
<span class="line">onload：元素加载完时触发</span>
<span class="line"></span>
<span class="line">一辈子也用不了几次，知不知道都行</span>
<span class="line">onresize：浏览器窗口大小改变时触发</span>
<span class="line">onabort：图形的加载被中断时触发</span>
<span class="line">onerror：当加载文档或者图片时（没找到）发生的错误时触发</span>
<span class="line">onscroll：文档滚动时触发</span>
<span class="line">onpageshow：用户访问页面时触发</span>
<span class="line">onunload：用户退出页面时触发</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、事件冒泡和捕获" tabindex="-1"><a class="header-anchor" href="#四、事件冒泡和捕获"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%9B%9B%E3%80%81%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%92%8C%E6%8D%95%E8%8E%B7" target="_blank" rel="noopener noreferrer">#</a>四、事件冒泡和捕获</span></a></h2><p><strong>1、事件捕获</strong> 捕获型事件(event capturing)：事件从最不精确的对象(document 对象)开始触发，然后到最精确(也可以在窗口级别捕获事件，不过必须由开发人员特别指定)</p><p><strong>2、事件冒泡</strong> 冒泡型事件：事件按照从最特定的事件目标到最不特定的事件目标(document对象)的顺序触发。</p><p><strong>3、捕获和冒泡过程图</strong></p><p><img src="https://www.ydlclass.com/doc21xnv/assets/image-20211220183531957.5e907ad1.png" alt="image-20211220183531957"></p><p>事件是先进行捕获，后进行冒泡！</p><p>addEventListener的第三个参数如果是false表示在冒泡阶段处理回调函数，如果是true表示在捕获阶段处理回调函数。</p><p>怎么阻止事件冒泡？event.stopPropagation();</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">ul<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span></span>
<span class="line">            event<span class="token punctuation">.</span><span class="token function">stopPropagation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第六章-语法深入" tabindex="-1"><a class="header-anchor" href="#第六章-语法深入"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E5%85%AD%E7%AB%A0-%E8%AF%AD%E6%B3%95%E6%B7%B1%E5%85%A5" target="_blank" rel="noopener noreferrer">#</a>第六章 语法深入</span></a></h2><h2 id="一、回调函数" tabindex="-1"><a class="header-anchor" href="#一、回调函数"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0" target="_blank" rel="noopener noreferrer">#</a>一、回调函数</span></a></h2><p>在js里参数可以直接传方法。</p><p><strong>重要的事情说三遍，在java里不行，在java里不，行在java里不行。</strong></p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java" data-title="java"><pre><code><span class="line"><span class="token comment">//这个函数负责从后天获取数据</span></span>
<span class="line"><span class="token keyword">var</span> request <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;从服务器获取数据！&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">var</span> data <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token function">callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//回调通常是我们写的，等参数被请求完成后执行的函数</span></span>
<span class="line"><span class="token keyword">var</span> callb <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;我从服务器获取了数据：&quot;</span><span class="token operator">+</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&quot;div1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> data<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">request</span><span class="token punctuation">(</span>callb<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    </span>
<span class="line">结果：</span>
<span class="line"><span class="token constant">VM500</span><span class="token operator">:</span><span class="token number">2</span> 从服务器获取数据！</span>
<span class="line"><span class="token constant">VM679</span><span class="token operator">:</span><span class="token number">2</span> 我从服务器获取了数据：<span class="token number">123</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//使用之中回调函数，屏蔽了难以实现的延时操作，我们只需要关系几秒之后发生的事情（传入的回调方法）就行了</span></span>
<span class="line"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//模仿setTimeOut写一下</span></span>
<span class="line"><span class="token keyword">var</span> mySetTimeOut <span class="token operator">=</span> <span class="token function">function</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span>delay<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;已经过了&quot;</span><span class="token operator">+</span>delay<span class="token operator">+</span><span class="token string">&quot;毫秒&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">       <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">//写一个回调假装实现</span></span>
<span class="line"><span class="token function">mySetTimeOut</span><span class="token punctuation">(</span><span class="token function">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">结果：</span>
<span class="line"><span class="token constant">VM561</span><span class="token operator">:</span><span class="token number">2</span> 已经过了<span class="token number">2000</span>毫秒</span>
<span class="line"><span class="token constant">VM636</span><span class="token operator">:</span><span class="token number">2</span> <span class="token number">123</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="二、方法默认传入的形参" tabindex="-1"><a class="header-anchor" href="#二、方法默认传入的形参"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E6%96%B9%E6%B3%95%E9%BB%98%E8%AE%A4%E4%BC%A0%E5%85%A5%E7%9A%84%E5%BD%A2%E5%8F%82" target="_blank" rel="noopener noreferrer">#</a>二、方法默认传入的形参</span></a></h2><h3 id="_1、arguments" tabindex="-1"><a class="header-anchor" href="#_1、arguments"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81arguments" target="_blank" rel="noopener noreferrer">#</a>1、arguments</span></a></h3><p>方法会将调用时传入的所有参数封装成一个类数组。</p><p>js对传参要求的非常灵活，基本上就是想怎么传就怎么传。</p><p>所以最重要的一点就是，怎要合适的利用参数。</p><p>命名是个数字，就不要当成对象用，命名是个字符串就不要当成数组用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&#39;2342&#39;</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">456</span><span class="token punctuation">,</span><span class="token number">678</span><span class="token punctuation">,</span><span class="token number">789</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token constant">VM1546</span><span class="token operator">:</span><span class="token number">3</span> <span class="token number">1</span></span>
<span class="line"><span class="token constant">VM1546</span><span class="token operator">:</span><span class="token number">3</span> <span class="token number">2342</span></span>
<span class="line"><span class="token constant">VM1546</span><span class="token operator">:</span><span class="token number">3</span> <span class="token number">34</span></span>
<span class="line"><span class="token constant">VM1546</span><span class="token operator">:</span><span class="token number">3</span> <span class="token number">456</span></span>
<span class="line"><span class="token constant">VM1546</span><span class="token operator">:</span><span class="token number">3</span> <span class="token number">678</span></span>
<span class="line"><span class="token constant">VM1546</span><span class="token operator">:</span><span class="token number">3</span> <span class="token number">789</span></span>
<span class="line"><span class="token constant">VM1546</span><span class="token operator">:</span><span class="token number">3</span> <span class="token keyword">null</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span>  <span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style <span class="token operator">=</span> <span class="token string">&#39;background:blue&#39;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">test1</span><span class="token punctuation">(</span><span class="token string">&#39;div1&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;div2&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、this" tabindex="-1"><a class="header-anchor" href="#_2、this"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81this" target="_blank" rel="noopener noreferrer">#</a>2、this</span></a></h3><p><strong>this总是指向调用这个方法的实例对象。</strong></p><p>在浏览器中，直接定义一个方法，其实是定义在了window这个对象之中，所以直接调用方法其实是window.方法名()，因为在window环境下，所以window通常不用写。所有如果直接调用这个方法，this会指向window。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">和</span>
<span class="line">window<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">一样</span>
<span class="line">结果：</span>
<span class="line"><span class="token constant">VM1620</span><span class="token operator">:</span><span class="token number">2</span> Window <span class="token punctuation">{</span><span class="token literal-property property">parent</span><span class="token operator">:</span> Window<span class="token punctuation">,</span> <span class="token literal-property property">opener</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token literal-property property">top</span><span class="token operator">:</span> Window<span class="token punctuation">,</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">frames</span><span class="token operator">:</span> Window<span class="token punctuation">,</span> …<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;李兴&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">user<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token string">&quot;李兴&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//使用user调用print this就是这个user</span></span>
<span class="line">user<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VM1786</span><span class="token operator">:</span><span class="token number">4</span> User <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;李兴&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">print</span><span class="token operator">:</span> ƒ<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> dog <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;teddy&#39;</span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token function-variable function">say</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">var</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span></span>
<span class="line">                <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;my name is &#39;</span> <span class="token operator">+</span> that<span class="token punctuation">.</span>name<span class="token punctuation">)</span></span>
<span class="line">                <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">dog<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 这里say方法调用时的this指向调用say的dog对象，</span></span>
<span class="line"><span class="token comment">// 而setTimeout方法调用时是由window对象负责调用，</span></span>
<span class="line"><span class="token comment">// 所以setTimeoue的this指向window。</span></span>
<span class="line"><span class="token comment">// 如果要在setTimeout内使用dog对象需要在外边进行保存</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="this指向的改变" tabindex="-1"><a class="header-anchor" href="#this指向的改变"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#this%E6%8C%87%E5%90%91%E7%9A%84%E6%94%B9%E5%8F%98" target="_blank" rel="noopener noreferrer">#</a>this指向的改变</span></a></h4><p>使用call、apply、bind可以改变this的指向</p><p>1、第一个参数都是新的this对象</p><p>2、从第二个参数开始，需要传递say方法的实参，</p><p>3、call是以多个参数的方式传递，而apply是以数组形式传递</p><p>4、bind不能直接执行方法，而是返回一个方法，需要另行执行</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line">dog<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;刘奇&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span></span>
<span class="line">dog<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;刘奇&#39;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">var</span> fn <span class="token operator">=</span> dog<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;刘奇&#39;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、作用域" tabindex="-1"><a class="header-anchor" href="#三、作用域"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener noreferrer">#</a>三、作用域</span></a></h2><p>全局作用域只有一个，每个函数又都有作用域（环境）。</p><ul><li>编译器运行时会将变量定义在所在作用域</li><li>使用变量时会从当前作用域开始向上查找变量</li><li>作用域就像攀亲亲一样，晚辈总是可以向上辈要些东西</li></ul><h4 id="_1、作用域链" tabindex="-1"><a class="header-anchor" href="#_1、作用域链"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_1%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE" target="_blank" rel="noopener noreferrer">#</a>1、作用域链</span></a></h4><p>作用域链只向上查找，找到全局window即终止，应该尽量不要在全局作用域中添加变量。</p><p>函数被执行后其环境变量将从内存中删除。下面函数在每次执行后将删除函数内部的total变量。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">function count() {</span>
<span class="line">  let total = 0;</span>
<span class="line">}</span>
<span class="line">count();</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数每次调用都会创建一个新作用域</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> site <span class="token operator">=</span> <span class="token string">&#39;itnanls&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> hd <span class="token operator">=</span> <span class="token string">&#39;zn.com&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">let</span> cms <span class="token operator">=</span> <span class="token string">&#39;itnanls.cn&#39;</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hd<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>site<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果子函数被使用时父级环境将被保留</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//2,2</span></span>
<span class="line"><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//3,3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2、块作用域" tabindex="-1"><a class="header-anchor" href="#_2、块作用域"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_2%E3%80%81%E5%9D%97%E4%BD%9C%E7%94%A8%E5%9F%9F" target="_blank" rel="noopener noreferrer">#</a>2、块作用域</span></a></h4><p>使用 <code>let/const</code> 可以将变量声明在块作用域中（放在新的环境中，而不是全局中）</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//ReferenceError: a is not defined</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也可以通过下面的定时器函数来体验</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 <code>for</code> 循环中使用<code>let/const</code> 会在每一次迭代中重新生成不同的变量</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let arr = [];</span>
<span class="line">for (let i = 0; i &lt; 10; i++) {</span>
<span class="line">	arr.push((() =&gt; i));</span>
<span class="line">}</span>
<span class="line">console.log(arr[3]()); //3 如果使用var声明将是10</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在没有<code>let/const</code> 的历史中使用以下方式产生作用域</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">//自行构建闭包</span>
<span class="line">var arr = [];</span>
<span class="line">for (var i = 0; i &lt; 10; i++) {</span>
<span class="line">  (function (a) {</span>
<span class="line">      arr.push(()=&gt;a);</span>
<span class="line">  })(i);</span>
<span class="line">}</span>
<span class="line">console.log(arr[3]()); //3</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四、闭包使用" tabindex="-1"><a class="header-anchor" href="#四、闭包使用"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%9B%9B%E3%80%81%E9%97%AD%E5%8C%85%E4%BD%BF%E7%94%A8" target="_blank" rel="noopener noreferrer">#</a>四、闭包使用</span></a></h2><p>闭包指子函数可以访问外部作用域变量的函数特性，即使在子函数作用域外也可以访问。如果没有闭包那么在处理事件绑定，异步请求时都会变得困难。</p><ul><li>JS中的所有函数都是闭包</li><li>闭包一般在子函数本身作用域以外执行，即延伸作用域</li></ul><h3 id="一、基本示例" tabindex="-1"><a class="header-anchor" href="#一、基本示例"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E7%A4%BA%E4%BE%8B" target="_blank" rel="noopener noreferrer">#</a>一、基本示例</span></a></h3><p>前面在讲作用域时已经在使用闭包特性了，下面再次重温一下闭包。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;欣知&#39;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  	<span class="token keyword">return</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> xzcms <span class="token operator">=</span> <span class="token function">hd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">xzcms</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//欣知</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、使用闭包做计数器" tabindex="-1"><a class="header-anchor" href="#二、使用闭包做计数器"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%E5%81%9A%E8%AE%A1%E6%95%B0%E5%99%A8" target="_blank" rel="noopener noreferrer">#</a>二、使用闭包做计数器</span></a></h3><p>计时器中使用闭包来获取独有变量</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> adder <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">start</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">return</span> start<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">adder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">adder <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、使用闭包做缓存" tabindex="-1"><a class="header-anchor" href="#三、使用闭包做缓存"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E4%BD%BF%E7%94%A8%E9%97%AD%E5%8C%85%E5%81%9A%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">#</a>三、使用闭包做缓存</span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> plus <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">var</span> cache <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">            <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                <span class="token keyword">var</span> key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;走了缓存&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                    <span class="token keyword">return</span> cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;又计算了一次&#39;</span><span class="token punctuation">)</span></span>
<span class="line">                <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                    sum <span class="token operator">+=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span></span>
<span class="line">                <span class="token punctuation">}</span></span>
<span class="line">                cache<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">                <span class="token keyword">return</span> sum<span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、闭包问题" tabindex="-1"><a class="header-anchor" href="#四、闭包问题"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%9B%9B%E3%80%81%E9%97%AD%E5%8C%85%E9%97%AE%E9%A2%98" target="_blank" rel="noopener noreferrer">#</a>四、闭包问题</span></a></h3><p><strong>内存泄漏</strong></p><p>闭包特性中上级作用域会为函数保存数据，从而造成的如下所示的内存泄漏问题</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token operator">&lt;</span>body<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div desc<span class="token operator">=</span><span class="token string">&quot;zn&quot;</span><span class="token operator">&gt;</span>在线学习<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token operator">&lt;</span>div desc<span class="token operator">=</span><span class="token string">&quot;xzcms&quot;</span><span class="token operator">&gt;</span>开源产品<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span></span>
<span class="line"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span></span>
<span class="line">  <span class="token keyword">let</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  divs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过清除不需要的数据解决内存泄漏问题</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&quot;div&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">divs<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> desc <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">&quot;desc&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  item<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="第七章-原型" tabindex="-1"><a class="header-anchor" href="#第七章-原型"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E4%B8%83%E7%AB%A0-%E5%8E%9F%E5%9E%8B" target="_blank" rel="noopener noreferrer">#</a>第七章 原型</span></a></h2><h3 id="一、原型对象" tabindex="-1"><a class="header-anchor" href="#一、原型对象"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1" target="_blank" rel="noopener noreferrer">#</a>一、原型对象</span></a></h3><p>每个对象都有一个原型<code>prototype</code>对象，通过函数创建的对象也将拥有这个原型对象。原型是一个指向对象的指针。</p><ul><li>可以将原型理解为对象的父亲，对象从原型对象继承来属性</li><li>原型就是对象除了是某个对象的父母外没有什么特别之处</li><li>所有函数的原型默认是 <code>Object</code>的实例，所以可以使用<code>toString/toValues/isPrototypeOf</code> 等方法的原因</li><li>使用原型对象为多个对象共享属性或方法</li><li>如果对象本身不存在属性或方法将到原型上查找</li><li>使用原型可以解决，通过构建函数创建对象时复制多个函数造成的内存占用问题</li><li>原型包含 <code>constructor</code> 属性，指向构造函数</li><li>对象包含 <code>__proto__</code> 指向他的原型对象</li><li>函数有一个prototype属性，当函数作为构造函数时，new出来的对象的<code>__proto__</code>指向prototype</li></ul><p>下例使用的就是数组原型对象的 <code>concat</code> 方法完成的连接操作</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let zn = [&quot;a&quot;];</span>
<span class="line">console.log(zn.concat(&quot;b&quot;));</span>
<span class="line">console.log(zn);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下创建的对象都有原型</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;楠哥&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>以下x、y的原型都为元对象Object，即JS中的根对象</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">==</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们也可以创建一个极简对象（纯数据字典对象）没有原型（原型为null)</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zn<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> ng <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token string">&quot;楠哥&quot;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ng<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Error</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//Object.keys是静态方法，不是原型方法所以是可以使用的</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>ng<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数拥有多个原型，<code>prototype</code> 用于实例对象使用，<code>__proto__</code>用于函数对象使用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">User<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function-variable function">view</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;User function view method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">User<span class="token punctuation">.</span><span class="token function">view</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;楠哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">zn<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">.</span>prototype <span class="token operator">==</span> zn<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是原型关系分析，与方法继承的示例</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">zn<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;楠哥&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hodunren.com&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">zn<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> ng <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">ng<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">User<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是使用构造函数创建对象的原型体现</p><ul><li>构造函数拥有原型</li><li>创建对象时构造函数把原型赋予对象</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">function User() {}</span>
<span class="line">let ng = new User();</span>
<span class="line">console.log(ng.__proto__ == User.prototype);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面使用数组会产生多级继承继原型链</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let zn = [];</span>
<span class="line">console.log(zn);</span>
<span class="line">console.log(zn.__proto__ == Array.prototype);</span>
<span class="line"></span>
<span class="line">let str = &quot;&quot;;</span>
<span class="line">console.log(str.__proto__ == String.prototype);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面使用 <code>setPrototypeOf</code> 与 <code>getPrototypeOf</code> 获取与设置原型</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let zn = {};</span>
<span class="line">let parent = { name: &quot;parent&quot; };</span>
<span class="line">Object.setPrototypeOf(zn, parent);</span>
<span class="line">console.log(zn);</span>
<span class="line">console.log(Object.getPrototypeOf(zn));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用自定义构造函数创建的对象的原型体现</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">function User() {}</span>
<span class="line">let zn = new User();</span>
<span class="line">console.log(zn);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>constructor存在于prototype原型中，用于指向构建函数的引用。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">zn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token string">&quot;show method&quot;</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">zn</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">obj<span class="token punctuation">.</span>constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//show method</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用对象的 <code>constructor</code> 创建对象</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createByObject</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> constructor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">constructor</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;楠哥&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> ng <span class="token operator">=</span> <span class="token function">createByObject</span><span class="token punctuation">(</span>zn<span class="token punctuation">,</span> <span class="token string">&quot;楠哥&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ng<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="二、原型链" tabindex="-1"><a class="header-anchor" href="#二、原型链"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE" target="_blank" rel="noopener noreferrer">#</a>二、原型链</span></a></h3><p>通过引用类型的原型，继承另一个引用类型的属性与方法，这也是实现继承的步骤。</p><p>使用<code>Object.setPrototypeOf</code> 可设置对象的原型，下面的示例中继承关系为 obj&gt;zn&gt;cms。</p><p><code>Object.getPrototypeOf</code> 用于获取一个对象的原型。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let obj = {</span>
<span class="line">  name: &quot;楠哥&quot;</span>
<span class="line">};</span>
<span class="line">let zn = {</span>
<span class="line">  web: &quot;xinzhi&quot;</span>
<span class="line">};</span>
<span class="line">let cms = {</span>
<span class="line">  soft: &quot;zncms&quot;</span>
<span class="line">};</span>
<span class="line">//让obj继承zn，即设置obj的原型为zn</span>
<span class="line">Object.setPrototypeOf(obj, zn);</span>
<span class="line">Object.setPrototypeOf(zn, cms);</span>
<span class="line">console.log(obj.web);</span>
<span class="line">console.log(Object.getPrototypeOf(zn) == cms); //true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三、原型检测" tabindex="-1"><a class="header-anchor" href="#三、原型检测"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E5%8E%9F%E5%9E%8B%E6%A3%80%E6%B5%8B" target="_blank" rel="noopener noreferrer">#</a>三、原型检测</span></a></h3><p>instanceof 检测构造函数的 <code>prototype</code> 属性是否出现在某个实例对象的原型链上</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token constant">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">B</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> c<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>a <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>b <span class="token keyword">instanceof</span> <span class="token class-name">C</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>c <span class="token keyword">instanceof</span> <span class="token class-name">B</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用<code>isPrototypeOf</code>检测一个对象是否是另一个对象的原型链中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="四、属性遍历" tabindex="-1"><a class="header-anchor" href="#四、属性遍历"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%9B%9B%E3%80%81%E5%B1%9E%E6%80%A7%E9%81%8D%E5%8E%86" target="_blank" rel="noopener noreferrer">#</a>四、属性遍历</span></a></h3><p>使用<code>in</code> 检测原型链上是否存在属性，使用 <code>hasOwnProperty</code> 只检测当前对象</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let a = { url: &quot;xinzhi&quot; };</span>
<span class="line">let b = { name: &quot;楠哥&quot; };</span>
<span class="line">Object.setPrototypeOf(a, b);</span>
<span class="line">console.log(&quot;name&quot; in a);</span>
<span class="line">console.log(a.hasOwnProperty(&quot;name&quot;));</span>
<span class="line">console.log(a.hasOwnProperty(&quot;url&quot;));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>for/in</code> 遍历时同时会遍历原型上的属性如下例</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let zn = { name: &quot;楠哥&quot; };</span>
<span class="line">let ng = Object.create(zn, {</span>
<span class="line">  url: {</span>
<span class="line">    value: &quot;xinzhi.com&quot;,</span>
<span class="line">    enumerable: true</span>
<span class="line">  }</span>
<span class="line">});</span>
<span class="line">for (const key in ng) {</span>
<span class="line">  console.log(key);</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>hasOwnProperty</code> 方法判断对象是否存在属性，而不会查找原型。所以如果只想遍历对象属性使用以下代码</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let zn = { name: &quot;楠哥&quot; };</span>
<span class="line">let ng = Object.create(zn, {</span>
<span class="line">  url: {</span>
<span class="line">    value: &quot;xinzhi.com&quot;,</span>
<span class="line">    enumerable: true</span>
<span class="line">  }</span>
<span class="line">});</span>
<span class="line">for (const key in ng) {</span>
<span class="line">  if (ng.hasOwnProperty(key)) {</span>
<span class="line">    console.log(key);</span>
<span class="line">  }</span>
<span class="line">}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="五、借用原型" tabindex="-1"><a class="header-anchor" href="#五、借用原型"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%94%E3%80%81%E5%80%9F%E7%94%A8%E5%8E%9F%E5%9E%8B" target="_blank" rel="noopener noreferrer">#</a>五、借用原型</span></a></h3><p>使用 <code>call</code> 或 <code>apply</code> 可以借用其他原型方法完成功能。</p><p>下面的ng对象不能使用<code>max</code>方法，但可以借用 zn 对象的原型方法</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let zn = {</span>
<span class="line">  data: [1, 2, 3, 4, 5]</span>
<span class="line">};</span>
<span class="line">Object.setPrototypeOf(zn, {</span>
<span class="line">  max: function() {</span>
<span class="line">    return this.data.sort((a, b) =&gt; b - a)[0];</span>
<span class="line">  }</span>
<span class="line">});</span>
<span class="line">console.log(zn.max());</span>
<span class="line"></span>
<span class="line">let ng = {</span>
<span class="line">  lessons: { js: 100, php: 78, node: 78, linux: 125 },</span>
<span class="line">  get data() {</span>
<span class="line">    return Object.values(this.lessons);</span>
<span class="line">  }</span>
<span class="line">};</span>
<span class="line">console.log(zn.__proto__.max.apply(ng));</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上例中如果方法可以传参，那就可以不在 <code>ng</code> 对象中定义 <code>getter</code> 方法了</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>zn<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function-variable function">max</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> b <span class="token operator">-</span> a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zn<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>zn<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> ng <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">lessons</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">js</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">php</span><span class="token operator">:</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token literal-property property">linux</span><span class="token operator">:</span> <span class="token number">125</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zn<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>ng<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>ng<span class="token punctuation">.</span>lessons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为 <code>Math.max</code> 就是获取最大值的方法，所以代码可以再次优化</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>zn<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">let</span> ng <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">lessons</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">js</span><span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token literal-property property">php</span><span class="token operator">:</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token literal-property property">linux</span><span class="token operator">:</span> <span class="token number">125</span> <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>ng<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>ng<span class="token punctuation">.</span>lessons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是获取设置了 <code>class</code> 属性的按钮，但DOM节点不能直接使用数组的<code>filter</code> 等方法，但借用数组的原型方法就可以操作了。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;body&gt;</span>
<span class="line">  &lt;button message=&quot;楠哥&quot; class=&quot;red&quot;&gt;楠哥&lt;/button&gt;</span>
<span class="line">  &lt;button message=&quot;zncms&quot;&gt;zncms&lt;/button&gt;</span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;script&gt;</span>
<span class="line">  let btns = document.querySelectorAll(&quot;button&quot;);</span>
<span class="line">  btns = Array.prototype.filter.call(btns, item =&gt; {</span>
<span class="line">    return item.hasAttribute(&quot;class&quot;);</span>
<span class="line">  });</span>
<span class="line">&lt;/script&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="" tabindex="-1"><a class="header-anchor" href="#"><span></span></a></h2><h3 id="六、prototype" tabindex="-1"><a class="header-anchor" href="#六、prototype"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%85%AD%E3%80%81prototype" target="_blank" rel="noopener noreferrer">#</a>六、prototype</span></a></h3><p>函数也是对象也有原型，函数有 <code>prototype</code> 属性指向他的原型</p><p>为构造函数设置的原型指，当使用构造函数创建对象时把这个原型赋予给这个对象</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">function User(name) {</span>
<span class="line">  this.name = name;</span>
<span class="line">}</span>
<span class="line">User.prototype = {</span>
<span class="line">  show() {</span>
<span class="line">    return this.name;</span>
<span class="line">  }</span>
<span class="line">};</span>
<span class="line">let ng = new User(&quot;楠哥&quot;);</span>
<span class="line">console.log(ng.show());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数默认<code>prototype</code> 指包含一个属性 <code>constructor</code> 的对象，<code>constructor</code> 指向当前构造函数</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">function User(name) {</span>
<span class="line">  this.name = name;</span>
<span class="line">}</span>
<span class="line">let ng = new User(&quot;楠哥&quot;);</span>
<span class="line">console.log(ng);</span>
<span class="line">console.log(User.prototype.constructor == User); //true</span>
<span class="line">console.log(ng.__proto__ == User.prototype); //true</span>
<span class="line"></span>
<span class="line">let lisi = new ng.constructor(&quot;李四&quot;);</span>
<span class="line">console.log(lisi.__proto__ == ng.__proto__); //true</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原型中保存引用类型会造成对象共享属性，所以一般只会在原型中定义方法。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">function User() {}</span>
<span class="line">User.prototype = {</span>
<span class="line">  lessons: [&quot;JS&quot;, &quot;VUE&quot;]</span>
<span class="line">};</span>
<span class="line">const lisi = new User();</span>
<span class="line">const wangwu = new User();</span>
<span class="line"></span>
<span class="line">lisi.lessons.push(&quot;CSS&quot;);</span>
<span class="line"></span>
<span class="line">console.log(lisi.lessons); //[&quot;JS&quot;, &quot;VUE&quot;, &quot;CSS&quot;]</span>
<span class="line">console.log(wangwu.lessons); //[&quot;JS&quot;, &quot;VUE&quot;, &quot;CSS&quot;]</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为Object原型对象添加方法，将影响所有函数</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">&lt;body&gt;</span>
<span class="line">  &lt;button onclick=&quot;this.hide()&quot;&gt;楠哥&lt;/button&gt;</span>
<span class="line">&lt;/body&gt;</span>
<span class="line">&lt;script&gt;</span>
<span class="line">  Object.prototype.hide = function() {</span>
<span class="line">    this.style.display = &quot;none&quot;;</span>
<span class="line">  };</span>
<span class="line">&lt;/script&gt;</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>了解了原型后可以为系统对象添加方法，比如为字符串添加了一截断函数。</p><ul><li>不能将系统对象的原型直接赋值</li></ul><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">String.prototype.truncate = function (len = 5) {</span>
<span class="line">	return this.length &lt;= len ? this : this.substr(0, len) + &#39;...&#39;;</span>
<span class="line">}</span>
<span class="line">console.log(&#39;楠哥每天不断视频教程&#39;.truncate(3)); //楠哥...</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="七、object-create" tabindex="-1"><a class="header-anchor" href="#七、object-create"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%83%E3%80%81object-create" target="_blank" rel="noopener noreferrer">#</a>七、Object.create</span></a></h3><p>使用<code>Object.create</code>创建一个新对象时使用现有对象做为新对象的原型对象</p><p>使用<code>Object.create</code> 设置对象原型</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let user = {</span>
<span class="line">  show() {</span>
<span class="line">    return this.name;</span>
<span class="line">  }</span>
<span class="line">};</span>
<span class="line"></span>
<span class="line">let zn = Object.create(user);</span>
<span class="line">zn.name = &quot;楠哥&quot;;</span>
<span class="line">console.log(zn.show());</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>强以在设置时使用第二个参数设置新对象的属性</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let user = {</span>
<span class="line">  show() {</span>
<span class="line">    return this.name;</span>
<span class="line">  }</span>
<span class="line">};</span>
<span class="line">let zn = Object.create(user, {</span>
<span class="line">  name: {</span>
<span class="line">    value: &quot;楠哥&quot;</span>
<span class="line">  }</span>
<span class="line">});</span>
<span class="line">console.log(zn);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="八、proto" tabindex="-1"><a class="header-anchor" href="#八、proto"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%85%AB%E3%80%81-proto" target="_blank" rel="noopener noreferrer">#</a>八、<em><em>proto</em></em></span></a></h3><p>在实例化对象上存在 <strong>proto</strong> 记录了原型，所以可以通过对象访问到原型的属性或方法。</p><ul><li><code>__proto__</code> 不是对象属性，理解为<code>prototype</code> 的 <code>getter/setter</code> 实现，他是一个非标准定义</li><li><code>__proto__</code> 内部使用<code>getter/setter</code> 控制值，所以只允许对象或null</li><li>建议使用 <code>Object.setPrototypeOf</code> 与<code>Object.getProttoeypOf</code> 替代 <code>__proto__</code></li></ul><p>下面修改对象的 <code>__proto__</code> 是不会成功的，因为<code>_proto__</code> 内部使用<code>getter/setter</code> 控制值，所以只允许对象或null</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let ng = {};</span>
<span class="line">ng.__proto__ = &quot;楠哥&quot;;</span>
<span class="line">console.log(ng);</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面定义的<code>__proto__</code> 就会成功，因为这是一个极简对象，没有原型对象所以不会影响<code>__proto__</code>赋值。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">let zn = Object.create(null);</span>
<span class="line">zn.__proto__ = &quot;楠哥&quot;;</span>
<span class="line">console.log(zn); //{__proto__: &quot;楠哥&quot;}</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面通过改变对象的 <code>__proto__</code> 原型对象来实现继承，继承可以实现多层,</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">let</span> zn <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;楠哥&quot;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> xinzhi <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> ng <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">用户: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">xinzhi<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> ng<span class="token punctuation">;</span></span>
<span class="line">zn<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> xinzhi<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zn<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zn<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zn<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>构造函数中的 <code>__proto__</code> 使用</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">show</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">	<span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">姓名:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，年龄:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> lisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;李四&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&#39;小明&#39;</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以使用 <code>__proto__</code> 或 <code>Object.setPrototypeOf</code> 设置对象的原型，使用<code>Object.getProttoeypOf</code> 获取对象原型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">getName</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line">  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">let</span> lisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">&quot;李四&quot;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span>lisi<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//李四</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对象设置属性，只是修改对象属性并不会修改原型属性，使用<code>hasOwnProperty</code> 判断对象本身是否含有属性并不会检测原型。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> lisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> wangwu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">lisi<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;小明&quot;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//修改原型属性后</span></span>
<span class="line">lisi<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wangwu<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//删除对象属性后</span></span>
<span class="line"><span class="token keyword">delete</span> lisi<span class="token punctuation">.</span>name<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用 <code>in</code> 会检测原型与对象，而 <code>hasOwnProperty</code> 只检测对象，所以结合后可判断属性是否在原型中</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token class-name">User</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;楠哥&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> lisi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//in会在原型中检测</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span> <span class="token keyword">in</span> lisi<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//hasOwnProperty 检测对象属性</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lisi<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用建议" tabindex="-1"><a class="header-anchor" href="#使用建议"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BD%BF%E7%94%A8%E5%BB%BA%E8%AE%AE" target="_blank" rel="noopener noreferrer">#</a>使用建议</span></a></h3><p>通过前介绍我们知道可以使用多种方式设置原型，下面是按时间顺序的排列</p><ol><li><code>prototype</code> 构造函数的原型属性</li><li><code>Object.create</code> 创建对象时指定原型</li><li><code>__proto__</code> 声明自定义的非标准属性设置原型，解决之前通过 <code>Object.create</code> 定义原型，而没提供获取方法</li><li><code>Object.setPrototypeOf</code> 设置对象原型</li></ol><p>这几种方式都可以管理原型，一般以我个人情况来讲使用 <code>prototype</code> 更改构造函数原型，使用 <code>Object.setPrototypeOf</code> 与 <code>Object.getPrototypeOf</code> 获取或设置原型。</p><h2 id="第八章-正则表达式" tabindex="-1"><a class="header-anchor" href="#第八章-正则表达式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E5%85%AB%E7%AB%A0-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>第八章 正则表达式</span></a></h2><h2 id="一、什么是正则表达式" tabindex="-1"><a class="header-anchor" href="#一、什么是正则表达式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E4%BB%80%E4%B9%88%E6%98%AF%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>一、什么是正则表达式</span></a></h2><p>正则表达式是由一个字符序列形成的搜索模式，搜索模式可用于文本搜索和文本替换以及文本检测。</p><h2 id="二、创建正则表达式" tabindex="-1"><a class="header-anchor" href="#二、创建正则表达式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%8C%E3%80%81%E5%88%9B%E5%BB%BA%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>二、创建正则表达式</span></a></h2><p>JS正则表达式的创建有两种方式： <code>new RegExp()</code> 和 直接字面量。</p><div class="language-dart line-numbers-mode" data-highlighter="prismjs" data-ext="dart" data-title="dart"><pre><code><span class="line"><span class="token keyword">var</span> re<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//RegExp 是JS中的类，同Array类似。然而这个创建方法没有指定表达式内容</span></span>
<span class="line">re<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//最简单的正则表达式，将匹配字母a </span></span>
<span class="line">re<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span> <span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;a&quot;</span></span><span class="token punctuation">,</span><span class="token string-literal"><span class="token string">&quot;i&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//重载的构造函数，其第二个参数指定将不区分大小写</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，对于第二个参数，为可选参数，常用的有：</p><ul><li><code>g</code>：全文查找；</li><li><code>i</code>：不区分大小写；</li></ul><p>然而更为常见的正则表达式创建法则是：字面量的声明方式。 即：</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">var</span> re<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">a</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//其作用同：re=new RegExp (&quot;a&quot;,&quot;i&quot;)，而且更常用。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三、正则表达式本身的方法" tabindex="-1"><a class="header-anchor" href="#三、正则表达式本身的方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%89%E3%80%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9C%AC%E8%BA%AB%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>三、正则表达式本身的方法</span></a></h2><p>在 JavaScript 中，RegExp 对象是一个预定义了属性和方法的正则表达式对象。</p><ul><li><code>test()</code> 方法 <code>test()</code> 方法用于检测一个字符串是否匹配某个模式，如果字符串中含有匹配的文本，则返回<code>true</code>，否则返回 <code>false</code>。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token comment">//以下实例用于搜索字符串中的字符 &quot;e&quot;：</span></span>
<span class="line"><span class="token keyword">var</span> patt <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">e</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span></span>
<span class="line">patt<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">&quot;The best things in life are free!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">字符串中含有 <span class="token string">&quot;e&quot;</span>，所以该实例输出为：</span>
<span class="line"><span class="token boolean">true</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">以上两行代码可以合并为一行：</span>
<span class="line">/e/.test<span class="token punctuation">(</span><span class="token string">&quot;The best things in life are free!&quot;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>exec()</code> 方法 <code>exec()</code> 方法用于检索字符串中的正则表达式的匹配。 该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 <code>null</code>。 以下实例用于搜索字符串中的字母 <code>e</code>:</li></ul><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre><code><span class="line">/e/.exec<span class="token punctuation">(</span><span class="token string">&quot;The best things in life are free!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">字符串中含有 <span class="token string">&quot;e&quot;</span>，所以该实例输出为:</span>
<span class="line">e</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>比较常用的就是正则表达式的<code>test</code>方法了，因为大多只需要知道：某个字符串是否匹配某正则表达式，是则<code>True</code>，否则为<code>False</code>。</p><h2 id="四、字符串对象中与正则表达式有关的方法" tabindex="-1"><a class="header-anchor" href="#四、字符串对象中与正则表达式有关的方法"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%9B%9B%E3%80%81%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E8%B1%A1%E4%B8%AD%E4%B8%8E%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%9C%89%E5%85%B3%E7%9A%84%E6%96%B9%E6%B3%95" target="_blank" rel="noopener noreferrer">#</a>四、字符串对象中与正则表达式有关的方法</span></a></h2><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : <code>search()</code>和 <code>replace()</code>。</p><ul><li><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">search()</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>方法</p><ol><li>检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</li></ol></li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token comment">//使用正则表达式搜索 &quot;Runoob&quot; 字符串，且不区分大小写：</span></span>
<span class="line"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&quot;Visit Runoob!&quot;</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token keyword">var</span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Runoob</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//输出结果为：</span></span>
<span class="line"><span class="token number">6</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>用于检索字符串中指定的子字符串。 <code>search</code>方法可使用字符串作为参数。字符串参数会转换为正则表达式：</li></ol><div class="language-csharp line-numbers-mode" data-highlighter="prismjs" data-ext="cs" data-title="cs"><pre><code><span class="line"><span class="token comment">//检索字符串中 &quot;Runoob&quot; 的子串：</span></span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> str <span class="token operator">=</span> <span class="token string">&quot;Visit Runoob!&quot;</span><span class="token punctuation">;</span> </span>
<span class="line"><span class="token class-name"><span class="token keyword">var</span></span> n <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>replace()</code> 方法 <code>replace()</code> 方法将接收字符串作为参数：</li></ul><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">var</span> str<span class="token operator">=</span><span class="token string">&quot;Visit W3CSchool!&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">var</span> n<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">&quot;W3CSchool&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;Runoob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果Visit Runoob!</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">//结果Visit W3CSchool!</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="五、常用语法分析" tabindex="-1"><a class="header-anchor" href="#五、常用语法分析"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%BA%94%E3%80%81%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90" target="_blank" rel="noopener noreferrer">#</a>五、常用语法分析</span></a></h2><h3 id="_5-1-、-、-的区别" tabindex="-1"><a class="header-anchor" href="#_5-1-、-、-的区别"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_5-1-%E3%80%81-%E3%80%81-%E7%9A%84%E5%8C%BA%E5%88%AB" target="_blank" rel="noopener noreferrer">#</a>5.1 ()、[]、{} 的区别</span></a></h3><p>先看个例子 校验字符串是否全由8位数字组成</p><div class="language-jsx line-numbers-mode" data-highlighter="prismjs" data-ext="jsx" data-title="jsx"><pre><code><span class="line"><span class="token keyword">function</span> <span class="token function">isStudentNo</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">var</span> reg<span class="token operator">=</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[0-9]{8}$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>   <span class="token comment">/*定义验证表达式*/</span></span>
<span class="line">    <span class="token keyword">return</span> reg<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">/*进行验证*/</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>[]</code>是定义匹配的字符范围。<code>[0-9]</code>表示查找任何从 0 至 9 的数字。</p><p><code>{}</code> 一般用来表示匹配的长度。<code>{8}</code>表示位数为8位。</p><p><code>()</code> 的作用是提取匹配的字符串。表达式中有几个<code>()</code>就会得到几个相应的匹配字符串。比如<code>(\\s+)</code>表示连续空格的字符串。</p><h3 id="_5-2-和" tabindex="-1"><a class="header-anchor" href="#_5-2-和"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_5-2-%E5%92%8C" target="_blank" rel="noopener noreferrer">#</a>5.2 ^ 和 $</span></a></h3><p><code>^</code> 匹配一个字符串的开头，比如 (<code>^a</code>) 就是匹配以字母<code>a</code>开头的字符串</p><p><code>$</code> 匹配一个字符串的结尾,比如 (<code>b$</code>) 就是匹配以字母<code>b</code>结尾的字符串</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">^\`还有另个一个作用就是取反，比如\`[^xyz]\`表示匹配的字符串不包含\`xyz</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>需要注意的是：如果<code>^</code>出现在<code>[]</code>中一般表示取反，而出现在其他地方则是匹配字符串的开头。</p><h3 id="_5-3-d-s-w" tabindex="-1"><a class="header-anchor" href="#_5-3-d-s-w"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_5-3-d-s-w" target="_blank" rel="noopener noreferrer">#</a>5.3 \\d \\s \\w .</span></a></h3><p><code>\\d</code> 匹配一个非负整数， 等价于 <code>[0-9]</code>；</p><p><code>\\s</code> 匹配一个空白字符；</p><p><code>\\w</code> 匹配一个英文字母或数字，等价于<code>[0-9a-zA-Z]</code>；</p><p><code>.</code> 匹配除换行符以外的任意字符，等价于<code>[^\\n]</code>。</p><h3 id="_5-4" tabindex="-1"><a class="header-anchor" href="#_5-4"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#_5-4" target="_blank" rel="noopener noreferrer">#</a>5.4 * + ?</span></a></h3><p><code>*</code>表示匹配前面元素0次或多次，比如<code>(\\s*)</code>就是匹配0个或多个空格；</p><p><code>+</code> 表示匹配前面元素1次或多次，比如<code>(\\d+)</code>就是匹配由至少1个整数组成的字符串；</p><p><code>?</code>表示匹配前面元素0次或1次，相当于<code>{0,1}</code>，比如<code>(\\w?)</code> 就是匹配最多由1个字母或数字组成的字符串 。</p><h2 id="六、语法大全" tabindex="-1"><a class="header-anchor" href="#六、语法大全"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E5%85%AD%E3%80%81%E8%AF%AD%E6%B3%95%E5%A4%A7%E5%85%A8" target="_blank" rel="noopener noreferrer">#</a>六、语法大全</span></a></h2><p><strong>修饰符</strong> 修饰符用于执行区分大小写和全局匹配:</p><table><thead><tr><th style="text-align:left;">修饰符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>i</code></td><td style="text-align:left;">执行对大小写不敏感的匹配。</td></tr><tr><td style="text-align:left;"><code>g</code></td><td style="text-align:left;">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td style="text-align:left;"><code>m</code></td><td style="text-align:left;">执行多行匹配。</td></tr></tbody></table><p><strong>方括号</strong> 方括号用于查找某个范围内的字符：</p><table><thead><tr><th style="text-align:left;">表达式</th><th style="text-align:left;">描述</th><th></th></tr></thead><tbody><tr><td style="text-align:left;"><code>[abc]</code></td><td style="text-align:left;">查找方括号之间的任何字符。</td><td></td></tr><tr><td style="text-align:left;"><code>[^abc]</code></td><td style="text-align:left;">查找任何不在方括号之间的字符。</td><td></td></tr><tr><td style="text-align:left;"><code>[0-9]</code></td><td style="text-align:left;">查找任何从 0 至 9 的数字。</td><td></td></tr><tr><td style="text-align:left;"><code>[a-z]</code></td><td style="text-align:left;">查找任何从小写 a 到小写 z 的字符。</td><td></td></tr><tr><td style="text-align:left;"><code>[A-Z]</code></td><td style="text-align:left;">查找任何从大写 A 到大写 Z 的字符。</td><td></td></tr><tr><td style="text-align:left;"><code>[A-z]</code></td><td style="text-align:left;">查找任何从大写 A 到小写 z 的字符。</td><td></td></tr><tr><td style="text-align:left;"><code>[adgk]</code></td><td style="text-align:left;">查找给定集合内的任何字符。</td><td></td></tr><tr><td style="text-align:left;">\`[^adgk</td><td style="text-align:left;">]\`</td><td>查找给定集合外的任何字符。</td></tr></tbody></table><p><strong>元字符</strong> 元字符（<code>Metacharacter</code>）是拥有特殊含义的字符：</p><table><thead><tr><th style="text-align:left;">元字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><strong><code>.</code></strong></td><td style="text-align:left;"><strong>查找单个字符，除了换行和行结束符。</strong></td></tr><tr><td style="text-align:left;"><strong><code>\\w</code></strong></td><td style="text-align:left;"><strong>查找单词字符。</strong></td></tr><tr><td style="text-align:left;"><strong><code>\\W</code></strong></td><td style="text-align:left;"><strong>查找非单词字符。</strong></td></tr><tr><td style="text-align:left;"><strong><code>\\d</code></strong></td><td style="text-align:left;"><strong>查找数字。</strong></td></tr><tr><td style="text-align:left;"><strong><code>\\D</code></strong></td><td style="text-align:left;"><strong>查找非数字字符。</strong></td></tr><tr><td style="text-align:left;"><strong><code>\\s</code></strong></td><td style="text-align:left;"><strong>查找空白字符。</strong></td></tr><tr><td style="text-align:left;"><strong><code>\\S</code></strong></td><td style="text-align:left;"><strong>查找非空白字符。</strong></td></tr><tr><td style="text-align:left;"><code>\\b</code></td><td style="text-align:left;">匹配单词边界。</td></tr><tr><td style="text-align:left;"><code>\\B</code></td><td style="text-align:left;">匹配非单词边界。</td></tr><tr><td style="text-align:left;"><code>\\0</code></td><td style="text-align:left;">查找 NULL 字符。</td></tr><tr><td style="text-align:left;"><code>\\n</code></td><td style="text-align:left;">查找换行符。</td></tr><tr><td style="text-align:left;"><code>\\f</code></td><td style="text-align:left;">查找换页符。</td></tr><tr><td style="text-align:left;"><code>\\r</code></td><td style="text-align:left;">查找回车符。</td></tr><tr><td style="text-align:left;"><code>\\t</code></td><td style="text-align:left;">查找制表符。</td></tr><tr><td style="text-align:left;"><code>\\v</code></td><td style="text-align:left;">查找垂直制表符。</td></tr><tr><td style="text-align:left;"><code>\\xxx</code></td><td style="text-align:left;">查找以八进制数 xxx 规定的字符。</td></tr><tr><td style="text-align:left;"><code>\\xdd</code></td><td style="text-align:left;">查找以十六进制数 dd 规定的字符。</td></tr><tr><td style="text-align:left;"><code>\\uxxxx</code></td><td style="text-align:left;">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><p><strong>量词</strong></p><table><thead><tr><th style="text-align:left;">量词</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>n+</code></td><td style="text-align:left;">匹配任何包含至少一个 <code>n</code>的字符串。例如，<code>/a+/</code> 匹配 <code>candy</code>中的 <code>a</code>，<code>caaaaaaandy</code> 中所有的<code>a</code>。</td></tr><tr><td style="text-align:left;"><code>n*</code></td><td style="text-align:left;">匹配任何包含零个或多个 <code>n</code> 的字符串。例如，<code>/bo*/</code>匹配 <code>A ghost booooed</code> 中的 <code>boooo</code>，<code>A bird warbled</code> 中的 <code>b</code>，但是不匹配 <code>A goat grunted</code>。</td></tr><tr><td style="text-align:left;"><code>n?</code></td><td style="text-align:left;">匹配任何包含零个或一个 <code>n</code> 的字符串。例如，<code>/e?le?/</code> 匹配 <code>angel</code> 中的 <code>el</code>，<code>angle</code> 中的 <code>le</code>。</td></tr><tr><td style="text-align:left;"><code>n{X}</code></td><td style="text-align:left;">匹配包含<code>X</code> 个<code>n</code>的序列的字符串。例如，<code>/a{2}/</code>不匹配 <code>candy,</code> 中的 <code>a</code>，但是匹配 <code>caandy,</code> 中的两个 <code>a</code>，且匹配 <code>caaandy.</code> 中的前两个 <code>a</code>。</td></tr><tr><td style="text-align:left;"><code>n{X,}</code></td><td style="text-align:left;"><code>X</code> 是一个正整数。前面的模式 <code>n</code> 连续出现至少<code>X</code> 次时匹配。例如，<code>/a{2,}/</code>不匹配 <code>candy</code> 中的 <code>a</code>，但是匹配 <code>caandy</code> 和 <code>caaaaaaandy.</code> 中所有的 <code>a</code>。</td></tr><tr><td style="text-align:left;"><code>n{X,Y}</code></td><td style="text-align:left;"><code>X</code>和 <code>Y</code> 为正整数。前面的模式<code>n</code> 连续出现至少 <code>X</code>次，至多 <code>Y</code>次时匹配。例如，<code>/a{1,3}/</code> 不匹配 <code>cndy</code>，匹配 <code>candy,</code> 中的 <code>a</code>，<code>caandy,</code> 中的两个 <code>a</code>，匹配 <code>caaaaaaandy</code> 中的前面三个 <code>a</code>。注意，当匹配 <code>caaaaaaandy</code> 时，即使原始字符串拥有更多的 <code>a</code>，匹配项也是 <code>aaa</code>。</td></tr><tr><td style="text-align:left;"><code>n{X,}</code></td><td style="text-align:left;">匹配包含至少 <code>X</code> 个<code>n</code> 的序列的字符串。</td></tr><tr><td style="text-align:left;"><code>n$</code></td><td style="text-align:left;">匹配任何结尾为 <code>n</code>的字符串。</td></tr><tr><td style="text-align:left;"><code>^n</code></td><td style="text-align:left;">匹配任何开头为<code>n</code>的字符串。</td></tr><tr><td style="text-align:left;"><code>?=n</code></td><td style="text-align:left;">匹配任何其后紧接指定字符串<code>n</code> 的字符串。</td></tr><tr><td style="text-align:left;"><code>?!n</code></td><td style="text-align:left;">匹配任何其后没有紧接指定字符串 <code>n</code> 的字符串。</td></tr></tbody></table><h2 id="七、常用的js正则表达式" tabindex="-1"><a class="header-anchor" href="#七、常用的js正则表达式"><span><a href="https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%83%E3%80%81%E5%B8%B8%E7%94%A8%E7%9A%84js%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener noreferrer">#</a>七、常用的js正则表达式</span></a></h2><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text" data-title="text"><pre><code><span class="line">1.验证用户名和密码：”^[a-zA-Z]\\w{5,15}$”</span>
<span class="line"></span>
<span class="line">2.验证电话号码：（”^\\d{3,4}-\\d{7,8}$”）</span>
<span class="line"></span>
<span class="line">eg：021-68686868 0511-6868686；</span>
<span class="line"></span>
<span class="line">3.验证手机号码：”^1[3|4|5|7|8][0-9]\\d{8}$”；</span>
<span class="line"></span>
<span class="line">4.验证身份证号（15位或18位数字）：”\\d{14}[[0-9],0-9xX]”；</span>
<span class="line"></span>
<span class="line">5.验证Email地址：(“^\\w+([-+.]\\w+)@\\w+([-.]\\w+).\\w+([-.]\\w+)*$”)；</span>
<span class="line"></span>
<span class="line">6.只能输入由数字和26个英文字母组成的字符串：(“^[A-Za-z0-9]+$”) ;</span>
<span class="line"></span>
<span class="line">7.整数或者小数：^[0-9]+([.]{0,1}[0-9]+){0,1}$</span>
<span class="line"></span>
<span class="line">8.只能输入数字：”^[0-9]*$”。</span>
<span class="line"></span>
<span class="line">9.只能输入n位的数字：”^\\d{n}$”。</span>
<span class="line"></span>
<span class="line">10.只能输入至少n位的数字：”^\\d{n,}$”。</span>
<span class="line"></span>
<span class="line">11.只能输入m~n位的数字：”^\\d{m,n}$”。</span>
<span class="line"></span>
<span class="line">12.只能输入零和非零开头的数字：”^(0|[1-9][0-9]*)$”。</span>
<span class="line"></span>
<span class="line">13.只能输入有两位小数的正实数：”^[0-9]+(.[0-9]{2})?$”。</span>
<span class="line"></span>
<span class="line">14.只能输入有1~3位小数的正实数：”^[0-9]+(.[0-9]{1,3})?$”。</span>
<span class="line"></span>
<span class="line">15.只能输入非零的正整数：”^+?[1-9][0-9]*$”。</span>
<span class="line"></span>
<span class="line">16.只能输入非零的负整数：”^-[1-9][]0-9″*$。</span>
<span class="line"></span>
<span class="line">17.只能输入长度为3的字符：”^.{3}$”。</span>
<span class="line"></span>
<span class="line">18.只能输入由26个英文字母组成的字符串：”^[A-Za-z]+$”。</span>
<span class="line"></span>
<span class="line">19.只能输入由26个大写英文字母组成的字符串：”^[A-Z]+$”。</span>
<span class="line"></span>
<span class="line">20.只能输入由26个小写英文字母组成的字符串：”^[a-z]+$”。</span>
<span class="line"></span>
<span class="line">21.验证是否含有%&amp;’,;=?$\\”等字符：”[%&amp;&#39;,;=?$\\x22]+”。</span>
<span class="line"></span>
<span class="line">22.只能输入汉字：”^[\\u4e00-\\u9fa5]{0,}$”。</span>
<span class="line"></span>
<span class="line">23.验证URL：”^http://([\\w-]+.)+[\\w-]+(/[\\w-./?%&amp;=]*)?$”。</span>
<span class="line"></span>
<span class="line">24.验证一年的12个月：”^(0?[1-9]|1[0-2])$”正确格式为：”01″～”09″和”10″～”12″。</span>
<span class="line"></span>
<span class="line">25.验证一个月的31天：”^((0?[1-9])|((1|2)[0-9])|30|31)$”正确格式为；”01″～”09″、”10″～”29″和“30”~“31”。</span>
<span class="line"></span>
<span class="line">26.获取日期正则表达式：[\\d{4](file:////d%7B4)}[年|-|.]\\d{\\1-\\12}[月|-|.]\\d{\\1-\\31}日?</span>
<span class="line"></span>
<span class="line">评注：可用来匹配大多数年月日信息。</span>
<span class="line"></span>
<span class="line">27.匹配双字节字符(包括汉字在内)：[^\\x00-\\xff]</span>
<span class="line"></span>
<span class="line">评注：可以用来计算字符串的长度（一个双字节字符长度计2，ASCII字符计1）</span>
<span class="line"></span>
<span class="line">28.匹配空白行的正则表达式：\\n\\s*\\r</span>
<span class="line"></span>
<span class="line">评注：可以用来删除空白行</span>
<span class="line"></span>
<span class="line">29.匹配HTML标记的正则表达式：&lt;(\\S?)[^&gt;]&gt;.?&lt;/&gt;|&lt;.? /&gt;</span>
<span class="line"></span>
<span class="line">评注：网上流传的版本太糟糕，上面这个也仅仅能匹配部分，对于复杂的嵌套标记依旧无能为力</span>
<span class="line"></span>
<span class="line">30.匹配首尾空白字符的正则表达式：^\\s|\\s$</span>
<span class="line"></span>
<span class="line">评注：可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式</span>
<span class="line"></span>
<span class="line">31.匹配网址URL的正则表达式：[a-zA-z]+://[^\\s]*</span>
<span class="line"></span>
<span class="line">评注：网上流传的版本功能很有限，上面这个基本可以满足需求</span>
<span class="line"></span>
<span class="line">32.匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</span>
<span class="line"></span>
<span class="line">评注：表单验证时很实用</span>
<span class="line"></span>
<span class="line">33.匹配腾讯QQ号：[1-9][0-9]{4,}</span>
<span class="line"></span>
<span class="line">评注：腾讯QQ号从10 000 开始</span>
<span class="line"></span>
<span class="line">34.匹配中国邮政编码：[1-9]\\d{5}(?!\\d)</span>
<span class="line"></span>
<span class="line">评注：中国邮政编码为6位数字</span>
<span class="line"></span>
<span class="line">35.匹配ip地址：((2[0-4]\\d|25[0-5]|[01]?\\d\\d?).){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)。</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><hr><hr><hr><blockquote><p><strong>定义复杂对象</strong></p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre><code><span class="line"><span class="token keyword">var</span> myclass <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;开发四组&quot;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">users</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;liankun&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;suyang&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">teacher</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zn&#39;</span><span class="token punctuation">,</span></span>
<span class="line">        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">30</span>    </span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">study</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;studying&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">myclass<span class="token punctuation">.</span>name</span>
<span class="line">myclass<span class="token punctuation">.</span><span class="token function">users</span></span>
<span class="line"><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>…<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token number">0</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;liankun&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;suyang&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">myclass<span class="token punctuation">.</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;liankun&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">myclass<span class="token punctuation">.</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name</span>
<span class="line"><span class="token string">&quot;liankun&quot;</span></span>
<span class="line">myclass<span class="token punctuation">.</span>users<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>age</span>
<span class="line"><span class="token number">18</span></span>
<span class="line"></span>
<span class="line">myclass<span class="token punctuation">.</span>teacher</span>
<span class="line"><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;zn&quot;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">myclass<span class="token punctuation">.</span>teacher<span class="token punctuation">.</span>name</span>
<span class="line"><span class="token string">&quot;zn&quot;</span></span>
<span class="line">myclass<span class="token punctuation">.</span><span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token constant">VM820</span><span class="token operator">:</span><span class="token number">15</span> studying</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,431),l=[t];function c(i,o){return a(),s("div",null,l)}const r=n(p,[["render",c],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/js/","title":"javascript学习","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"#第一章 基础语法","slug":"第一章-基础语法","link":"#第一章-基础语法","children":[]},{"level":2,"title":"#一、基本情况","slug":"一、基本情况","link":"#一、基本情况","children":[{"level":3,"title":"#1、介绍","slug":"_1、介绍","link":"#_1、介绍","children":[]},{"level":3,"title":"#2、JS解释器","slug":"_2、js解释器","link":"#_2、js解释器","children":[]},{"level":3,"title":"#3、js哪里可以执行","slug":"_3、js哪里可以执行","link":"#_3、js哪里可以执行","children":[]}]},{"level":2,"title":"#二、数据类型","slug":"二、数据类型","link":"#二、数据类型","children":[]},{"level":2,"title":"#三、定义变量","slug":"三、定义变量","link":"#三、定义变量","children":[]},{"level":2,"title":"#四、数组（array）","slug":"四、数组-array","link":"#四、数组-array","children":[{"level":3,"title":"#1、定义的方式","slug":"_1、定义的方式","link":"#_1、定义的方式","children":[]},{"level":3,"title":"#2、赋值的方式","slug":"_2、赋值的方式","link":"#_2、赋值的方式","children":[]}]},{"level":2,"title":"#五、方法","slug":"五、方法","link":"#五、方法","children":[]},{"level":2,"title":"#六、 对象（object）","slug":"六、-对象-object","link":"#六、-对象-object","children":[{"level":3,"title":"#1、定义空对象","slug":"_1、定义空对象","link":"#_1、定义空对象","children":[]},{"level":3,"title":"#2、给对象添加属性和方法","slug":"_2、给对象添加属性和方法","link":"#_2、给对象添加属性和方法","children":[]},{"level":3,"title":"#3、获取对象的属性的方法","slug":"_3、获取对象的属性的方法","link":"#_3、获取对象的属性的方法","children":[]}]},{"level":2,"title":"#六、判断和循环","slug":"六、判断和循环","link":"#六、判断和循环","children":[{"level":3,"title":"#1、if语句","slug":"_1、if语句","link":"#_1、if语句","children":[]},{"level":3,"title":"#2、switch语句","slug":"_2、switch语句","link":"#_2、switch语句","children":[]},{"level":3,"title":"#3、循环数组","slug":"_3、循环数组","link":"#_3、循环数组","children":[]},{"level":3,"title":"#4、遍历对象属性","slug":"_4、遍历对象属性","link":"#_4、遍历对象属性","children":[]}]},{"level":2,"title":"#第二章 常见内置对象","slug":"第二章-常见内置对象","link":"#第二章-常见内置对象","children":[]},{"level":2,"title":"#一、Array对象","slug":"一、array对象","link":"#一、array对象","children":[]},{"level":2,"title":"#二、Global对象","slug":"二、global对象","link":"#二、global对象","children":[]},{"level":2,"title":"#三、String对象","slug":"三、string对象","link":"#三、string对象","children":[]},{"level":2,"title":"#四、Math对象","slug":"四、math对象","link":"#四、math对象","children":[]},{"level":2,"title":"#五、Date对象","slug":"五、date对象","link":"#五、date对象","children":[]},{"level":2,"title":"#第三章 DOM编程","slug":"第三章-dom编程","link":"#第三章-dom编程","children":[]},{"level":2,"title":"#一、概述","slug":"一、概述","link":"#一、概述","children":[]},{"level":2,"title":"#二、元素节点","slug":"二、元素节点","link":"#二、元素节点","children":[{"level":3,"title":"#1、获取元素节点的方法","slug":"_1、获取元素节点的方法","link":"#_1、获取元素节点的方法","children":[]},{"level":3,"title":"#2、修改元素节点的内容","slug":"_2、修改元素节点的内容","link":"#_2、修改元素节点的内容","children":[]},{"level":3,"title":"#3、删除一个元素节点","slug":"_3、删除一个元素节点","link":"#_3、删除一个元素节点","children":[]},{"level":3,"title":"#4、新建一个元素节点","slug":"_4、新建一个元素节点","link":"#_4、新建一个元素节点","children":[]},{"level":3,"title":"#5、获取所有的子节点","slug":"_5、获取所有的子节点","link":"#_5、获取所有的子节点","children":[]}]},{"level":2,"title":"#三、属性节点","slug":"三、属性节点","link":"#三、属性节点","children":[{"level":3,"title":"#1、使用元素节点方法进行增删查改","slug":"_1、使用元素节点方法进行增删查改","link":"#_1、使用元素节点方法进行增删查改","children":[]},{"level":3,"title":"#2、使用属性节点对象对属性本身进行操作","slug":"_2、使用属性节点对象对属性本身进行操作","link":"#_2、使用属性节点对象对属性本身进行操作","children":[]}]},{"level":2,"title":"#三、常用属性操作","slug":"三、常用属性操作","link":"#三、常用属性操作","children":[]},{"level":2,"title":"#第四章 BOM编程","slug":"第四章-bom编程","link":"#第四章-bom编程","children":[]},{"level":2,"title":"#一、概述","slug":"一、概述-1","link":"#一、概述-1","children":[]},{"level":2,"title":"#二、常用方法","slug":"二、常用方法","link":"#二、常用方法","children":[{"level":3,"title":"#1、setTimeout","slug":"_1、settimeout","link":"#_1、settimeout","children":[]},{"level":3,"title":"#2、setInterval","slug":"_2、setinterval","link":"#_2、setinterval","children":[]},{"level":3,"title":"#3、浏览器自带小型数据库","slug":"_3、浏览器自带小型数据库","link":"#_3、浏览器自带小型数据库","children":[]},{"level":3,"title":"#4、弹窗其实没求用","slug":"_4、弹窗其实没求用","link":"#_4、弹窗其实没求用","children":[]},{"level":3,"title":"#5、history","slug":"_5、history","link":"#_5、history","children":[]},{"level":3,"title":"#6、navigator","slug":"_6、navigator","link":"#_6、navigator","children":[]},{"level":3,"title":"#5、一点注意","slug":"_5、一点注意","link":"#_5、一点注意","children":[]}]},{"level":2,"title":"#第五章 事件","slug":"第五章-事件","link":"#第五章-事件","children":[]},{"level":2,"title":"#一 、定义事件","slug":"一-、定义事件","link":"#一-、定义事件","children":[{"level":3,"title":"#（1）addEventListener","slug":"_1-addeventlistener","link":"#_1-addeventlistener","children":[]},{"level":3,"title":"#（2）onclick","slug":"_2-onclick","link":"#_2-onclick","children":[]},{"level":3,"title":"#（3）标签内使用","slug":"_3-标签内使用","link":"#_3-标签内使用","children":[]}]},{"level":2,"title":"#二、清除事件","slug":"二、清除事件","link":"#二、清除事件","children":[]},{"level":2,"title":"#三、事件分类","slug":"三、事件分类","link":"#三、事件分类","children":[{"level":3,"title":"#（1）鼠标事件","slug":"_1-鼠标事件","link":"#_1-鼠标事件","children":[]},{"level":3,"title":"#（2）键盘事件","slug":"_2-键盘事件","link":"#_2-键盘事件","children":[]},{"level":3,"title":"#（3）表单事件","slug":"_3-表单事件","link":"#_3-表单事件","children":[]},{"level":3,"title":"#（4）（文档、浏览器）对象事件","slug":"_4-文档、浏览器-对象事件","link":"#_4-文档、浏览器-对象事件","children":[]}]},{"level":2,"title":"#四、事件冒泡和捕获","slug":"四、事件冒泡和捕获","link":"#四、事件冒泡和捕获","children":[]},{"level":2,"title":"#第六章 语法深入","slug":"第六章-语法深入","link":"#第六章-语法深入","children":[]},{"level":2,"title":"#一、回调函数","slug":"一、回调函数","link":"#一、回调函数","children":[]},{"level":2,"title":"#二、方法默认传入的形参","slug":"二、方法默认传入的形参","link":"#二、方法默认传入的形参","children":[{"level":3,"title":"#1、arguments","slug":"_1、arguments","link":"#_1、arguments","children":[]},{"level":3,"title":"#2、this","slug":"_2、this","link":"#_2、this","children":[]}]},{"level":2,"title":"#三、作用域","slug":"三、作用域","link":"#三、作用域","children":[]},{"level":2,"title":"#四、闭包使用","slug":"四、闭包使用","link":"#四、闭包使用","children":[{"level":3,"title":"#一、基本示例","slug":"一、基本示例","link":"#一、基本示例","children":[]},{"level":3,"title":"#二、使用闭包做计数器","slug":"二、使用闭包做计数器","link":"#二、使用闭包做计数器","children":[]},{"level":3,"title":"#三、使用闭包做缓存","slug":"三、使用闭包做缓存","link":"#三、使用闭包做缓存","children":[]},{"level":3,"title":"#四、闭包问题","slug":"四、闭包问题","link":"#四、闭包问题","children":[]}]},{"level":2,"title":"#第七章 原型","slug":"第七章-原型","link":"#第七章-原型","children":[{"level":3,"title":"#一、原型对象","slug":"一、原型对象","link":"#一、原型对象","children":[]},{"level":3,"title":"#二、原型链","slug":"二、原型链","link":"#二、原型链","children":[]},{"level":3,"title":"#三、原型检测","slug":"三、原型检测","link":"#三、原型检测","children":[]},{"level":3,"title":"#四、属性遍历","slug":"四、属性遍历","link":"#四、属性遍历","children":[]},{"level":3,"title":"#五、借用原型","slug":"五、借用原型","link":"#五、借用原型","children":[]}]},{"level":2,"title":"","slug":"","link":"#","children":[{"level":3,"title":"#六、prototype","slug":"六、prototype","link":"#六、prototype","children":[]},{"level":3,"title":"#七、Object.create","slug":"七、object-create","link":"#七、object-create","children":[]},{"level":3,"title":"#八、proto","slug":"八、proto","link":"#八、proto","children":[]},{"level":3,"title":"#使用建议","slug":"使用建议","link":"#使用建议","children":[]}]},{"level":2,"title":"#第八章 正则表达式","slug":"第八章-正则表达式","link":"#第八章-正则表达式","children":[]},{"level":2,"title":"#一、什么是正则表达式","slug":"一、什么是正则表达式","link":"#一、什么是正则表达式","children":[]},{"level":2,"title":"#二、创建正则表达式","slug":"二、创建正则表达式","link":"#二、创建正则表达式","children":[]},{"level":2,"title":"#三、正则表达式本身的方法","slug":"三、正则表达式本身的方法","link":"#三、正则表达式本身的方法","children":[]},{"level":2,"title":"#四、字符串对象中与正则表达式有关的方法","slug":"四、字符串对象中与正则表达式有关的方法","link":"#四、字符串对象中与正则表达式有关的方法","children":[]},{"level":2,"title":"#五、常用语法分析","slug":"五、常用语法分析","link":"#五、常用语法分析","children":[{"level":3,"title":"#5.1 ()、[]、{} 的区别","slug":"_5-1-、-、-的区别","link":"#_5-1-、-、-的区别","children":[]},{"level":3,"title":"#5.2 ^ 和 $","slug":"_5-2-和","link":"#_5-2-和","children":[]},{"level":3,"title":"#5.3 \\\\d \\\\s \\\\w .","slug":"_5-3-d-s-w","link":"#_5-3-d-s-w","children":[]},{"level":3,"title":"#5.4 * + ?","slug":"_5-4","link":"#_5-4","children":[]}]},{"level":2,"title":"#六、语法大全","slug":"六、语法大全","link":"#六、语法大全","children":[]},{"level":2,"title":"#七、常用的js正则表达式","slug":"七、常用的js正则表达式","link":"#七、常用的js正则表达式","children":[]}],"git":{"updatedTime":1723726527000,"contributors":[{"name":"zqb","email":"2506956864@qq.com","commits":1}]},"filePathRelative":"js/README.md","excerpt":"\\n<h2><a class=\\"header-anchor\\" href=\\"#第一章-基础语法\\"><span></span></a><a href=\\"https://www.ydlclass.com/doc21xnv/javaweb/js/#%E7%AC%AC%E4%B8%80%E7%AB%A0-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">#</a>第一章 基础语法</h2>\\n<h2><a class=\\"header-anchor\\" href=\\"#一、基本情况\\"><span></span></a><a href=\\"https://www.ydlclass.com/doc21xnv/javaweb/js/#%E4%B8%80%E3%80%81%E5%9F%BA%E6%9C%AC%E6%83%85%E5%86%B5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">#</a>一、基本情况</h2>"}');export{r as comp,d as data};
